import re

def find_best_sgrna_target():
    """
    Analyzes sgRNA options to find the best target in the second exon
    of the provided DNA sequence.
    """
    # --- INPUT DATA ---
    # The full DNA sequence containing Exon 1, Intron, and Exon 2, separated by '^'
    full_seq = "ATGTGTGCCTGCGGGATACTTTTGACTTTTACTTTGCTTTTGCATTTTCTTGGTGTTCACTCAATGAATCCTCTGTTTCCAAGCGCATCCAGGGGCATGAAAGTGTCTAAGTCTGTTCCTGCTGAGGGCAACAGGAGAGCAAAATACGGCAAGAATGTGCTGTCAGCATCACTGTTATCCGGAGACATACAGTCCAGAAGGGCGATCAAGGATGCGATTGAACCTCACGATTACATGATTTCCATATACAAGACCTTTTCAGCGGCTGAAAAACTGGGACTGAACGCGAGTTTTTTCCGCTCGTCTAAAGCAGCAAACACCATCACGAGCTTTGTGGACGAGGGTCAAG^GTTAGTTATTTCTACTTATACAAGCAACAGTGATTTCAAACGCACACGTACTGATTCTATATTGGTACTCACAGGGAAAAAAAAAAAAAAAACATTTGTATACAATTCAAACAACTCTTAAAGGAATACAGTCAAATGTGTCAGTGAACAGATGGAAACAAAGCATTTTGAATATTAGGCCTATATCATCTATGATACTGCGGAAAATCTTCAAGAAATCTTTTTCCCCTAATAGTAAAAATAATGACAACAATATATGTATAACATTATACACTTCTGTTTACAATCTTGCATAAAATAAGTTGTGTTTGCATCAAAGTGTGTATACATGCACTGTCCATTTCAAATATTTTTTATTGGAATGTGTAGGAATTTTCACGATGTAGGCAGGTTATTATCACTATAAAGTGCCTTAGATGTCCCACAAGATTGAATCAGTCCCATATGAGCATAATGCGAAATTGATGTTTTAATATGATTGGTTAAACTTGTACACACATGCAGGTAGAATTATGAGTGTTTTGAAACATGTTTTTGCCAATTATTGCCATAGTCTTTTATTGAATGGATGTGATTTTGCCATGTCCCACACACTGCACAGCCAAGTTCAGTAAGTCTAAAAAGTAGCTAAATTAGATAAATTTTTTTTAAATGTTTAAGTATTCTTTCTATTCTTACAGTTATTTTGAAAACTAAATCATTTTTATAACTTTTATTTTTTATTCTTTTATAATATTATTAATCATTTTGCACGAGTCTTTGAGTTTGCTGTCCACCCTGTCATGATGTAGTAAATCCCCTTTAAGAAACCCTCTGATGTACTCATTGGCATCCCCATGCCTATTTTGCTTTTCTTTCAAGGAGGTTAAAAAAACTGATGTGCACACATTAAATATCTACATATATGTTTCCTATTTTTCATCATATTGTGTTTGAAACCGAATGTGGTCAAGCTTAACATGTCCACCCTGTCATAGTAAAATATTAATTAATATAAAAAATTCGGAAATCAAAGATAGCTTTTAAACTGTATACAAAGAGCTTAAATAAGGAAACACTTTACCAGCTGCAGGTTCAACCTGTGTTAAATAAATGCTATCTTTAGCCAAAAATGTCCTCCTTGTTATTGTCCACCCTTTCACAAATCCTTCCTTGGGTGGACATATGCATCGTTATTGACACTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTTTTGTTAATCAGCTAATGTTTTATTATGGTACATCACATACATACTACACCAGTAGATGCAATACATAAGTGGACAATACAAATCTTTTGGCAATATTTATCTCAGTCTATATAAAGAATATCCTTTTAAAGTCCATATAAGGCAGCTCATTGACTGTTTGAAATTAAAATACATTATTTATCCTATTCTGGAAAAGAAAAAATATGATACATTTGTGCGTTGATGGATTTGAAACCACACTGGACTGAACTAATTTGAACTTTTAATTTCAATTCACTACAACTTCTATGTTAAGCTGCTTAGACACAATTTACATTACAGGTGTCAAATCCAGTTTCTTAAGAGCCACAGCTCTGCACAGTTTAGGGTTAACCCTAATTAAACACACCTGATCAAACTAATTGAGTCCTTCAGGCTTGTTTGATACCTACAGGTAGGTTTGTTAAAGCAAGGTTGGAACTAAATTGTGCAGAGCTGCGGCCCTTCAGGAACTAGATTTGACACCTAATTTACATTATGGAAACGCTATAGAAATAAAGATAAATTGAATTGAATAGATTTTTCTCCTCCAAAACACTATATATAAAAATACTAATTAGCAAATGCTAGTATTAGAAAAAAAAATTAGAACCTAGCTTTAAAAACTTTAGCATAATGAAAGAAACAGAGACACAAGACAGAAATAAATTTCAACATATGTCACCTTAATTAGGTAAAAACGAGTTCTCGATCTGCACATGCCATAACAGATATTGTAAATTTTGTGGATGCAGATCTAGTGTCAACAAGCATCTGTTCTCTTTGTTTCAG^ATGACCATTTGAACTCTCCACTTTGGAGACAGAAATATTTATTCGACGTATCAACGCTTTCTGAAAATGTGGAGATCCTGGGTGCCGAACTGAGGATTTACACAAAGATCTCCGGAAGCTTCCGCGCATCTGAAACCGGTCCTGTGGAAATACAGCTTCTCTCCTGCCAGTCGCACACTGTCCTTGATTCACAAACTTTGGATCTGGAGGATGCACATAAACCAAAATGGGAAGTTTTCGACGTCTGGGAGATTTTTAAGGAACGTCAGCACCACTCTCATGGCACCCGCTTCTGTTTAGAGCTCAGGGCCACACTGGATAATCCAGAGAGAGAAATTGATTTGCAATATCTTGGATTTCACAGACATGGCCGCCCGCAACTGAAGAAAGCCATACTGGTTGTTTTCACAAGGTCAAAAAAGAGGCAAAGTCTTTTTTATGAAAAAAGAGAGAAGATCAAGCTATGGGGTCTGGATAGTATTGGTAAGGAAAGAAGATCCCACTCGAAAACCCGCCGGAGCAGACGGACTGCTCTACCCAATCGCCATGGCAAGAGACATGGTAAAAAGTCAAAATCTAGATGCAGCAAAAAGCCACTGCATGTCAATTTCAGAGAGCTGGGTTGGGACGATTGGGTCATCGCTCCATTAGATTATGAGGCTTATCACTGTGAGGGCATGTGTGACTTTCCCCTCCGATCTCACCTGGAACcaaccaatcatgccatcatacaaactctaatgaactcaatgaaccccagcaacatgccacccagctgttgcgtcccctccaaactcagtcccattagcatcttgtacattgacgcaggaaataatgttgtgtacaagcagtatgaagacatggtagtggagtcctgcggctgcagatga"
    
    # Candidate E: GCATCTGAAACCGGTCCTG(TGG)
    # This is the only candidate that satisfies all criteria.
    candidate_key = 'E'
    guide_sequence = 'GCATCTGAAACCGGTCCTG'
    pam_sequence = 'TGG'
    
    # --- ANALYSIS ---

    print(f"Analyzing candidate sgRNA: {candidate_key}\n")

    # Step 1: Split the sequence and isolate the second exon
    try:
        parts = full_seq.upper().split('^')
        exon2 = parts[2]
        print("Successfully parsed the sequence and isolated Exon 2.")
    except IndexError:
        print("Error: Could not parse the sequence. Ensure it contains two '^' characters.")
        return

    # Step 2: Form the full target site and confirm its presence in the correct location
    full_target_site = guide_sequence + pam_sequence
    print(f"Searching for the full target site '{full_target_site}' in Exon 2.")
    
    if full_target_site in exon2:
        print("...Success! The target site is correctly located in Exon 2.")
    else:
        print("...Error: The target site was not found in Exon 2.")
        return

    # Step 3: Validate key sgRNA design criteria
    print("\nValidating sgRNA design criteria:")
    # Check PAM
    if pam_sequence[1:] == 'GG':
        print(f"- PAM '{pam_sequence}' is a valid NGG motif for spCas9. (PASS)")
    else:
        print(f"- PAM '{pam_sequence}' is not a valid NGG motif. (FAIL)")

    # Check GC Content
    gc_content = (guide_sequence.count('G') + guide_sequence.count('C')) / len(guide_sequence) * 100
    if 40 <= gc_content <= 80:
        print(f"- GC content is {gc_content:.1f}%, within the ideal 40-80% range. (PASS)")
    else:
        print(f"- GC content is {gc_content:.1f}%, outside the ideal range. (NOTE)")
        
    # Check for simple repeats (as a proxy for specificity)
    if not re.search(r'([ACGT])\1\1\1', guide_sequence):
         print("- Guide sequence does not contain disruptive mononucleotide repeats. (PASS)")
    else:
         print("- Guide contains mononucleotide repeats. (NOTE)")
    
    # --- CONCLUSION ---
    print("\n-------------------------------------------------------------")
    print("Conclusion: Option E is the only suitable sgRNA target.")
    print("It correctly targets the second exon and meets all key design criteria for spCas9.")
    print("Other options were invalid because they were found in the wrong location (e.g., intron, exon 1), had an invalid PAM, or were not found in the sequence at all.\n")
    print("The final target sequence is constructed as follows:")
    
    # The final output is the equation as requested.
    print(f"{guide_sequence} + {pam_sequence} = {full_target_site}")

# Execute the analysis
find_best_sgrna_target()
print("\n<<<E>>>")