import math

def count_power_subgroups_of_semidihedral(group_order):
    """
    Calculates the number of power subgroups in a semidihedral group.

    Args:
        group_order: The order of the semidihedral group, which must be a power of 2.
    """
    if group_order <= 0 or (group_order & (group_order - 1)) != 0:
        print("Error: The group order must be a power of 2.")
        return

    # For a semidihedral group SD_{2^n}, the order is 2^n.
    # We find n = log2(group_order).
    n = int(math.log2(group_order))

    # For a semidihedral group SD_{2^n} (where n >= 3), the number of
    # power subgroups is exactly n.
    # These subgroups are:
    # 1. The group SD_{2^n} itself.
    # 2. The n-1 cyclic subgroups <a^{2^i}> for i = 1, 2, ..., n-1,
    #    where 'a' is a generator of the maximal cyclic subgroup of order 2^{n-1}.

    num_cyclic_subgroups = n - 1
    total_power_subgroups = 1 + num_cyclic_subgroups

    print(f"The semidihedral group of size {group_order} is denoted as SD_{{{group_order}}}.")
    print(f"This corresponds to the form SD_{{2^n}} with n = {n}.")
    print("\nAccording to group theory, the power subgroups are:")
    print(f"1. The group SD_{{{group_order}}} itself.")
    for i in range(1, n):
        exponent = 2**i
        print(f"{i + 1}. A cyclic subgroup of order {2**(n-1-i)} generated by an element like a^{{{exponent}}}.")
    
    print("\nThe final equation for the total number of power subgroups is:")
    print(f"1 (the group itself) + {num_cyclic_subgroups} (cyclic subgroups) = {total_power_subgroups}")

# Size of the semidihedral group
semidihedral_group_size = 512
count_power_subgroups_of_semidihedral(semidihedral_group_size)
