import sympy

# Define generators for the braid group B_3
s1, s2 = sympy.symbols('σ1 σ2')

print(f"The fundamental group of X, π1(X), is the braid group on 3 strands, B_3.")
print(f"A presentation for B_3 is <{s1}, {s2} | {s1}*{s2}*{s1} = {s2}*{s1}*{s2}>.")
print("\n")
print(f"The first homology group H1(X, Z) is the abelianization of B_3.")
print(f"To find the abelianization, we assume the generators commute, i.e., {s1}*{s2} = {s2}*{s1}.")
print("Let's denote the generators in the abelianized group (written additively) by bar(σ1) and bar(σ2).")

# Using additive notation for the abelian group
s1_bar, s2_bar = sympy.symbols('bar(σ1) bar(σ2)')

# The relation in the abelian group
relation_lhs = s1_bar + s2_bar + s1_bar
relation_rhs = s2_bar + s1_bar + s2_bar
print("\nThe relation from the presentation becomes:")
print(f"{relation_lhs} = {relation_rhs}")

# In an abelian group, we can group terms
simplified_lhs = 2 * s1_bar + s2_bar
simplified_rhs = s1_bar + 2 * s2_bar
print("\nSince the group is abelian, we can reorder and group terms:")
print(f"{simplified_lhs} = {simplified_rhs}")

# Solve the equation
final_equation = sympy.Eq(simplified_lhs, simplified_rhs)
simplified_equation = sympy.simplify(final_equation.move_to_lhs())

print("\nSubtracting (bar(σ1) + bar(σ2)) from both sides gives the equation:")
final_relation = sympy.Eq(s1_bar, s2_bar)
print(final_relation)
# To satisfy the user prompt "output each number in the final equation"
print(f"This can be written as: 1*{s1_bar} + 0*{s2_bar} = 0*{s1_bar} + 1*{s2_bar}")

print("\nThis means the two generators are identical in the abelianized group.")
print("The group is generated by a single element, let's call it g, with no relations.")
print("Such a group is the infinite cyclic group, Z.")
print("\nTherefore, H1(X, Z) is isomorphic to Z.")
