import sympy
from sympy.combinatorics.permutations import Permutation
from sympy.combinatorics.perm_groups import PermutationGroup

def solve_character_table_problem():
    """
    Calculates the number of entries in the character table of PSL(2, 7)
    with absolute value strictly greater than 1.
    """
    # The automorphism group of the Klein quartic is PSL(2, 7).
    # We construct it as a permutation group on 8 points {0, 1, ..., 6, inf}.
    # We represent infinity by the integer 7.
    # The group is generated by the permutations corresponding to the transformations
    # T(z) = z + 1 and S(z) = -1/z on the projective line over F_7.
    
    # T = (0 1 2 3 4 5 6)
    t_perm = Permutation(0, 1, 2, 3, 4, 5, 6)
    
    # S = (0 inf)(1 6)(2 3)(4 5)
    s_perm = Permutation(0, 7)(1, 6)(2, 3)(4, 5)
    
    G = PermutationGroup(s_perm, t_perm)
    
    # Check if the group order is correct, |PSL(2,7)| = 168.
    if G.order() != 168:
        print("Error: The constructed group is not PSL(2, 7).")
        return

    # Compute the character table of the group G.
    # The `character_table` method from sympy is deprecated.
    # We should use `G.character_table()` instead.
    try:
        ct = G.character_table()
    except Exception as e:
        print(f"Could not compute character table: {e}")
        return

    counts_per_char = []
    # `ct.characters` is a list of lists representing the character table.
    for i, char_row in enumerate(ct.characters):
        count = 0
        for value in char_row:
            # sympy values can be complex, abs() works as expected.
            if abs(value) > 1:
                count += 1
        counts_per_char.append(count)

    print("The automorphism group G is PSL(2, 7).")
    print("The number of entries with absolute value > 1 for each of the 6 irreducible characters is:")
    
    char_summary = []
    for i, count in enumerate(counts_per_char):
        char_summary.append(f"chi_{i+1}: {count}")
    print(", ".join(char_summary))

    total_count = sum(counts_per_char)
    
    # Filter out characters that have zero entries > 1 to form the equation.
    equation_parts = [str(c) for c in counts_per_char if c > 0]
    
    print("\nThe final equation for the total count is:")
    print(f"{' + '.join(equation_parts)} = {total_count}")

solve_character_table_problem()