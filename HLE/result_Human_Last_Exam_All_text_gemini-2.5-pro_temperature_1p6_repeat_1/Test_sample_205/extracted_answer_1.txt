175[
void main() {
    // Variable Declarations to minimize memory usage
    // Total Memory = 158 (array) + 3 (num_digits) + 3 (i) + 3 (j) + 8 (carry) = 175D

    // Array to store the digits of 100!. 100! has 158 digits.
    digit result_digits[158]; // 158 * 1D = 158D

    // Tracks the current number of digits in the result. Max will be 158.
    // 'char' (0-999) is the smallest sufficient type.
    char num_digits; // 3D

    // Loop counter for multiplying by numbers from 2 to 100.
    // 'char' (0-999) is the smallest sufficient type.
    char i; // 3D
    
    // Loop counter for iterating through the digit array. Max will be 157.
    // 'char' (0-999) is the smallest sufficient type.
    char j; // 3D

    // The carry variable can exceed the capacity of 'unsigned int' (9999).
    // For example, 9 * 100 + 9999 = 10899. Thus 'long' is required.
    long carry; // 8D
    
    // -- Algorithm Implementation --

    // Initialize the result to 1.
    num_digits = 1;
    result_digits[0] = 1;
    
    // Multiply by each integer from 2 to 100.
    for (i = 2; i <= 100; i++) {
        carry = 0;
        
        // Multiply the current large number (in result_digits) by i.
        for (j = 0; j < num_digits; j++) {
            // Store the product in the 'carry' variable to save memory.
            carry = result_digits[j] * i + carry;
            result_digits[j] = carry % 10;
            carry = carry / 10;
        }
        
        // If there's a remaining carry, append its digits to the array.
        while (carry > 0) {
            result_digits[num_digits] = carry % 10;
            num_digits++;
            carry = carry / 10;
        }
    }
    
    // -- Print the Final Result --
    
    // The result is stored in reverse order. We print from the last digit.
    // NOTE: A 'for' loop with 'j >= 0' would be infinite because 'char' is
    // unsigned (0-999). A 'while' loop is the correct, safe approach.
    j = num_digits;
    while (j > 0) {
        j--;
        printf("%d", result_digits[j]);
    }
    printf("\n");
}
]