import numpy as np

# Step 1: Define the geometric setup in terms of vectors.
# The original space P corresponds to a cone generated by the standard basis vectors in 3D.
e1 = np.array([1, 0, 0])
e2 = np.array([0, 1, 0])
e3 = np.array([0, 0, 1])

# The dimension of the original space is the rank of the matrix formed by its cone generators.
original_space_matrix = np.array([e1, e2, e3])
dim_P = np.linalg.matrix_rank(original_space_matrix)
print(f"The original space P is {dim_P}-dimensional.")
print("-" * 20)

# Step 2: Define the blowup operation.
# The log ideal I is generated by (1,0,0) and (0,1,0), corresponding to e1 and e2.
# The log blowup introduces a new ray given by the sum of these generators.
v = e1 + e2
print(f"The blowup introduces a new vector v = {v.tolist()}.")
print("-" * 20)

# Step 3: Construct the new cones after the blowup subdivision.
# The original cone is split into two new maximal cones, sigma1 and sigma2.
# We find the dimension of each by calculating the rank of their generator matrices.

# New cone sigma1
gens_sigma1 = np.array([e1, e3, v])
dim_sigma1 = np.linalg.matrix_rank(gens_sigma1)
print(f"The generators for the first new cone are:\n{gens_sigma1}")
print(f"The dimension of the first new cone is {dim_sigma1}.")
print("-" * 20)

# New cone sigma2
gens_sigma2 = np.array([e2, e3, v])
dim_sigma2 = np.linalg.matrix_rank(gens_sigma2)
print(f"The generators for the second new cone are:\n{gens_sigma2}")
print(f"The dimension of the second new cone is {dim_sigma2}.")
print("-" * 20)

# Step 4: Determine the dimension of the resulting space.
# The dimension of the log blowup is the maximum dimension of the new maximal cones.
dim_blowup = max(dim_sigma1, dim_sigma2)

print("The dimension of the log blowup is the maximum of the dimensions of the new cones.")
# The final equation with the numbers plugged in:
print(f"Dimension of log blowup = max({dim_sigma1}, {dim_sigma2}) = {dim_blowup}")