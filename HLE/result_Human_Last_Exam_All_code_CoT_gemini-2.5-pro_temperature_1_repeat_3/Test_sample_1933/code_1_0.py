import itertools

def get_powerset_as_frozensets(s):
    """Returns the powerset of a set s, with subsets as frozensets."""
    s_list = list(s)
    # Using frozenset for subsets makes them hashable, so they can be added to a set.
    return set(
        itertools.chain.from_iterable(
            (frozenset(combo) for combo in itertools.combinations(s_list, r))
            for r in range(len(s_list) + 1)
        )
    )

def main():
    """
    Calculates and demonstrates the VC dimension for the given logical fragment.
    """
    # The schema S has 4 unary predicates.
    k = 4
    
    print(f"The schema S contains {k} unary predicates.")
    print("The logical fragment is FO_{exists, and, T, B}.")
    print("This logic can express all concepts formed by intersections of the base predicates.")
    print(f"We will now show that the VC dimension of this concept class is {k}.")

    # --- Part 1: Show VC dimension is at least k ---
    print("\n--- Part 1: Proving VC dimension >= 4 ---")
    print(f"We need to find a set C of size {k} that can be shattered.")
    
    # Let C be a set of k elements. We use integers for simplicity.
    C = frozenset(range(k))
    print(f"Let's choose our set C to be: {set(C)}")
    
    # To shatter C, we need to define the 4 predicates on a universe containing C.
    # We choose the universe to be C itself and define the predicates P_i = C \ {i}.
    predicates = [C - {i} for i in range(k)]
    print("\nWe define the 4 predicates (P1, P2, P3, P4) on C as:")
    for i, p in enumerate(predicates):
        print(f"P{i+1} = C \\ {{{i}}} = {set(p)}")
        
    # The concept class H is formed by all possible intersections of these predicates.
    # A concept h_I is the intersection of P_i for i in I.
    index_set = set(range(k))
    powerset_of_indices = get_powerset_as_frozensets(index_set)
    
    # Calculate all concepts generated by these intersections.
    concepts = set()
    print("\nThe concept class H consists of all intersections of these predicates:")
    for indices in sorted(list(powerset_of_indices), key=len):
        # The empty intersection (indices=()) is the whole set C (the universe).
        concept = C.copy()
        for i in indices:
            concept &= predicates[i]
        concepts.add(frozenset(concept))
        
        # Create a string representation for the printout.
        if not indices:
            formula_str = "Universe (Top)"
        else:
            formula_str = " & ".join([f"P{i+1}" for i in sorted(list(indices))])
        print(f"  - Concept from intersection '{formula_str}' results in set: {set(concept)}")
        
    # To shatter C, we must be able to generate every subset of C.
    # Let's generate the powerset of C.
    powerset_of_C = get_powerset_as_frozensets(C)
    
    print(f"\nNumber of concepts generated: {len(concepts)}")
    print(f"Number of subsets of C (size of powerset): {len(powerset_of_C)}")
    
    # Check if the set of generated concepts is equal to the powerset of C.
    if concepts == powerset_of_C:
        print(f"\nSuccess! The concept class H generated all {len(powerset_of_C)} subsets of C.")
        print(f"This shatters the set C, proving that the VC dimension is at least {k}.")
    else:
        # This part should not be reached with this construction.
        print("\nFailure! The concept class H does NOT shatter the set C.")

    # --- Part 2: Show VC dimension is at most k ---
    print("\n--- Part 2: Proving VC dimension <= 4 ---")
    print(f"Can we shatter a set D of size {k+1} = 5?")
    
    num_subsets_to_generate = 2**(k+1)
    print(f"To shatter a set of size 5, we would need to generate all 2^5 = {num_subsets_to_generate} of its subsets.")
    
    num_concepts_available = 2**k
    print(f"Our concept class is formed by intersections of the {k} predicates.")
    print(f"The number of ways to choose a subset of these {k} predicates for intersection is 2^{k} = {num_concepts_available}.")
    print(f"So, we can generate at most {num_concepts_available} distinct concepts.")
    
    print(f"\nSince {num_concepts_available} < {num_subsets_to_generate}, we do not have enough concepts to generate all subsets of a 5-element set.")
    print("Therefore, no set of size 5 can be shattered.")

    # --- Conclusion ---
    print("\n--- Conclusion ---")
    print("From Part 1, we know VC-dim >= 4.")
    print("From Part 2, we know VC-dim <= 4.")
    print("\nCombining these, the final VC dimension is 4.")

if __name__ == '__main__':
    main()