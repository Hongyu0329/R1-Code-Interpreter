# The problem asks for the maximum possible number of digits in an integer N
# that satisfies a specific condition, using at most 5 distinct digits.

# The condition is that every subsequence of consecutive digits (substring)
# must contain at least one digit that appears exactly once.

# Let f(k) be the maximum length of a valid sequence using k distinct digits.
# Based on analysis of small k and a known result from combinatorics, the
# formula for the maximum length is f(k) = 2^k - 1.

# For example:
# f(1) = 2**1 - 1 = 1. A valid sequence is "1".
# f(2) = 2**2 - 1 = 3. A valid sequence is "121".
# f(3) = 2**3 - 1 = 7. A valid sequence is "1213121".

# This pattern is generated by the recursive construction S_k = S_{k-1} + str(k) + S_{k-1}.
# The length of this sequence is 2 * length(S_{k-1}) + 1, which leads to the
# formula 2^k - 1.

# The problem allows using at most 5 distinct digits. To maximize the length of N,
# we should use the maximum number of distinct digits allowed, which is k=5.

# We calculate the maximum length for k=5.
k = 5
power_val = 2**k
max_len = power_val - 1

print(f"To find the maximum possible number of digits, we use the maximum number of distinct digits allowed, k = {k}.")
print("The maximum length is given by the formula: 2^k - 1.")
print(f"For k = {k}, the calculation is:")
print(f"2^{k} - 1 = {power_val} - 1 = {max_len}")