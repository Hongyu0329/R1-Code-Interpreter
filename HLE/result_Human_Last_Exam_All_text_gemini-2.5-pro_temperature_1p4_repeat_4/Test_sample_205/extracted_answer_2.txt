171[/**
 * Program to calculate 100! on the Wuxing computer with minimal memory.
 *
 * This implementation uses base-100 arithmetic to be efficient. The large
 * integer result is stored in an array of 'short' (2D) types, where
 * each element represents two decimal digits.
 *
 * Variable Memory Analysis (in Decimal Digits 'D'):
 * - result:  Stores 158 digits. 79 elements * 2D/element = 158D
 * - i:       Loop counter 2..100. 'char' (0-999) needed.   =   3D
 * - j:       Inner loop counter. Max 78. 'short' (0-99).   =   2D
 * - size:    Number of active elements. Max 79. 'short'.  =   2D
 * - product: Stores intermediate product. Max 9999. 'unsigned int'. = 4D
 * - carry:   Stores carry-over. Max 99. 'short'.          =   2D
 * --------------------------------------------------------------------
 * Total Memory Used for Variables: 158 + 3 + 2 + 2 + 4 + 2 = 171D
 */
void main() {
    short result[79];
    char i;
    short j;
    short size;
    unsigned int product;
    short carry;

    // Initialize result to 1.
    size = 1;
    result[0] = 1;

    // Loop from i = 2 to 100 to calculate 100!
    for (i = 2; i <= 100; i++) {
        carry = 0;
        for (j = 0; j < size; j++) {
            // Multiply the current 2-digit chunk by i and add carry.
            product = (unsigned int)result[j] * i + carry;
            
            // The new 2-digit chunk is the product modulo 100.
            result[j] = product % 100;

            // The new carry is the product divided by 100.
            carry = product / 100;
        }

        // If there's a remaining carry, append it as new chunks.
        while (carry > 0) {
            result[size] = carry % 100;
            size++;
            carry = carry / 100;
        }
    }

    // Print the final result stored in the array.
    printf("100! = ");

    // Print the most significant chunk first (it does not need zero-padding).
    // %i is used for int; we assume it works for the 'short' type.
    j = size - 1;
    printf("%i", result[j]);

    // Print the rest of the chunks. Each must be represented by two digits.
    while (j > 0) {
        j--;
        // Decompose result[j] into two digits and print them.
        // This ensures values like 7 are printed as "07".
        printf("%d%d", result[j] / 10, result[j] % 10);
    }
    printf("\n");
}
]