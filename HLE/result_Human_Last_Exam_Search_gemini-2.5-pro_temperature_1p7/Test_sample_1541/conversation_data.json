{
  "question": "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>.",
  "response_list": [
    "The most memory-efficient approach to solve this problem is to avoid storing the entire input string in memory. We can read the input character by character and use a counting sort algorithm. Since the numbers are limited to 1, 2, 3, and 4, we only need an array of four counters. After counting the occurrences of each number, we can then print the sorted sum directly.\n\nTo minimize memory, we choose the smallest standard C data types that can safely hold the required range of values for each variable.\n\nHere is the most memory-efficient C program for this task:\n\n```c\n#include <stdio.h> // Required for getchar, putchar, and the EOF constant.\n\n/**\n * This program solves the \"Xenia and the Sum\" problem with maximum memory efficiency.\n * It reads the input sum character by character, avoiding a large input buffer.\n * It uses a counting sort method by maintaining a small array of counters\n * for the numbers 1, 2, 3, and 4.\n * Finally, it constructs and prints the sorted sum.\n *\n * The variables are declared using the smallest possible standard data types\n * to minimize stack memory usage, as requested.\n */\nint main() {\n    /*\n     * == Variable Declaration and Memory Calculation ==\n     * The total memory usage 'm' is the sum of the sizes of all variables declared.\n     * We assume a standard environment where:\n     *   - sizeof(char) = 1 byte\n     *   - sizeof(unsigned char) = 1 byte\n     *   - sizeof(unsigned short) = 2 bytes\n     *   - sizeof(int) = 4 bytes\n     */\n\n    // 1. 'counts' array: Stores the frequency of numbers 1, 2, 3, and 4.\n    //    The input string is at most 1000 chars, so the max count for any\n    //    number is about 500. `unsigned short` (range 0-65535) is sufficient.\n    //    Memory: 4 * sizeof(unsigned short) = 4 * 2 = 8 bytes.\n    unsigned short counts[4] = {0, 0, 0, 0};\n\n    // 2. 'c' variable: Stores the return value of getchar().\n    //    getchar() returns an `int` to accommodate the special EOF value\n    //    in addition to all possible character values. This is required for correctness.\n    //    Memory: sizeof(int) = 4 bytes.\n    int c;\n\n    // 3. 'first' flag: Used to correctly print the '+' separator.\n    //    It's a boolean flag (1 or 0). The smallest addressable type, `char`, is ideal.\n    //    Memory: sizeof(char) = 1 byte.\n    char first = 1;\n\n    // -- Program Logic --\n\n    // Read the sum character by character until a newline or end-of-file.\n    while ((c = getchar()) != '\\n' && c != EOF) {\n        // If the character is a digit, increment the corresponding counter.\n        // '1' corresponds to index 0, '2' to 1, and so on.\n        if (c >= '1' && c <= '4') {\n            counts[c - '1']++;\n        }\n    }\n\n    // Print the sorted sum using the counters.\n    // Loop variables 'i' and 'j' are declared in C99 style. Their memory is calculated below.\n    // 4. Loop counter 'i': Iterates 0..3. `unsigned char` (0-255) is sufficient.\n    //    Memory: sizeof(unsigned char) = 1 byte.\n    for (unsigned char i = 0; i < 4; i++) {\n        // 5. Loop counter 'j': Iterates up to the number of occurrences (max ~500).\n        //    `unsigned short` (0-65535) is sufficient.\n        //    Memory: sizeof(unsigned short) = 2 bytes.\n        for (unsigned short j = 0; j < counts[i]; j++) {\n            // Do not print '+' before the very first number.\n            if (!first) {\n                putchar('+');\n            }\n            // Print the digit by converting the index back to a character.\n            putchar(i + '1');\n            // After the first number is printed, clear the flag.\n            first = 0;\n        }\n    }\n\n    // Print a final newline character to complete the output.\n    putchar('\\n');\n\n    return 0;\n}\n```\n\nThe total memory `m` used for the variables in this problem is the sum of the memory consumed by each variable:\n*   `counts` array: 8 bytes\n*   `c` variable: 4 bytes\n*   `first` flag: 1 byte\n*   `i` loop counter: 1 byte\n*   `j` loop counter: 2 bytes\n\nm = 8 + 4 + 1 + 1 + 2 = 16 bytes.\n\n<<<16>>>"
  ],
  "user_prompt_list": [
    "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>."
  ],
  "system_message": ""
}