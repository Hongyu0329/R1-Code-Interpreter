import math

def count_power_subgroups_in_sd(group_order):
    """
    Calculates the number of cyclic ("power") subgroups in the semidihedral group of a given order.
    The order must be a power of 2, specifically 2^n for n >= 4.
    """
    if group_order < 16 or (group_order & (group_order - 1)) != 0:
        print(f"The semidihedral group SD_{group_order} is typically defined for orders 2^n where n >= 4.")
        return

    n = int(math.log2(group_order))

    # 1. Number of cyclic subgroups within the cyclic subgroup <r> of order 2^(n-1).
    # A cyclic group C_m has tau(m) subgroups, where tau is the number of divisors function.
    # For m = 2^(n-1), tau(m) = (n-1) + 1 = n.
    subgroups_r = n
    
    # 2. Number of cyclic subgroups generated by elements of the form sr^i where i is even.
    # There are 2^(n-2) such elements, each of order 2, generating a distinct subgroup.
    subgroups_sr_even = 2**(n-2)

    # 3. Number of cyclic subgroups generated by elements of the form sr^i where i is odd.
    # There are 2^(n-2) such elements, each of order 4.
    # A cyclic group of order 4 has phi(4) = 2 generators.
    # So these elements form 2^(n-2) / 2 = 2^(n-3) distinct subgroups.
    subgroups_sr_odd = 2**(n-3)
    
    # Total number of subgroups
    total_subgroups = subgroups_r + subgroups_sr_even + subgroups_sr_odd
    
    print(f"The semidihedral group of size {group_order} is SD(2^{n}).")
    print("Assuming 'power subgroups' means 'cyclic subgroups':")
    print(f"1. Number of cyclic subgroups in the maximal cyclic subgroup <r>: {subgroups_r}")
    print(f"2. Number of cyclic subgroups generated by elements sr^i with even i: {subgroups_sr_even}")
    print(f"3. Number of cyclic subgroups generated by elements sr^i with odd i: {subgroups_sr_odd}")
    print(f"Total number of power subgroups = {subgroups_r} + {subgroups_sr_even} + {subgroups_sr_odd} = {total_subgroups}")

# Size of the semidihedral group
group_size = 512
count_power_subgroups_in_sd(group_size)
