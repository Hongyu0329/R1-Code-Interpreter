import sympy

def calculate_magnetic_field_expression():
    """
    Calculates and prints the symbolic expression for the magnetic field
    around an infinite stack of superconducting strips.
    """
    # Define all physical quantities as symbolic variables
    # H_a: Applied magnetic field
    # Jc: Critical current density
    # d: Strip thickness
    # w: Strip half-width
    # D: Spacing between strips
    # x, z: Coordinates
    H_a, Jc, d, w, D, x, z = sympy.symbols('H_a Jc d w D x z', real=True, positive=True)
    pi = sympy.pi
    I = sympy.I # Represents the imaginary unit

    # H0 is a characteristic field for the strip
    H0 = Jc * d / pi

    # The position of the flux front 'a' is determined by the applied field Ha
    # a = w * tanh(H_a / (2 * H0))
    # We can simplify the term w**2 - a**2 that appears in the expression
    # w**2 - a**2 = w**2 * (1 - tanh**2(H_a/(2*H0))) = w**2 / cosh**2(H_a/(2*H0))
    cosh_term = sympy.cosh(H_a / (2 * H0))
    w2_minus_a2 = w**2 / cosh_term**2
    
    # The complex coordinate is zeta = x + i*z
    zeta = x + I * z

    # The complex magnetic field H = Hz + i*Hx is given by the approximation
    # for widely spaced strips (D >> w). This is the field generated by the
    # induced currents in the strips.
    # The numerator is related to the magnetic dipole moment of the strips.
    numerator = Jc * d * pi * w2_minus_a2
    
    # The denominator describes the spatial dependence of the field.
    denominator = 2 * D**2 * sympy.sin(pi * zeta / D)**2
    
    H_induced_complex = numerator / denominator

    # The total magnetic field is the sum of the applied field and the induced field.
    H_total_complex = H_a + H_induced_complex
    
    # Use sympy to separate the real (Hz) and imaginary (Hx) parts of the total field.
    # sympy.re() extracts the real part.
    # sympy.im() extracts the imaginary part.
    H_z = sympy.re(H_total_complex)
    H_x = sympy.im(H_total_complex)

    # Print the final expressions for the magnetic field components
    print("The derived expression for the magnetic field H = (Hx, 0, Hz) is given by its components.")
    print("\n" + "="*50)
    print("Component H_z (in the direction of the applied field):")
    print("="*50)
    sympy.pprint(H_z, use_unicode=True)

    print("\n" + "="*50)
    print("Component H_x (perpendicular to the strip width):")
    print("="*50)
    sympy.pprint(H_x, use_unicode=True)

if __name__ == '__main__':
    calculate_magnetic_field_expression()