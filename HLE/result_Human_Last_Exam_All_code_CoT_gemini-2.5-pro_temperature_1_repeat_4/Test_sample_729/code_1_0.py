import math

def solve_power_subgroups():
    """
    Calculates the number of power subgroups in the generalized quaternion group of size 128.
    """
    # The size of the generalized quaternion group.
    group_size = 128

    # A generalized quaternion group of size N must have N be a power of 2, N = 2^k, for k >= 3.
    # We find the exponent k.
    if group_size <= 4 or (group_size & (group_size - 1)) != 0:
        print(f"A generalized quaternion group of size {group_size} is not standard.")
        print("Standard generalized quaternion groups have size 2^k for k >= 3.")
        return

    k = int(math.log2(group_size))

    # The power subgroups G^j = {g^j | g in G} are analyzed based on the parity of the exponent j.
    
    # Case 1: j is an odd integer.
    # For any odd j, the mapping g -> g^j is a permutation of the group elements.
    # Thus, G^j = G. This gives one unique power subgroup.
    num_from_odd_exponents = 1

    # Case 2: j is an even integer.
    # For G = Q_{2^k}, when j is even, the resulting subgroup G^j is always one of the k-1 distinct
    # proper cyclic subgroups generated by the element 'x' in the group's presentation.
    # These subgroups are <x^2>, <x^4>, ..., <x^(2^(k-1))>, where the last one is the trivial subgroup {1}.
    num_from_even_exponents = k - 1

    # The total number of power subgroups is the sum of the counts from both cases.
    total_power_subgroups = num_from_odd_exponents + num_from_even_exponents

    print(f"For the generalized quaternion group G of size {group_size} = 2^{k}:")
    print("The number of power subgroups is found by considering exponents.")
    print("\n1. For any odd exponent j, the power subgroup G^j is G itself.")
    print(f"   This gives {num_from_odd_exponents} unique subgroup.")
    
    print("\n2. For any even exponent j, the power subgroup G^j is a proper cyclic subgroup.")
    print(f"   For k={k}, there are {k}-1 = {num_from_even_exponents} such distinct subgroups.")

    print("\nThe total number of power subgroups is the sum of these two counts.")
    print("The final equation is:")
    print(f"{num_from_odd_exponents} + {num_from_even_exponents} = {total_power_subgroups}")
    
solve_power_subgroups()