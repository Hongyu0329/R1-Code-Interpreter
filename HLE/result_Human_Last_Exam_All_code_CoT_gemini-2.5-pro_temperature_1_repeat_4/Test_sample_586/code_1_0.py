import re

def find_best_sgrna():
    """
    This script analyzes a list of potential sgRNA sequences to find the most suitable
    one for targeting the second exon of a given gene using spCas9.
    """
    # The full DNA sequence provided by the user
    full_sequence = "ATGTGTGCCTGCGGGATACTTTTGACTTTTACTTTGCTTTTGCATTTTCTTGGTGTTCACTCAATGAATCCTCTGTTTCCAAGCGCATCCAGGGGCATGAAAGTGTCTAAGTCTGTTCCTGCTGAGGGCAACAGGAGAGCAAAATACGGCAAGAATGTGCTGTCAGCATCACTGTTATCCGGAGACATACAGTCCAGAAGGGCGATCAAGGATGCGATTGAACCTCACGATTACATGATTTCCATATACAAGACCTTTTCAGCGGCTGAAAAACTGGGACTGAACGCGAGTTTTTTCCGCTCGTCTAAAGCAGCAAACACCATCACGAGCTTTGTGGACGAGGGTCAAG^GTTAGTTATTTCTACTTATACAAGCAACAGTGATTTCAAACGCACACGTACTGATTCTATATTGGTACTCACAGGGAAAAAAAAAAAAAAAACATTTGTATACAATTCAAACAACTCTTAAAGGAATACAGTCAAATGTGTCAGTGAACAGATGGAAACAAAGCATTTTGAATATTAGGCCTATATCATCTATGATACTGCGGAAAATCTTCAAGAAATCTTTTTCCCCTAATAGTAAAAATAATGACAACAATATATGTATAACATTATACACTTCTGTTTACAATCTTGCATAAAATAAGTTGTGTTTGCATCAAAGTGTGTATACATGCACTGTCCATTTCAAATATTTTTTATTGGAATGTGTAGGAATTTTCACGATGTAGGCAGGTTATTATCACTATAAAGTGCCTTAGATGTCCCACAAGATTGAATCAGTCCCATATGAGCATAATGCGAAATTGATGTTTTAATATGATTGGTTAAACTTGTACACACATGCAGGTAGAATTATGAGTGTTTTGAAACATGTTTTTGCCAATTATTGCCATAGTCTTTTATTGAATGGATGTGATTTTGCCATGTCCCACACACTGCACAGCCAAGTTCAGTAAGTCTAAAAAGTAGCTAAATTAGATAAATTTTTTTTAAATGTTTAAGTATTCTTTCTATTCTTACAGTTATTTTGAAAACTAAATCATTTTTATAACTTTTATTTTTTTATTCTTTTATAATATTATTAATCATTTTGCACGAGTCTTTGAGTTTGCTGTCCACCCTGTCATGATGTAGTAAATCCCCTTTAAGAAACCCTCTGATGTACTCATTGGCATCCCCATGCCTATTTTGCTTTTCTTCAGAGGAGGTTAAAAAAACTGATGTGCACACATTAAATATCTACATATATGTTTCCTATTTTTCATCATATTGTGTTTGAAACCGAATGTGGTCAAGCTTAACATGTCCACCCTGTCATAGTAAAATATTAATTAATATAAAAAATTCGGAAATCAAAGATAGCTTTTAAACTGTATACAAAGAGCTTAAATAAGGAAACACTTTACCAGCTGCAGGTTCAACCTGTGTTAAATAAATGCTATCTTTAGCCAAAAATGTCCTCCTTGTTATTGTCCACCCTTTCACAAATCCTTCCTTGGGTGGACATATGCATCGTTATTGACACTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTTTTGTTAATCAGCTAATGTTTTATTATGGTACATCACATACATACTACACCAGTAGATGCAATACATAAGTGGACAATACAAATCTTTTGGCAATATTTATCTCAGTCTATATAAAGAATATCCTTTTAAAGTCCATATAAGGCAGCTCATTGACTGTTTGAAATTAAAATACATTATTTATCCTATTCTGGAAAAGAAAAAATATGATACATTTGTGCGTTGATGGATTTGAAACCACACTGGACTGAACTAATTTGAACTTTTAATTTCAATTCACTACAACTTCTATGTTAAGCTGCTTAGACACAATTTACATTACAGGTGTCAAATCCAGTTTCTTAAGAGCCACAGCTCTGCACAGTTTAGGGTTAACCCTAATTAAACACACCTGATCAAACTAATTGAGTCCTTCAGGCTTGTTTGATACCTACAGGTAGGTTTGTTAAAGCAAGGTTGGAACTAAATTGTGCAGAGCTGCGGCCCTTCAGGAACTAGATTTGACACCTAATTTACATTATGGAAACGCTATAGAAATAAAGATAAATTGAATTGAATAGATTTTTCTCCTCCAAAACACTATATATAAAAATACTAATTAGCAAATGCTAGTATTAGAAAAAAAAATTAGAACCTAGCTTTAAAAACTTTAGCATAATGAAAGAAACAGAGACACAAGACAGAAATAAATTTCAACATATGTCACCTTAATTAGVTAAAAACGAGTTCTCGATCTGCACATGCCATAACAGATATTGTAAATTTTGTGGATGCAGATCTAGTGTCAACAAGCATCTGTTCTCTTTGTTTCAG^ATGACCATTTGAACTCTCCACTTTGGAGACAGAAATATTTATTCGACGTATCAACGCTTTCTGAAAATGTGGAGATCCTGGGTGCCGAACTGAGGATTTACACAAAGATCTCCGGAAGCTTCCGCGCATCTGAAACCGGTCCTGTGGAAATACAGCTTCTCTCCTGCCAGTCGCACACTGTCCTTGATTCACAAACTTTGGATCTGGAGGATGCACATAAACCAAAATGGGAAGTTTTCGACGTCTGGGAGATTTTTAAGGAACGTCAGCACCACTCTCATGGCACCCGCTTCTGTTTAGAGCTCAGGGCCACACTGGATAATCCAGAGAGAGAAATTGATTTGCAATATCTTGGATTTCACAGACATGGCCGCCCGCAACTGAAGAAAGCCATACTGGTTGTTTTCACAAGGTCAAAAAAGAGGCAAAGTCTTTTTTATGAAAAAAGAGAGAAGATCAAGCTATGGGGTCTGGATAGTATTGGTAAGGAAAGAAGATCCCACTCGAAAACCCGCCGGAGCAGACGGACTGCTCTACCCAATCGCCATGGCAAGAGACATGGTAAAAAGTCAAAATCTAGATGCAGCAAAAAGCCACTGCATGTCAATTTCAGAGAGCTGGGTTGGGACGATTGGGTCATCGCTCCATTAGATTATGAGGCTTATCACTGTGAGGGCATGTGTGACTTTCCCCTCCGATCTCACCTGGAACCAACCAATCATGCCATCATACAAACTCTAATGAACTCAATGAACCCCAGCAACATGCCACCCAGCTGTTGCGTCCCCTCCAAACTCAGTCCCATTAGCATCTTGTACATTGACGCAGGAAATAATGTTGTGTACAAGCAGTATGAAGACATGGTAGTGGAGTCCTGCGGCTGCAGATGA"

    # Split the sequence by '^' to isolate exon 1, intron, and exon 2
    parts = full_sequence.split('^')
    exon1 = parts[0]
    intron = parts[1]
    exon2 = parts[2]

    candidates_raw = [
        ('A', "AGCGGTTTACTGAGACCCGG(TGG)"), ('B', "TCCGGCGGGTTTTCGAGTGGG"),
        ('C', "TTCATGCCCCTGGATGCGCT(TGG)"), ('D', "CAGGACCGGTTTCAGATGCG(CGG)"),
        ('E', "GCATCTGAAACCGGTCCTG(TGG)"), ('F', "GGAAGCAATCCTCCGAACGT(TGG)"),
        ('G', "ACGTTGCGAGGACAGAGTCA(AGG)"), ('H', "CCCTTTCACAAATCCTTCCT(TGG)"),
        ('I', "TTCACCCGCACCTTGAACGG(AGG)"), ('J', "CTTTCTTTCTTTCTTTCTTTC(TTT)"),
        ('K', "CTGCTCTACCCAATCGCCA(TGG)"), ('L', "TGCCTG(CGG)"),
        ('M', "TGCAAAGTAGATCGAGATGG(AGG)"), ('N', "ACAGTCCAGAAGGGCGATCA(AGG)"),
        ('O', "ATG(ACC)"),
    ]

    print("--- Analysis of sgRNA Candidates ---\n")
    valid_candidates = []

    for label, raw_string in candidates_raw:
        match = re.match(r"([A-Z]+)\(([A-Z]+)\)", raw_string)
        if match:
            target, pam = match.group(1), match.group(2)
        else: # Handle formats without parentheses
            target, pam = raw_string[:-3], raw_string[-3:]

        full_site = target + pam
        location_index = exon2.find(full_site)

        if location_index != -1:
            is_spcas9_pam = pam.endswith('GG')
            is_good_length = 17 <= len(target) <= 23
            gc_content = (target.count('G') + target.count('C')) / len(target) * 100
            
            print(f"Candidate {label}: Found in Exon 2 at position {location_index}.")
            print(f"  Sequence: {target}")
            print(f"  PAM: {pam} (Valid NGG: {'Yes' if is_spcas9_pam else 'No'})")
            print(f"  GC Content: {gc_content:.1f}%")

            if is_spcas9_pam and is_good_length:
                valid_candidates.append({
                    "label": label, "index": location_index, "gc": gc_content, "target": target
                })
            print("-" * 20)

    print("\n--- Conclusion ---")
    if not valid_candidates:
        print("No suitable candidates were found in Exon 2 from the provided list.")
    else:
        # Sort candidates by their position in the exon (earlier is better)
        valid_candidates.sort(key=lambda x: x['index'])
        best_candidate = valid_candidates[0]

        print("Of the candidates found in Exon 2, we should choose the one located earliest in the sequence.")
        print("This maximizes the potential for a frameshift mutation to disable the gene.")
        print(f"\nComparing the valid options:")
        for cand in valid_candidates:
             print(f"- Candidate {cand['label']} is at index {cand['index']}.")

        print(f"\nThe best choice is Candidate {best_candidate['label']}, as it appears earliest in the exon.")
        print(f"Its GC content of {best_candidate['gc']:.1f}% is also within the ideal range.")
        print(f"The target sequence is {best_candidate['target']}.")
        
    print(f"<<<E>>>")

find_best_sgrna()