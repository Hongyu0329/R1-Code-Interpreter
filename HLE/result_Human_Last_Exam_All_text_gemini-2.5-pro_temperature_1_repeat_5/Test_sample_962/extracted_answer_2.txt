A threshold signature scheme based on the **Schnorr signature algorithm** provides the necessary linearity for an efficient multi-party protocol. The design involves three main stages:

1.  **Key Generation:** A one-time **Distributed Key Generation (DKG)** protocol (e.g., Pedersen's DKG) is used by the `n` parties to create secret shares `xᵢ` of a private key `x` and a corresponding single public key `P`. This is done without a trusted third party and without ever reconstructing the full private key `x`.

2.  **Pre-computation (Offline):** To enable a two-round signing protocol, each party `i` pre-generates a list of secret nonce pairs `(dᵢ, eᵢ)` and publishes their public commitments `(Dᵢ, Eᵢ)`. This offloads the nonce generation from the time-sensitive signing phase.

3.  **Two-Round Signing Protocol:**
    *   **Round 1 (Commitment):** For a given message `m`, a group of `t` participating parties is chosen. Each participant `i` selects an unused nonce commitment pair `(Dᵢ, Eᵢ)` and broadcasts it to the other `t-1` participants.
    *   **Round 2 (Signing):** After receiving all commitments, each participant `i`:
        a. Calculates a group nonce commitment `R` by combining all `t` received public nonces using a binding factor derived from the message and all commitments. This binding is crucial for preventing certain advanced attacks.
        b. Computes the Schnorr challenge `e = H(R, P, m)`.
        c. Calculates their partial signature `sᵢ = kᵢ + e * λᵢ * xᵢ`, where `kᵢ` is their secret nonce contribution (derived from `dᵢ` and `eᵢ`) and `λᵢ` is their public Lagrange coefficient.
        d. Sends the partial signature `sᵢ` to a designated signature aggregator.

Finally, an untrusted aggregator collects the `t` partial signatures and computes the final signature `s =`