{
  "question": "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>.",
  "response_list": [
    "To solve this problem in the most memory-efficient way, we should avoid storing the entire input string in memory. A better approach is to read the input character by character and count the occurrences of each number (1, 2, 3, and 4). This can be done using a small counting array.\n\nThe overall strategy is as follows:\n1.  **Character-by-Character Input**: Instead of using a large character array (e.g., `char s[1001]`), we read the input one character at a time using `getchar()`. This eliminates the need for a 1001-byte buffer.\n2.  **Counting Sort**: Since the numbers are limited to 1, 2, 3, and 4, we can use a counting sort algorithm. We'll use a small array to store the frequency of each number.\n3.  **Optimized Data Types**: To minimize memory, we will use the smallest possible data types for our variables. The maximum number of any digit is 501 (for a string like \"1+1+...+1\" of length 999). A `short int`, which can typically store values up to 32,767, is sufficient for these counts, and it uses less memory than a standard `int`.\n4.  **Direct Output**: After counting, the sorted sum is printed directly to the standard output without constructing an intermediate output string. A flag variable is used to correctly place the `+` characters between the numbers.\n\n### Memory-Efficient C Program\n\nHere is the C program implementing this memory-efficient approach.\n\n```c\n#include <stdio.h>\n\n/**\n * Solves the Xenia and the Sum problem in a memory-efficient way.\n *\n * This function reads a sum expression (e.g., \"3+2+1+1\") from stdin,\n * sorts the numbers in non-decreasing order, and prints the new sum.\n *\n * It processes the input character by character to avoid storing the\n * entire string in a large buffer. It uses `short int` for counters\n * to minimize memory usage.\n */\nvoid solve() {\n    // counts[0] for '1', counts[1] for '2', etc.\n    // Using `short` (2 bytes) instead of `int` (4 bytes) for memory efficiency.\n    // Max count for any number is 501, which fits in a `short`.\n    short counts[4] = {0}; \n    \n    // Variable to read each character of the input.\n    char c;\n    \n    // Read input character by character until newline or EOF.\n    while ((c = getchar()) != '\\n' && c != EOF) {\n        // We only care about the digits, which represent the numbers.\n        if (c >= '1' && c <= '4') {\n            // Increment the count for the corresponding number.\n            // '1'-'1' = 0, '2'-'1' = 1, etc.\n            counts[c - '1']++;\n        }\n    }\n\n    // Flag to handle printing the '+' separator. \n    // It ensures '+' is not printed before the first number.\n    short first = 1;\n    \n    // Iterate through the numbers 1 to 4 (represented by index i = 0 to 3).\n    for (short i = 0; i < 4; i++) {\n        // Print the current number `counts[i]` times.\n        for (short j = 0; j < counts[i]; j++) {\n            if (!first) {\n                putchar('+');\n            }\n            // Convert index back to character ('0' -> '1', '1' -> '2', etc.)\n            putchar(i + '1');\n            first = 0;\n        }\n    }\n    putchar('\\n');\n}\n\nint main() {\n    solve();\n    return 0;\n}\n```\n\n### Memory Calculation (m)\n\nThe problem asks for the total memory `m` in bytes used for the variables in this program. We calculate this by summing the sizes of all variables declared in the `solve` function. We assume a standard environment where `sizeof(short)` is 2 bytes and `sizeof(char)` is 1 byte.\n\n*   `short counts[4]`: An array of 4 `short int`.\n    *   Memory = `4 * sizeof(short)` = `4 * 2` = 8 bytes.\n*   `char c`: A single character variable.\n    *   Memory = `1 * sizeof(char)` = 1 byte.\n*   `short first`: A flag variable of type `short int`.\n    *   Memory = `1 * sizeof(short)` = 2 bytes.\n*   `short i`: The loop counter for the outer loop.\n    *   Memory = `1 * sizeof(short)` = 2 bytes.\n*   `short j`: The loop counter for the inner loop.\n    *   Memory = `1 * sizeof(short)` = 2 bytes.\n\nThe total memory `m` is the sum of the memory used by these variables:\n\n`m = 8 (counts) + 1 (c) + 2 (first) + 2 (i) + 2 (j)`\n`m = 15` bytes\n\n<<<15>>>"
  ],
  "user_prompt_list": [
    "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>."
  ],
  "system_message": ""
}