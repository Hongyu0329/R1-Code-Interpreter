import numpy as np

def solve_log_blowup_dimension():
    """
    Calculates the dimension of a log blowup in a toric setting.
    """
    # Step 1: Define the log structure and the corresponding geometric space P.
    # The log structure is N^3. In toric geometry, this corresponds to the cone in R^3
    # generated by the standard basis vectors.
    e1 = np.array([1, 0, 0])
    e2 = np.array([0, 1, 0])
    e3 = np.array([0, 0, 1])

    # The space P is the affine toric variety associated with this cone.
    # Its dimension is the dimension of the vector space spanned by the cone's generators.
    initial_generators = np.array([e1, e2, e3])
    initial_dimension = np.linalg.matrix_rank(initial_generators)

    print("--- Problem Setup ---")
    print(f"The log point P has a log structure corresponding to a cone generated by:")
    print(f"e1 = {e1}, e2 = {e2}, e3 = {e3}")
    print(f"The dimension of the original space is the rank of the matrix of these vectors, which is {initial_dimension}.\n")

    # Step 2: Define the log ideal I.
    # The ideal I is generated by (1,0,0) and (0,1,0), which are vectors e1 and e2.
    ideal_generators = [e1, e2]
    print("--- The Blowup ---")
    print(f"The log ideal I is generated by the vectors e1 and e2.")

    # Step 3: Perform the log blowup.
    # This corresponds to a star subdivision of the initial cone. A new ray is introduced,
    # generated by the sum of the ideal's generators.
    new_vector = sum(ideal_generators)
    print(f"The log blowup introduces a new ray generated by the vector v = e1 + e2 = {new_vector}.")

    # The original cone cone(e1, e2, e3) is subdivided into new maximal cones.
    # The new maximal cones in the fan are cone(v, e1, e3) and cone(v, e2, e3).
    # The blowup space is covered by affine charts associated with these new cones.
    print("The original cone is subdivided into two new maximal cones, which define the charts of the blowup.\n")

    # Step 4: Calculate the dimension of the new charts.
    # The dimension of each chart is the rank of the matrix of its cone's generators.
    print("--- Dimension Calculation ---")
    
    # Chart 1
    cone1_generators = np.array([new_vector, e1, e3])
    dim_chart1 = np.linalg.matrix_rank(cone1_generators)
    print("Chart 1 is associated with the cone generated by v, e1, and e3.")
    # print(f"Generator matrix for Chart 1:\n{cone1_generators}") #This is a bit verbose, so I'll comment out.
    print(f"The dimension of Chart 1 is rank({[tuple(row) for row in cone1_generators]}) = {dim_chart1}")


    # Chart 2
    cone2_generators = np.array([new_vector, e2, e3])
    dim_chart2 = np.linalg.matrix_rank(cone2_generators)
    print("\nChart 2 is associated with the cone generated by v, e2, and e3.")
    # print(f"Generator matrix for Chart 2:\n{cone2_generators}") #This is a bit verbose, so I'll comment out.
    print(f"The dimension of Chart 2 is rank({[tuple(row) for row in cone2_generators]}) = {dim_chart2}")

    # Step 5: Determine the final dimension.
    # The dimension of the blowup is the maximum dimension of its charts.
    dimension_of_blowup = max(dim_chart1, dim_chart2)
    print("\n--- Final Answer ---")
    print("The dimension of the blowup is the maximum dimension of its charts.")
    print(f"Dimension = max({dim_chart1}, {dim_chart2}) = {dimension_of_blowup}")

if __name__ == '__main__':
    solve_log_blowup_dimension()
<<<3>>>