The design for a tightly secure t-out-of-n threshold signature scheme with a two-round signing protocol can be constructed as follows:

**1. Foundational Choices:**
*   **Signature Algorithm:** Use the Schnorr signature algorithm due to its algebraic simplicity (`s = k + e*x`), which is ideal for threshold protocols.
*   **Cryptographic Primitives:** All operations are performed in a prime-order elliptic curve group to ensure efficiency and security against known attacks.
*   **Security Model:** The design targets unforgeability against a malicious adversary corrupting up to `t-1` parties, with a security proof that is "tight" (i.e., has a small security loss) in the Algebraic Group Model (AGM) and Random Oracle Model (ROM).

**2. Phase 1: Distributed Key Generation (DKG):**
A robust, verifiable, and non-interactive DKG protocol, such as the Pedersen-based DKG, is executed as a one-time setup:
*   Each of the `n` parties generates a secret polynomial of degree `t-1` and shares it verifiably with others using Feldman's Verifiable Secret Sharing (VSS).
*   Each party combines the received shares to compute its own long-lived secret key share `x_i` and the corresponding public verification key `Y_i = g^{x_i}`.
*   The single group public key `Y` is computed by combining the public commitments from all parties. `Y` is public, while the corresponding master secret key `x` remains unknown to any single party.
*   Each party must also prove knowledge of its secret `x_i`, ensuring only validly generated keys are used.

**3. Phase 2: Two-Round Signing Protocol (FROST-style):**
For any `t` parties wishing to sign a message `M`:

*   **(Optional Pre-computation):** Each party pre-generates pairs of secret nonces and their public commitments, `(d, e)` and `(D, E) = (g^d, g^e)`, which can be used for multiple signing operations. This makes the online phase faster.

*   **Round 1: Commitment**
    1.  Each of the `t` signing parties `P_i` selects a fresh, unused nonce commitment pair `(D_i, E_i)`.
    2.  Each party `P_i` broadcasts this `(D_i, E_i)` pair to all other signers.

*   **Round 2: Response**
    1.  Upon receiving commitments from all `t-1` other parties, each party `P_i` calculates a *binding factor* for each participant `j`: `ρ_j = H(M, j, {(D_k, E_k)})`, where `H` is a cryptographic hash function. This factor binds each participant's contribution to the specific message and signing group, a critical step for tight security.
    2.  Each party calculates the group's public nonce `R = ∏(D_j * E_j^{ρ_j})` and the challenge `e = H(R, Y, M)`.
    3.  Each party `P_i` calculates its partial signature: `s_i = d_i + (e_i * ρ_i) + (e * L_i * x_i)`, where `d_i, e_i` are the secret nonces corresponding to the public commitment `(D_i, E_i)`, and `L_i` is the Lagrange coefficient for that party.
    4.  Each party `P_i` broadcasts its partial signature `s_i`.