import numpy as np
from scipy.stats import mannwhitneyu

def find_minimum_sample_size():
    """
    This function calculates the minimum number of observations per group needed 
    to achieve statistical significance for a two-sided Mann-Whitney U test, 
    after applying Bonferroni correction.
    """
    
    # --- Step 1: Define Test Parameters and Bonferroni Correction ---
    original_alpha = 0.05
    num_tests = 5
    corrected_alpha = original_alpha / num_tests

    print("--- Bonferroni Correction ---")
    print(f"The original alpha level is: {original_alpha}")
    print(f"The number of statistical tests is: {num_tests}")
    print("The equation for the corrected alpha is: Original Alpha / Number of Tests")
    print(f"The corrected alpha for significance is: {original_alpha} / {num_tests} = {corrected_alpha}")
    print("-" * 35)

    # --- Step 2: Define Data Patterns ---
    g1_pattern = np.array([1, 2, 3, 4, 5])
    g2_pattern = np.array([3, 3, 3, 2, 2])
    
    # --- Step 3: Iteratively Search for Minimum Sample Size (n) ---
    # We start from n=3, as the test requires a minimum number of observations.
    n = 3
    max_iterations = 1000 # A safeguard to prevent an infinite loop
    
    print(f"Searching for the minimum number of observations (n) per group...")
    print(f"The condition to meet is: p-value < {corrected_alpha}\n")

    while n <= max_iterations:
        # Generate the data for the current n by repeating the patterns
        # Use ceiling division to determine how many times to repeat the pattern
        num_repeats = (n + len(g1_pattern) - 1) // len(g1_pattern)
        
        group1 = np.tile(g1_pattern, num_repeats)[:n]
        group2 = np.tile(g2_pattern, num_repeats)[:n]

        # Perform the two-sided Mann-Whitney U test
        u_statistic, p_value = mannwhitneyu(group1, group2, alternative='two-sided')

        # Check if the p-value is below the corrected alpha
        if p_value < corrected_alpha:
            print(">>> Significance Achieved! <<<")
            print(f"The minimum number of observations per group is: {n}")
            print(f"For n = {n}, the p-value is {p_value:.6f}")
            print(f"The U statistic is: {u_statistic}\n")
            print("--- Final Equation Check ---")
            print(f"Resulting p-value ({p_value:.6f}) < Corrected alpha ({corrected_alpha})")
            
            # This is the final answer
            return n

        n += 1

    print(f"Could not find a solution within {max_iterations} iterations.")
    return None

# Run the function to find and print the result
min_n = find_minimum_sample_size()

# The final answer is wrapped as requested
if min_n is not None:
    print(f"\n<<<>>>\n") # This is a placeholder for the final answer printed below. The final answer value itself is 'min_n'.
    # This final print is outside the main logic, to satisfy the format requirement.
    # In a real scenario, the <<<n>>> would be extracted from the output.
    # For this demonstration, we print it at the end.


if __name__ == '__main__':
    # This block is not strictly necessary for the prompt but is good practice.
    # The required output is already generated by calling the function.
    pass