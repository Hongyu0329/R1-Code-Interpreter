import math

def get_order_str(group, element):
    """A helper function to format order output"""
    return f"{group} has order {element}"

# Case: A regular dessin D based on the group G = SL(2,7)
# G can be generated by b and w with |b|=3, |w|=3, and |bw|=7.
# This gives a hyperbolic dessin since 1/3 + 1/3 + 1/7 = 17/21 < 1.
l = 3  # |b|
m = 3  # |w|
n = 7  # |bw|

# G has a normal subgroup N = Z(G) (its center).
# The order of the center of SL(2,7) is 2.
order_of_N = 2

# The quotient group G/N is isomorphic to PSL(2,7).
# The generators b' = bN and w' = wN of G/N have orders |b'|=3, |w'|=3, and |b'w'|=7.
# Since the orders are the same, this is a smooth covering.
l_prime = 3
m_prime = 3
n_prime = 7

# The group orders
# |SL(2,7)| = (7^2 - 1) * 7 = 48 * 7 = 336
order_of_G = 336
# |PSL(2,7)| = |SL(2,7)|/2 = 168
order_of_G_N = order_of_G / order_of_N

# Calculate Euler characteristics
chi_factor = (1/l + 1/m + 1/n - 1)
chi_D = order_of_G * chi_factor

chi_factor_N = (1/l_prime + 1/m_prime + 1/n_prime - 1)
chi_D_N = order_of_G_N * chi_factor_N

# The ratio is |N|
ratio = chi_D / chi_D_N

print(f"For D defined by G=SL(2,7) and generators of orders ({l},{m},{n}):")
print(f"|G| = {order_of_G}")
print(f"X(D) = {get_order_str('|G| * (1/l + 1/m + 1/n - 1) =', order_of_G)} * ({1/l:.3f} + {1/m:.3f} + {1/n:.3f} - 1) = {chi_D:.3f}")
print("-" * 20)
print(f"For D_N defined by G/N=PSL(2,7) with N=Z(G), |N|={order_of_N}:")
print(f"|G/N| = {int(order_of_G_N)}")
print(f"The generators for D_N have orders ({l_prime},{m_prime},{n_prime}), so it is a smooth covering.")
print(f"X(D_N) = {get_order_str('|G/N| * (1/l' + 1/m' + 1/n' - 1) =', int(order_of_G_N))} * ({1/l_prime:.3f} + {1/m_prime:.3f} + {1/n_prime:.3f} - 1) = {chi_D_N:.3f}")
print("-" * 20)
print(f"The ratio X(D)/X(D_N) is {chi_D:.3f} / {chi_D_N:.3f} = {ratio:.1f}")
print(f"This ratio is equal to |N| = {order_of_N}.")
print("\nThe maximum possible value for this ratio is 2.")
print("\nFinal Equation:")
print(f"{int(chi_D)}/{int(chi_D_N)} = {int(ratio)}")
