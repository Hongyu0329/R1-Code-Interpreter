import numpy as np

def solve_dimension():
    """
    Calculates the dimension of the log blowup of a log point.
    
    The log point P with log structure N^3 corresponds to the origin of A^3,
    and its associated cone is generated by the standard basis vectors e1, e2, e3.
    """
    
    # 1. Define the generators of the original cone for A^3
    e1 = np.array([1, 0, 0])
    e2 = np.array([0, 1, 0])
    e3 = np.array([0, 0, 1])

    print("The log structure N^3 corresponds to a 3-dimensional cone generated by:")
    print(f"e1 = {e1}")
    print(f"e2 = {e2}")
    print(f"e3 = {e3}")
    print("-" * 30)

    # 2. The log ideal I is generated by (1,0,0) and (0,1,0), corresponding to e1 and e2.
    ideal_gen1 = e1
    ideal_gen2 = e2

    print("The log ideal I is generated by the elements corresponding to e1 and e2.")
    print("-" * 30)
    
    # 3. The log blowup introduces a new ray 'v', which is the sum of the ideal generators.
    v = ideal_gen1 + ideal_gen2
    print("The log blowup subdivides the cone by introducing a new ray 'v':")
    print(f"v = e1 + e2 = {ideal_gen1} + {ideal_gen2} = {v}")
    print("-" * 30)

    # 4. This splits the original cone into two new maximal cones. We analyze one of them.
    # The first new cone, sigma_1, is generated by e1, v, and e3.
    cone1_generators = np.array([e1, v, e3])

    print("The original cone is split. One of the new cones is generated by:")
    print(f"e1 = {e1}")
    print(f"v  = {v}")
    print(f"e3 = {e3}")
    print("-" * 30)

    # 5. The dimension of the blowup is the dimension of the new cones,
    # calculated as the rank of the matrix of generators.
    dimension = np.linalg.matrix_rank(cone1_generators)

    print("The dimension of the log blowup is the dimension of the new maximal cones.")
    print("We compute this by finding the rank of the matrix formed by the new generators:")
    print("Matrix of generators for the new cone:")
    print(cone1_generators)
    print(f"\nThe dimension is the rank of this matrix, which is {dimension}.")

solve_dimension()
