def dual(topology, universe):
    """
    Computes the dual of a topology on a finite set.
    For a finite space, the open sets of the dual topology are the
    closed sets of the original topology.
    """
    closed_sets = {universe - open_set for open_set in topology}
    return closed_sets

def pretty_print_topology(t, name):
    """Helper function to print a topology nicely."""
    # Convert frozensets to sorted lists for consistent output
    set_list = sorted([sorted(list(s)) for s in t])
    print(f"{name} = {{ {', '.join(map(str, set_list))} }}")

def solve():
    """
    Solves the problem for finite spaces and demonstrates the maximum number of
    distinct topologies generated by the dual operator.
    """
    # Define the universe X = {0, 1}
    X = frozenset({0, 1})

    # Define the Sierpinski topology on X
    # T_0 = {âˆ…, {0}, {0, 1}}
    T_0 = {frozenset(), frozenset({0}), frozenset({0, 1})}

    print("Starting with the Sierpinski topology on X = {0, 1}:")
    pretty_print_topology(T_0, "T_0")

    # First iteration
    T_1 = dual(T_0, X)
    print("\nApplying the dual operator once:")
    pretty_print_topology(T_1, "T_1 = d(T_0)")

    # Second iteration
    T_2 = dual(T_1, X)
    print("\nApplying the dual operator twice:")
    pretty_print_topology(T_2, "T_2 = d(T_1)")

    # Analysis
    print("\nAnalysis:")
    is_t1_different = (T_1 != T_0)
    print(f"Is T_1 different from T_0? {is_t1_different}")
    is_t2_same_as_t0 = (T_2 == T_0)
    print(f"Is T_2 the same as T_0? {is_t2_same_as_t0}")

    if is_t2_same_as_t0:
        print("\nWe have demonstrated the identity d(d(T)) = T.")
        print("The sequence of distinct topologies is T_0, T_1, T_0, ...")
        distinct_topologies = {tuple(sorted(map(tuple, T_0))), tuple(sorted(map(tuple, T_1)))}
        max_len = len(distinct_topologies)
        print(f"The number of distinct topologies is {max_len}.")
        print("This example achieves the maximum possible length for finite spaces.")
        print("\nFinal Equation and Result:")
        print("The governing equation is d^2(T) = T.")
        print("From this equation, the largest possible number of distinct topologies is 2.")

solve()
