The design involves three main phases: 1) A one-time Distributed Key Generation (DKG) using Verifiable Secret Sharing to create secret shares (`s_i`) and a group public key (`Y`). 2) A two-round signing protocol where `t` participants first commit to random nonces and then, in the second round, exchange signature shares. 3) A final aggregation step where shares are verified and combined.

The detailed two-round signing protocol for a set of `t` signers is as follows:
**Round 1 (Commitment):** Each party `P_i` generates two random nonces (`d_i`, `e_i`), computes public commitments `D_i = g^{d_i}` and `E_i = g^{e_i}`, and broadcasts the pair `(D_i, E_i)`.

**Round 2 (Response):** After receiving all commitments, each party `P_i`:
1.  Computes a binding factor `rho_i` by hashing the message, all commitments, and its own identity.
2.  Computes the group nonce commitment `R = product(D_j * (E_j)^{rho_j})`.
3.  Computes the group challenge `c = H(R, Y, m)`.
4.  Computes its signature share `z_i = d_i + e_i*rho_i + c*L_i*s_i`, where `L_i` is its Lagrange coefficient.
5.  Sends `z_i` to an aggregator.

**Aggregation:** The aggregator verifies each share `z_i` using the public commitments, then sums them to get the final signature `s = sum(z_i)`. The final signature is `(R, s)`. This design achieves tight security by using the binding factor to prevent adaptive nonce attacks.