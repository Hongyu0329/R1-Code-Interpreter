def explain_and_derive_probability():
    """
    Derives and prints the formula for the probability of an edge in a jointly exchangeable random graph.
    """

    # --- Introduction to the concepts ---
    p_symbol = "P(y_ij = 1)"
    f_symbol = "f(u, v)"
    xi_i_symbol = "xi_i"
    xi_j_symbol = "xi_j"

    print("Derivation of the probability of a link in a jointly exchangeable random graph.")
    print("-" * 70)
    print(f"A graph is jointly exchangeable if its probability distribution is invariant under any permutation of its N nodes.")
    print(f"By the Aldous-Hoover theorem, such a graph can be generated by associating each node 'i' with a hidden variable {xi_i_symbol} ~ Uniform(0, 1).")
    print(f"The conditional probability of a link between nodes 'i' and 'j' is given by a symmetric function '{f_symbol}', called a graphon:")
    print(f"P(y_ij = 1 | {xi_i_symbol}=u, {xi_j_symbol}=v) = {f_symbol}\n")

    # --- Derivation of the final formula ---
    print(f"To find the unconditional probability {p_symbol}, we must average over all possible values of {xi_i_symbol} and {xi_j_symbol}.")
    print("This is achieved by integrating the conditional probability over the unit square [0, 1] x [0, 1].\n")

    # --- Printing the final formula ---
    integral_part_1 = "Integral from 0 to 1"
    integral_part_2 = "Integral from 0 to 1"
    integrand = "f(u, v) du dv"

    print("The final formula for the probability is:")
    print(f"{p_symbol} = {integral_part_1} ( {integral_part_2} {integrand} )")

    # The formula represents the following mathematical expression:
    # P(y_ij = 1) = ∫[0,1] ∫[0,1] f(u, v) du dv
    # This value is the expected edge density of the graph.

explain_and_derive_probability()

# The final answer is the mathematical expression derived above.
# It is the double integral of the graphon function f(u,v) over the unit square.
final_answer = "Integral from 0 to 1 of (Integral from 0 to 1 of f(u, v) dv) du"