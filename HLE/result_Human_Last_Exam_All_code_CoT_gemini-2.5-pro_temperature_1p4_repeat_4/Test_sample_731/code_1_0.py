import math

def solve():
    """
    Calculates the number of power subgroups (cyclic subgroups) in the 
    semidihedral group of a given size.
    """
    group_size = 512

    # Step 1: Find n for SD_{2^n}
    # group_size = 2^n  => n = log2(group_size)
    if group_size <= 0 or (group_size & (group_size - 1)) != 0:
        print(f"Error: Group size {group_size} is not a power of 2.")
        return
        
    n = int(math.log2(group_size))

    if n < 3:
        # The formula applies for n>=4. For n=3, SD_8 is isomorphic to Q_8.
        # For n=2, SD_4 is isomorphic to C_4. For n=1, SD_2 is C_2.
        # The question specifies 512, so n=9 and this check is for robustness.
        print(f"The group SD_{group_size} is not a standard semidihedral group.")
        return

    print(f"The semidihedral group of size {group_size} is denoted as SD_{{2**n}}, so n = {n}.")
    print("The number of power (cyclic) subgroups in SD_{2^n} is given by the formula: n + 2^(n-2) + 2^(n-3)")
    print("-" * 20)

    # Step 2: Calculate each term in the formula
    # Term 1: Number of cyclic subgroups in the maximal cyclic subgroup C_{2^(n-1)}
    # This is equal to the number of divisors of 2^(n-1), which is n.
    term1 = n

    # Term 2: Number of cyclic subgroups of order 2 generated by elements outside the maximal cyclic subgroup.
    # This is 2^(n-2).
    term2 = 2**(n - 2)
    
    # Term 3: Number of cyclic subgroups of order 4 generated by elements outside the maximal cyclic subgroup.
    # This is 2^(n-3).
    term3 = 2**(n - 3)

    # Step 3: Calculate the total sum
    total_subgroups = term1 + term2 + term3

    # Step 4: Print the final equation as requested
    print("Calculation:")
    print(f"Number of subgroups from the maximal cyclic subgroup = {term1}")
    print(f"Number of additional subgroups of order 2 = 2^({n}-2) = {term2}")
    print(f"Number of additional subgroups of order 4 = 2^({n}-3) = {term3}")
    print("\nTotal number of power subgroups:")
    print(f"{term1} + {term2} + {term3} = {total_subgroups}")

solve()