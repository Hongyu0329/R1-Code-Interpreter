import numpy as np

# Step 1: Define the vectors for the cones derived from the subdivision.
# The subdivision of the cone (R_>=0)^3 by the wall {w1=w2} creates two new maximal cones.
# Cone C1 corresponds to the region w1 >= w2.
# Its spanning vectors are e1=(1,0,0), e3=(0,0,1), and v=(1,1,0).
c1_vectors = np.array([
    [1, 0, 0],  # Corresponds to e1
    [1, 1, 0],  # Corresponds to the new ray on the wall w1=w2
    [0, 0, 1]   # Corresponds to e3
])

# Cone C2 corresponds to the region w1 <= w2.
# Its spanning vectors are e2=(0,1,0), e3=(0,0,1), and v=(1,1,0).
c2_vectors = np.array([
    [0, 1, 0],  # Corresponds to e2
    [1, 1, 0],  # Corresponds to the new ray on the wall w1=w2
    [0, 0, 1]   # Corresponds to e3
])

# Step 2: Calculate the rank of the matrices to find the dimension of the cones.
# The dimension of a cone is the number of linearly independent spanning vectors.
dim_c1 = np.linalg.matrix_rank(c1_vectors)
dim_c2 = np.linalg.matrix_rank(c2_vectors)

# The dimension of the resulting toric variety (the log blowup) is the maximum
# dimension of any cone in its fan.
blowup_dimension = max(dim_c1, dim_c2)

# Step 3: Print the explanation and the result.
print("The log blowup of the point P with log structure N^3 along the ideal I generated by (1,0,0) and (0,1,0) is a toric variety.")
print("Its fan is a subdivision of the cone (R_>=0)^3.")
print("The subdivision results in two maximal cones, C1 and C2.")
print("\nVerifying the dimension of the first cone, C1:")
print(f"The spanning vectors of C1 are:\n{c1_vectors}")
print(f"The dimension of cone C1 is the rank of this matrix, which is {dim_c1}.")

print("\nVerifying the dimension of the second cone, C2:")
print(f"The spanning vectors of C2 are:\n{c2_vectors}")
print(f"The dimension of cone C2 is the rank of this matrix, which is {dim_c2}.")

print(f"\nThe dimension of the log blowup is the maximum of the dimensions of these cones.")
print(f"Dimension = max({dim_c1}, {dim_c2}) = {blowup_dimension}")
<<<3>>>