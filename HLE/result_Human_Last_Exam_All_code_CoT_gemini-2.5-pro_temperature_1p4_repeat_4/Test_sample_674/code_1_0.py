def solve_sequence():
    """
    This function generates the Hofstadter-Conway sequence and
    prints the calculation for the 42nd term.
    The rule is s[n] = s[s[n-1]] + s[n - s[n-1]].
    """
    n_terms = 42
    # Use a dictionary for 1-based indexing
    s = {1: 1, 2: 1}

    for n in range(3, n_terms + 1):
        try:
            s_n_minus_1 = s[n - 1]
            # The two terms in the sum
            term1_idx = s_n_minus_1
            term2_idx = n - s_n_minus_1

            if term1_idx < 1 or term2_idx < 1 or term1_idx >= n or term2_idx >= n:
                 print(f"Error: index out of bounds at n={n}")
                 break

            s[n] = s[term1_idx] + s[term2_idx]
        except KeyError as e:
            print(f"Error: Could not find key {e} when calculating s[{n}]")
            break
            
    # Print the sequence generated by the rule
    # print("Generated sequence S4 (Hofstadter-Conway):")
    # print(", ".join(str(s[i]) for i in range(1, n_terms + 1)))

    # As requested, output the equation for the final term s[42]
    n_final = 42
    s_n_minus_1_val = s[n_final - 1]
    term1_final_idx = s_n_minus_1_val
    term2_final_idx = n_final - s_n_minus_1_val
    term1_final_val = s[term1_final_idx]
    term2_final_val = s[term2_final_idx]
    s_n_final_val = s[n_final]

    print("The rule R for the sequence S4 is: s[n] = s[s[n-1]] + s[n - s[n-1]]")
    print(f"Let's calculate s[{n_final}]:")
    print(f"s[{n_final}] = s[s[{n_final - 1}]] + s[{n_final} - s[{n_final - 1}]]")
    print(f"s[{n_final}] = s[{s_n_minus_1_val}] + s[{n_final} - {s_n_minus_1_val}]")
    print(f"s[{n_final}] = s[{term1_final_idx}] + s[{term2_final_idx}]")
    print(f"s[{n_final}] = {term1_final_val} + {term2_final_val}")
    print(f"s[{n_final}] = {s_n_final_val}")

solve_sequence()