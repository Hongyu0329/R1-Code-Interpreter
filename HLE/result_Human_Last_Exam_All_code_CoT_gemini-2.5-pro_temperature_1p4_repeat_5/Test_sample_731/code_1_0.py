import math

def solve():
    """
    Calculates the number of power subgroups (cyclic subgroups) in the
    semidihedral group of size 512.
    """
    group_size = 512

    # A semidihedral group has size 2^n. We find n.
    # n = log2(group_size)
    n = int(math.log2(group_size))

    print(f"The semidihedral group is SD_{group_size}, which corresponds to n={n}.")
    print("A power subgroup is another name for a cyclic subgroup.")
    print("We will count the cyclic subgroups by categorizing them.\n")

    # Category 1: Cyclic subgroups within the maximal cyclic subgroup <r>
    # The order of <r> is 2^(n-1). For a cyclic group of order p^k,
    # the number of subgroups is k+1. Here p=2, k=n-1.
    num_subgroups_in_r = (n - 1) + 1
    print(f"1. Number of cyclic subgroups contained within the maximal cyclic subgroup <r> (of order {2**(n-1)}): {num_subgroups_in_r}")

    # Category 2a: Cyclic subgroups generated by sr^i where i is even.
    # These elements have order 2. The number of even i's from 0 to 2^(n-1)-1 is 2^(n-2).
    # Each generates a unique subgroup.
    num_subgroups_s_even = 2**(n - 2)
    print(f"2. Number of cyclic subgroups of order 2 generated by elements of the form sr^i (where i is even): {num_subgroups_s_even}")

    # Category 2b: Cyclic subgroups generated by sr^i where i is odd.
    # These elements have order 4. The subgroups come in pairs, so we divide the count by 2.
    # The number of odd i's is 2^(n-2).
    num_subgroups_s_odd = 2**(n - 3)
    print(f"3. Number of cyclic subgroups of order 4 generated by elements of the form sr^i (where i is odd): {num_subgroups_s_odd}")

    # The total number is the sum of these disjoint sets of subgroups.
    total_subgroups = num_subgroups_in_r + num_subgroups_s_even + num_subgroups_s_odd

    print("\nThese categories are disjoint, so we sum the counts.")
    # Final output as an equation
    print("\nFinal calculation:")
    print(f"{num_subgroups_in_r} + {num_subgroups_s_even} + {num_subgroups_s_odd} = {total_subgroups}")


solve()