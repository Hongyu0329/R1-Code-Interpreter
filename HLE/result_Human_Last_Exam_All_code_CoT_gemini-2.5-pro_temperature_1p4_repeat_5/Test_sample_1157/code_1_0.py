import textwrap

class DentalTraumaCaseManager:
    """
    Analyzes a complex dental trauma case and outlines a management plan.
    NOTE: This is a simulation for educational purposes and is NOT medical advice.
    """
    def __init__(self, patient_profile, accident_details, clinical_findings):
        self.patient_profile = patient_profile
        self.accident_details = accident_details
        self.clinical_findings = clinical_findings

    def print_disclaimer(self):
        print("="*60)
        print("!!! IMPORTANT MEDICAL DISCLAIMER !!!")
        print("="*60)
        disclaimer_text = """
This content is generated by an AI assistant for illustrative purposes ONLY. It is not, and should not be considered, medical advice. A real-life medical situation like this requires immediate consultation with qualified medical and dental professionals. Treatment decisions must be made by a licensed healthcare provider based on a comprehensive in-person examination of the patient.
"""
        print(textwrap.dedent(disclaimer_text))

    def outline_management_plan(self):
        print("\n" + "="*60)
        print("PROPOSED PATIENT MANAGEMENT PROTOCOL")
        print("="*60)

        # Step 1: Immediate Management (First 24-48 hours)
        print("\n--- 1. Immediate Management ---\n")
        print(f"[SYSTEMIC] Priority 1: Address systemic health. Patient's HbA1c is {self.patient_profile['hba1c']}%, indicating uncontrolled diabetes.")
        print("    - Action: Immediate medical consultation to manage blood glucose.")
        print("    - Action: Initiate appropriate diabetes treatment and nutritional counseling.")
        print(f"[LOCAL] Priority 2: Address oral trauma, complicated by a {self.accident_details['delay_hours']} hour delay.")
        print("    - Action: Gentle debridement and irrigation of the tooth sockets.")
        print("    - Action: Administer prophylactic antibiotics due to high infection risk (diabetic status + delay).")
        print("    - Action: Prescribe appropriate analgesics for pain management.")
        print("    - Action: Radiographic assessment (periapical and occlusal views) to check for bone fractures.")

        # Step 2: Analysis of Findings
        print("\n--- 2. Analysis of Clinical Findings ---\n")
        print(f"[*] Dental Finding: Loss of left lateral incisor, canine, and first premolar.")
        print(f"[*] Skeletal Finding: SNB angle of {self.clinical_findings['snb_angle']} degrees indicates mandibular prognathism (Skeletal Class III). This will complicate the bite relationship for the final prosthesis.")
        print("[*] Cellular Interest: In the context of wound healing, especially with diabetes, the cells of primary interest are:")
        print("    - Inflammatory Cells: Neutrophils, Macrophages (function often impaired).")
        print("    - Repair/Regeneration Cells: Fibroblasts, Osteoblasts, Endothelial Cells (activity is delayed/reduced).")
        print("    - Clotting Cells: Platelets.")

        # Step 3: Definitive Treatment (Prosthetic Replacement)
        print("\n--- 3. Definitive Treatment Plan: Prosthetic Replacement ---\n")
        print("[*] Recommended Prosthesis: A Removable Partial Denture (RPD).")
        print("    - Rationale: This is a conservative option that avoids surgery (like implants) which is risky with uncontrolled diabetes. It also avoids aggressive preparation of adjacent teeth for a long-span bridge.")
        print("[*] Recommended Denture Type: Flexible Partial Denture.")
        print("    - Material: A flexible, nylon-based thermoplastic (e.g., Valplast).")
        print("    - Reason: This material is lightweight, aesthetically pleasing (no metal clasps), and comfortable. It is a good choice for patients who may not tolerate a rigid metal-framework denture.")
        print("[*] Abutment Teeth and Rationale:")
        print("    - Primary Abutments: Left Central Incisor and Left Second Premolar.")
        print("    - Reason: These are the teeth immediately adjacent to the edentulous (toothless) space. The denture will use clasps or rests on these teeth to gain the necessary retention and support to stay in place.")

    def final_data_summary(self):
        print("\n" + "="*60)
        print("FINAL CASE DATA SUMMARY EQUATION")
        print("="*60)
        num_lost_teeth = self.accident_details['lost_teeth_count']
        delay = self.accident_details['delay_hours']
        hba1c = self.patient_profile['hba1c']
        snb = self.clinical_findings['snb_angle']

        # This "equation" simply displays the numbers from the problem statement as requested.
        print(f"Patient Critical Values >>> Teeth Lost({num_lost_teeth}) + Delay({delay}h) + HbA1c({hba1c}%) + SNB({snb}Â°)")
        print("="*60)

# --- Main Execution ---
if __name__ == "__main__":
    # Patient data derived from the user's prompt
    patient_data = {
        "description": "Obese lady from sub-Saharan Africa, living with diabetes",
        "hba1c": 7.5,
        "on_treatment": False
    }

    trauma_details = {
        "cause": "Car accident",
        "lost_teeth_desc": "Left lateral incisor, canine, and first premolar",
        "lost_teeth_count": 3,
        "delay_hours": 28
    }

    exam_findings = {
        "head_exam": "Normal",
        "snb_angle": 88
    }

    # Create and run the case manager
    case = DentalTraumaCaseManager(patient_data, trauma_details, exam_findings)
    case.print_disclaimer()
    case.outline_management_plan()
    case.final_data_summary()

    # The final summarized answer for the prompt
    final_answer = "A flexible removable partial denture made of a nylon thermoplastic, with the left central incisor and left second premolar as abutment teeth."
    # print(f"\n<<< {final_answer} >>>") This is for the final output wrapper