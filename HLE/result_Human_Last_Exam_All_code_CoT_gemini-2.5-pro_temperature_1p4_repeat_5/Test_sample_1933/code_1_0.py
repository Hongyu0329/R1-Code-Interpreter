import itertools

def get_powerset(s):
    """Returns the powerset of a given set."""
    s_list = list(s)
    return list(itertools.chain.from_iterable(itertools.combinations(s_list, r) for r in range(len(s_list) + 1)))

def generate_shattering_formulas():
    """
    Demonstrates that a set of 4 points can be shattered by the hypothesis class
    formed by intersections of 4 base sets.
    """
    k = 4
    # The set of points to be shattered
    points = set(range(1, k + 1))
    
    # Define the extensions of the 4 predicates (P1, P2, P3, P4)
    # The extension of Pi is the set of all points except i.
    predicate_extensions = {i: points - {i} for i in range(1, k + 1)}
    
    print(f"Let the domain be C = {points}")
    print("Let the 4 predicates be defined as follows:")
    for i in range(1, k + 1):
        print(f"  - Extension of P{i} is S{i} = {predicate_extensions[i]}")
    print("-" * 30)
    print("Shattering all subsets of C:\n")

    # Generate all 2^k subsets of the points
    target_subsets = get_powerset(points)
    
    shattered_count = 0
    for subset in target_subsets:
        target_subset = set(subset)
        
        # To generate a target_subset, we need to find an intersection of predicates
        # that equals this subset. The required predicates are those whose
        # indices are NOT in the target_subset.
        # For a subset S', the formula is intersection of P_i for i in C \ S'
        predicate_indices_to_intersect = points - target_subset
        
        # Calculate the intersection
        # Start with the universal set (all points)
        generated_set = points.copy()
        for i in predicate_indices_to_intersect:
            generated_set.intersection_update(predicate_extensions[i])
            
        # Verify that we generated the correct subset
        if generated_set == target_subset:
            shattered_count += 1
            # Build the formula string for display
            if not predicate_indices_to_intersect:
                formula = "True (empty intersection)"
            else:
                formula_parts = [f"P{i}(x)" for i in sorted(list(predicate_indices_to_intersect))]
                formula = " AND ".join(formula_parts)
            
            print(f"Target Subset: {str(target_subset):<20} | Generated by: {formula}")

    print("-" * 30)
    if shattered_count == 2**k:
        print(f"Successfully shattered the set of {k} points by generating all {shattered_count} subsets.")
        print(f"This proves that the VC dimension is at least {k}.")
    else:
        print("Failed to shatter the set.")

if __name__ == '__main__':
    generate_shattering_formulas()