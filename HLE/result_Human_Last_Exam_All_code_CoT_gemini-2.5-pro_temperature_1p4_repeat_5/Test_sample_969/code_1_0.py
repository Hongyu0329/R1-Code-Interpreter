def generate_block(control_num, block_type):
    """
    Generates a block of numbers based on a control number and its type.
    - The control number determines the starting value and the length of the block.
    - The type determines the pattern (countdown, countup, or constant).
    """
    length = control_num
    if block_type == 'Down':
        # Countdown from the control number
        return [control_num - i for i in range(length)]
    elif block_type == 'Up':
        # Countup from the control number
        return [control_num + i for i in range(length)]
    elif block_type == 'Same':
        # A constant block of the control number
        return [control_num] * length
    return []

# The rules for the sequence are derived from analyzing the given elements.
# The control number sequence is 3, 2, 3, 2, then becomes 2 based on answer choices.
control_numbers = [3, 2, 3, 2, 2, 2]
# The type sequence follows a repeating pattern: (Down, Up, Same, Same).
type_pattern = ['Down', 'Up', 'Same', 'Same']
types = [type_pattern[i % 4] for i in range(len(control_numbers))]

# Generate the blocks and the full sequence
full_sequence = []
block_definitions = []
for i in range(len(control_numbers)):
    block = generate_block(control_numbers[i], types[i])
    full_sequence.extend(block)
    block_definitions.append({
        "num": i + 1,
        "C": control_numbers[i],
        "T": types[i],
        "result": ' '.join(map(str, block))
    })

# The given sequence consists of the first 4 blocks.
given_sequence_str = "3 2 1 2 3 3 3 2 2"
# The next 4 elements are from blocks 5 and 6.
next_4_elements_str = ' '.join(map(str, full_sequence[9:13]))

print("The sequence is generated by a block-based system with the following rules:")
for i in range(4):
    b = block_definitions[i]
    print(f"Block {b['num']} (C={b['C']}, T={b['T']}): {b['result']}")
print(f"\nThis reproduces the given sequence: {given_sequence_str}")
print("-" * 20)
print("The pattern continues to find the next elements:")
for i in range(4, 6):
    b = block_definitions[i]
    print(f"Block {b['num']} (C={b['C']}, T={b['T']}): {b['result']}")
print("-" * 20)
print("The final sequence including the next 4 elements is:")
print(f"{given_sequence_str} {next_4_elements_str}")
