import math

def calculate_shear_center_asymmetric_channel():
    """
    Calculates the shear center location for an asymmetric thin-walled channel section.

    The shear center is the point through which applied shear loads produce
    no twisting. For a channel section, it is located outside the section,
    offset from the web. This script calculates that offset (eccentricity 'e').
    """
    # --- Define Section Dimensions (using a realistic example in mm) ---
    # We use centerline dimensions for this thin-walled analysis.
    h = 150.0   # Height of the web (between flange centerlines)
    b1 = 70.0   # Width of the top flange
    b2 = 50.0   # Width of the bottom flange
    tf1 = 12.0  # Thickness of the top flange
    tf2 = 10.0  # Thickness of the bottom flange
    tw = 8.0    # Thickness of the web

    print("--- Section Properties ---")
    print(f"Web Height (h): {h} mm")
    print(f"Top Flange (b1 x tf1): {b1} x {tf1} mm")
    print(f"Bottom Flange (b2 x tf2): {b2} x {tf2} mm")
    print(f"Web Thickness (tw): {tw} mm\n")

    # --- 1. Calculate Area and Centroid (y_bar) from the bottom flange centerline ---
    A_top = b1 * tf1
    A_web = h * tw
    A_bot = b2 * tf2
    A_total = A_top + A_web + A_bot

    # y-distance from bottom flange centerline to the centroid of each part
    y_top = h
    y_web = h / 2.0
    y_bot = 0.0

    # Centroid calculation
    y_bar = (A_top * y_top + A_web * y_web + A_bot * y_bot) / A_total

    print("--- Centroid and Moment of Inertia Calculation ---")
    print(f"Total Area (A_total): {A_total:.2f} mm^2")
    print(f"Centroid location (y_bar) from bottom flange centerline: {y_bar:.2f} mm\n")

    # --- 2. Calculate Moment of Inertia (Ixx) about the horizontal centroidal axis ---
    # Using the Parallel Axis Theorem: I = I_c + A*d^2
    # For thin flanges, their own moment of inertia (I_c = b*t^3/12) is negligible.

    # Distances from the global centroid to the local centroid of each part
    d_top = y_top - y_bar
    d_web = y_web - y_bar
    d_bot = y_bot - y_bar

    Ixx_top = A_top * d_top**2
    Ixx_web = (tw * h**3) / 12.0 + A_web * d_web**2
    Ixx_bot = A_bot * d_bot**2
    Ixx = Ixx_top + Ixx_web + Ixx_bot

    print(f"Moment of Inertia about centroid (Ixx): {Ixx:.2f} mm^4\n")

    # --- 3. Calculate Shear Center Eccentricity (e) ---
    # This is the horizontal distance from the web's centerline to the shear center.
    # Formula: e = (h^2 / (8 * Ixx)) * (tf1*b1^2 + tf2*b2^2) -> this formula is an approximation for symmetric sections.
    # Let's use the more accurate formulation derived from balancing moments.
    # Moment from top flange shear = F_top * d_top
    # Moment from bottom flange shear = F_bot * d_bot (absolute distance)
    # The term we need is sum(Integral(y*Q)dA) which simplifies for flanges to:
    e_numerator = tf1 * d_top * (b1**2 / 2.0) * h + tf2 * abs(d_bot) * (b2**2 / 2.0) * h
    
    # A more common and direct formula from first principles (moment balance) is:
    # e * V = Moment from flange forces. Moment is sum of Force * distance from N.A.
    # This gives: e = (1/Ixx) * [ integral(y*Q)dA ], where Q is first moment of area
    # For our thin walled section, this simplifies to:
    term_top_flange = tf1 * (b1**2 / 2) * d_top
    term_bottom_flange = tf2 * (b2**2 / 2) * abs(d_bot) # abs() as d_bot is negative
    
    # Correction: The textbook formula for eccentricity 'e' from the web centerline is derived from balancing the torque from flange shear forces.
    # M_internal = V*e
    # M_internal = F_top_flange * h
    # A more general formula is e = (t_f * h^2) / (4 * Ixx) * (b1^2 + b2^2) if t_f is same.
    # Let's use the most general form for thin sections:
    e = (1 / Ixx) * ( (tf1 * h * d_top * b1**2 / 2) + (tf2 * h * abs(d_bot) * b2**2 / 2) )

    print("--- Shear Center Calculation ---")
    print("The shear center eccentricity 'e' is calculated by balancing the external shear force moment (V*e) with the internal moment generated by shear flows in the flanges.")
    print("Formula: e = (1 / Ixx) * [ (tf1*h*d_top*b1²/2) + (tf2*h*|d_bot|*b2²/2) ]")
    print("\nSubstituting the calculated values:")

    # Print the equation with all numbers filled in
    print(f"e = (1 / {Ixx:.2f}) * [ ({tf1} * {h} * {d_top:.2f} * {b1}² / 2) + ({tf2} * {h} * {abs(d_bot):.2f} * {b2}² / 2) ]")

    # Calculate the final result
    val_top = tf1 * h * d_top * b1**2 / 2
    val_bot = tf2 * h * abs(d_bot) * b2**2 / 2
    e_val = (1 / Ixx) * (val_top + val_bot)
    
    print(f"e = (1 / {Ixx:.2f}) * [ {val_top:.2f} + {val_bot:.2f} ]")
    print(f"e = {e_val:.2f} mm")
    print("\nThe shear center is located %.2f mm from the web centerline, outside the section." % e_val)

if __name__ == '__main__':
    calculate_shear_center_asymmetric_channel()