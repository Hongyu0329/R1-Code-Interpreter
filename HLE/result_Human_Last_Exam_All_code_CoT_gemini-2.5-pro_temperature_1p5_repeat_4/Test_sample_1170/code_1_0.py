def solve_algebra_problem():
    """
    This function determines which of the 20 listed objects generate a prime tt-ideal
    and counts the number of prime ideals not generated by any of them.
    The reasoning is based on the classification of prime tt-ideals for the given category.
    """

    # There are two prime tt-ideals in K:
    # 1. P_gen, generated by kC_p(0) (object 2).
    # 2. P_supp, generated by cone(tau) (object 7).

    # List of objects that generate the entire category K and are thus not prime-generating:
    # 1: k(0) (tensor unit)
    # 3: [p-1](0) (gr is sum of k's)
    # 4: rad(kC_p) (gr is sum of k's)
    # 5: gap^1(rad(kC_p)) (gr is sum of k's)
    # 6: gap^{p-1}(rad(kC_p)) (gr is sum of k's)
    # 15: S (complex built from generators of K)
    
    # List of objects that generate a prime tt-ideal:
    prime_generators = []

    # Object 2 generates P_gen.
    prime_generators.append(2)

    # Object 7 generates P_supp.
    prime_generators.append(7)
    
    # The ideals generated by objects 8, 9, 10 are proper subideals of P_supp
    # for p > 2 and thus are not prime in general.

    # For tensor products, we use the rule: if <A> = K, then <A tensor B> = <B>.

    # Object 12: <rad(kC_p)> = K, so <rad(kC_p) tensor cone(tau)> = <cone(tau)> = P_supp.
    prime_generators.append(12)

    # Object 13: <gap^1(rad(kC_p))> = K, so <object 13> = <cone(tau)> = P_supp.
    prime_generators.append(13)

    # Object 14: <gap^{p-1}(rad(kC_p))> = K, so <object 14> = <cone(tau)> = P_supp.
    prime_generators.append(14)
    
    # Object 16: <S> = K, so <S tensor kC_p(0)> = <kC_p(0)> = P_gen.
    prime_generators.append(16)

    # Object 18: <S> = K, so <S tensor cone(tau)> = <cone(tau)> = P_supp.
    prime_generators.append(18)
    
    prime_generators.sort()
    
    # All identified primes (P_gen, P_supp) are generated by objects in the list.
    num_other_primes = 0

    first_answer = ",".join(map(str, prime_generators))
    second_answer = str(num_other_primes)

    print(f"{first_answer};{second_answer}")

solve_algebra_problem()