def solve():
    """
    This function determines which of the 20 objects generate a prime tt-ideal and counts the number of prime tt-ideals not generated by any of these objects.

    The analysis of the prime tt-spectrum of the category K reveals three non-trivial prime ideals:
    1. A "geometric" prime ideal P_G.
    2. An "algebraic" prime ideal P_T.
    3. A maximal prime ideal P_m containing the other two.

    The objects on the list are analyzed as follows:
    - Objects 1-6 generate the entire category K, which is not a prime ideal.
    - Object 7, cone(tau), is the canonical generator for the prime ideal P_T.
    - Objects 8-10 are tensor powers of the generator of P_T and do not generate prime (radical) ideals.
    - Objects 11-14 are tensor products of cone(tau) with generators of the module category. They also generate the prime ideal P_T.
    - Objects 15-20 are related to the object S, which generates a non-prime ideal contained within P_T.

    Therefore, the objects that generate a prime tt-ideal are those that generate P_T.
    """

    # List of indices of objects that generate a prime tt-ideal
    prime_generators_indices = [7, 11, 12, 13, 14]

    # The prime ideals of K are P_G, P_T, and P_m.
    # P_T is generated by objects from the list.
    # P_G is generated by a Carlson module, which is not on the list.
    # P_m is not generated by a single object.
    # Thus, there are 2 prime ideals not generated by any object on the list.
    num_other_primes = 2

    # Format the output string as requested
    prime_generators_str = ",".join(map(str, prime_generators_indices))
    final_answer = f"{prime_generators_str};{num_other_primes}"

    print(final_answer)

solve()