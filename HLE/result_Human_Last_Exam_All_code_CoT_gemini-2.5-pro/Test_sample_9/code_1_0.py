import sympy

# Define symbolic generators for the group
a, b = sympy.symbols('a b', commutative=False)

# The relation in the trefoil knot group
relation = sympy.Eq(a**2, b**3)
print(f"The fundamental group of X is the trefoil knot group, with presentation <a, b | {relation}>.")

# To find the first homology group, we abelianize the fundamental group.
# This means we add the commutation relation ab = ba.
a_ab, b_ab = sympy.symbols('a b', commutative=True)
relation_ab = sympy.Eq(a_ab**2, b_ab**3)
print(f"In the abelianized group, the relation becomes {relation_ab}.")

# We can express the generators of this abelian group in terms of a single generator.
# Let x be the new generator. The group is isomorphic to Z.
# Let a = x^3 and b = x^2.
x = sympy.symbols('x', commutative=True)
a_sol = x**3
b_sol = x**2

print(f"We can parameterize the solutions to {relation_ab} with a single generator x.")
print(f"Let a = {a_sol} and b = {b_sol}.")

# Verify this satisfies the relation
is_satisfied = (relation_ab.lhs.subs({a_ab: a_sol, b_ab: b_sol}) == 
                relation_ab.rhs.subs({a_ab: a_sol, b_ab: b_sol}))

print(f"Checking the relation: (x**3)**2 = x**6 and (x**2)**3 = x**6. The relation is satisfied: {is_satisfied}.")
print("The abelianized group is generated by x with no relations, so it is the infinite cyclic group.")

# The final result
H1_X = "Z"
print(f"\nTherefore, H_1(X, Z) is isomorphic to the group of integers, Z.")
final_equation = "H_1(X, Z) = Z"
# We print the components of the final "equation" as requested.
print(f"The final result is: {final_equation.split('=')[0]} = {final_equation.split('=')[1]}")
