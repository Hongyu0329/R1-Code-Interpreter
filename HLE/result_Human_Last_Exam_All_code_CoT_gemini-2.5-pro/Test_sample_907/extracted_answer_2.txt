```python
import math

def display_absorption_equations():
    """
    This function defines and prints the equations for the absorption
    cross-section of a molecular chain under two different assumptions,
    as derived from first-order time-dependent perturbation theory for a
    Gaussian laser pulse.
    """

    print("This script presents the equations for the absorption cross-section (σ) as a function of the laser frequency (ω).")
    print("-" * 75)

    # --- Case a) No interaction ---
    print("\na) Equation for a chain of non-interacting molecules:\n")

    print("In this case, each of the N molecules absorbs light independently.")
    print("The total cross-section is the sum of the individual contributions.")

    print("\nSymbols used in the equation:")
    print("  σ_a(ω) : The absorption cross-section as a function of laser frequency ω.")
    print("  C      : A proportionality constant that includes fundamental physical constants (like ħ, c, ε₀).")
    print("  N      : The number of molecules in the chain.")
    print("  μ_eg   : The magnitude of the transition dipole moment for a single molecule.")
    print("  ω      : The angular frequency of the incident laser pulse.")
    print("  ω_eg   : The transition angular frequency of a single molecule.")
    print("  τ      : The duration of the Gaussian laser pulse.")
    print("  exp()  : The exponential function, e^x.")

    print("\nThe final equation is:")
    # Using unicode for better readability
    equation_a = "  σ_a(ω) = C ⋅ N ⋅ |μ_eg|² ⋅ ω ⋅ exp(-(ω - ω_eg)² ⋅ τ²)"
    print(equation_a)
    print("-" * 75)

    # --- Case b) Near-neighbor interaction ---
    print("\nb) Equation for a chain with near-neighbor interactions (Frenkel Exciton Model):\n")
    print("In this case, interactions (J) create delocalized exciton states.")
    print("The absorption is dominated by a single, cooperative exciton state (k=0).")

    print("\nAdditional symbol used in the equation:")
    print("  J      : The coupling energy (interaction strength) between adjacent molecules.")
    print("  ħ      : The reduced Planck constant.")


    print("\nThe final equation is:")
    equation_b = "  σ_b(ω) = C ⋅ N ⋅ |μ_eg|² ⋅ ω ⋅ exp(-(ω - (ω_eg + 2J/ħ))² ⋅ τ²)"
    print(equation_b)


if __name__ == '__main__':
    display_absorption_equations()
```