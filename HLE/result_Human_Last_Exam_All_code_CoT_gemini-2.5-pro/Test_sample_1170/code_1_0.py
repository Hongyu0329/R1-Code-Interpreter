def solve_algebra_problem():
    """
    Solves the given problem about prime tt-ideals.

    The reasoning is as follows:
    1.  The prime tt-ideals of the category K can be understood via its Balmer spectrum. This spectrum is built from a special 'projective' prime ideal and the spectrum of the stable category, which relates to group cohomology.
    2.  We identify four basic types of prime ideals corresponding to canonical generators:
        - P_proj, generated by projective objects like kC_p(0) (object 2).
        - P_v, a cohomological prime, generated by [p-1](0) (object 3).
        - P_u, another cohomological prime, generated by the 'ghost' complex S (object 15).
        - P_T, related to the grading shift, generated by the cone of tau (object 7).
    3.  We classify each of the 20 objects:
        - Objects 1, 5, 6 generate the whole category, which is not a proper prime ideal.
        - Objects that are projectives or tensored with projectives (2, 4, 11, 12, 16, 17) generate P_proj.
        - Object 3 generates P_v.
        - Objects related to S (15, 19, 20) generate P_u.
        - Objects related to the cone C (7, 8, 9, 10, 13, 14) generate P_T.
        - Object 18 (S tensor C) generates the intersection prime P_u_T.
    4.  All objects listed above generate a prime tt-ideal. This gives the list for the first answer.
    5.  The second answer is the number of prime ideals not generated by any of these objects. Based on the four basic types, we can form intersections. The list provides generators for P_proj, P_u, P_v, P_T, and P_u_T. The missing intersections of the stable primes are P_u_v, P_v_T, and P_u_v_T. This gives a count of 3.
    """

    # Part 1: List of objects that generate a prime tt-ideal
    # Based on the reasoning above, the following objects generate prime ideals:
    # Generating P_proj: 2, 4, 11, 12, 16, 17
    # Generating P_v: 3
    # Generating P_u: 15, 19, 20
    # Generating P_T: 7, 8, 9, 10, 13, 14
    # Generating P_u_T: 18
    generating_objects = [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    generating_objects.sort()

    # Part 2: Number of prime tt-ideals not generated by these objects
    # The missing primes correspond to the intersections P_v_u, P_v_T, and P_v_u_T.
    missing_primes_count = 3

    # Format the output as specified
    first_answer = ",".join(map(str, generating_objects))
    second_answer = str(missing_primes_count)

    final_answer = f"{first_answer};{second_answer}"
    print(final_answer)

solve_algebra_problem()