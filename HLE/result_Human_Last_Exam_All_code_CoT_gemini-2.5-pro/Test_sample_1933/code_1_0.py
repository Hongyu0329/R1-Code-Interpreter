import itertools

def solve_vc_dimension():
    """
    Calculates and demonstrates the VC dimension for the given logic fragment.
    
    The logic fragment is FO_[exist, and, T, B] over a schema with 4 unary predicates.
    The definable concepts correspond to monotone conjunctions of these 4 predicates.
    The VC dimension of monotone conjunctions over d variables is d. Here d=4.
    We will demonstrate that the VC dimension is at least 4 by shattering a set of 4 points.
    
    A known combinatorial proof shows the VC dimension cannot be 5.
    If a set {x_1, ..., x_5} in {0,1}^4 were shattered by monotone conjunctions,
    then for each i, there must be a concept that separates x_i from the rest.
    This leads to a contradiction via the pigeonhole principle.
    
    Therefore, the VC dimension is exactly 4.
    """
    
    print("Step 1: Define a set S of 4 points in a 4-dimensional space.")
    # We choose the set of points with Hamming weight 3.
    # P1 P2 P3 P4
    S = {
        "p1": (0, 1, 1, 1),
        "p2": (1, 0, 1, 1),
        "p3": (1, 1, 0, 1),
        "p4": (1, 1, 1, 0),
    }
    point_names = sorted(S.keys())
    points = [S[name] for name in point_names]
    num_predicates = 4
    
    print("The set S to be shattered is:")
    for name, p in S.items():
        print(f"  {name}: {p}")
    print("-" * 30)

    print("Step 2: Iterate through all 2^4 = 16 subsets of S and show each can be selected by a formula.\n")
    
    shattered = True
    num_subsets = 0
    
    # Generate all subsets of the point names
    for i in range(len(point_names) + 1):
        for subset_names in itertools.combinations(point_names, i):
            num_subsets += 1
            subset_points = {name: S[name] for name in subset_names}
            
            print(f"Target subset: {set(subset_names) if subset_names else '{}'}")

            # Determine the formula (conjunction of predicates) for this subset.
            # The rule is: a predicate is in the conjunction if it's true for ALL points in the subset.
            if not subset_points:
                # For the empty set, we need a conjunction that is false for all points in S.
                # The conjunction of all predicates works, as each point in S has one 0.
                predicate_indices = list(range(num_predicates))
            else:
                # Bitwise AND all points in the subset to find common true predicates.
                concept_vector = [1] * num_predicates
                for p_vec in subset_points.values():
                    for j in range(num_predicates):
                        concept_vector[j] &= p_vec[j]
                predicate_indices = [j for j, val in enumerate(concept_vector) if val == 1]

            # Build the formula string for printing
            if not predicate_indices:
                formula = "TRUE (empty conjunction)"
            else:
                formula = " AND ".join([f"P{j+1}" for j in predicate_indices])
            print(f"  - Corresponding Formula: {formula}")

            # Verify the formula
            selected_points = set()
            for name, p_vec in S.items():
                satisfies = True
                for pred_idx in predicate_indices:
                    if p_vec[pred_idx] == 0:
                        satisfies = False
                        break
                if satisfies:
                    selected_points.add(name)
            
            print(f"  - Points selected by formula: {selected_points if selected_points else '{}'}")

            if selected_points != set(subset_names):
                shattered = False
                print("  - ERROR: Formula does not select the target subset.")
            else:
                print("  - VERIFIED: Formula correctly selects the target subset.")
            print("-" * 20)

    print(f"Step 3: Conclusion")
    if shattered and num_subsets == 2**len(S):
        print(f"\nAll {num_subsets} subsets of S were successfully generated by a formula.")
        print("This demonstrates that the set S of size 4 can be shattered.")
        print("Therefore, the VC dimension is at least 4.")
    else:
        print("\nFailed to shatter the set of size 4.")

    print("Combined with the theoretical proof that the VC dimension cannot exceed 4, we conclude:")
    
    final_vc_dim = 4
    # The prompt asks to output each number in the final equation.
    # Since there's no equation, we'll print the result clearly.
    print("\nFinal Calculation:")
    print(f"VC dimension = {final_vc_dim}")


if __name__ == '__main__':
    solve_vc_dimension()