import sys
import os

# This script requires the 'pygap' library to be installed.
# It also requires a working installation of the GAP system.
# We will suppress the welcome message from GAP for a cleaner output.
os.environ['PYGAP_QUIET'] = 'true'

try:
    from pygap import GAP
except ImportError:
    print("This script requires the 'pygap' library.")
    print("Please install it using: pip install pygap")
    sys.exit(1)
except Exception as e:
    print(f"An error occurred while importing pygap: {e}")
    print("Please ensure GAP is installed and configured correctly.")
    sys.exit(1)

def solve_group_problem():
    """
    Solves the problem by identifying the group G, its Schur multiplier A,
    and counting the proper subgroups of A up to isomorphism.
    """
    # Step 1: Initialize GAP
    try:
        gap = GAP()
    except Exception as e:
        print(f"Failed to start GAP. Make sure GAP is installed and accessible.")
        print(f"Error: {e}")
        sys.exit(1)

    # Step 2: Define the group G in GAP
    # The set is {1, 2, 3, 4, 5, 6, 7, 8, 9, x, y, z}.
    # We map x->10, y->11, z->12.
    a = "(1,3,2,5,4,7,6,9,8,11,10)"
    b = "(1,8,5,9)(4,10,7,6)"
    c = "(1,2)(3,12)(4,8)(5,6)(7,11)(9,10)"

    print("--- Step 1: Defining the Group G ---")
    print(f"The group G is generated by the permutations:")
    print(f"a = {a}")
    print(f"b = {b}")
    print(f"c = {c}")

    gap(f"a := {a};")
    gap(f"b := {b};")
    gap(f"c := {c};")
    gap("G := Group(a, b, c);")

    # For verification, we can check the group's structure.
    group_id = gap("StructureDescription(G);").get_py_obj()
    print(f"G is identified by GAP as the Mathieu group: {group_id}\n")

    # Step 3: Compute the Schur Multiplier A
    print("--- Step 2: Computing the Schur Multiplier A ---")
    # AbelianInvariantsMultiplier gives the direct product decomposition of the Schur multiplier
    # e.g., [2, 6] means C_2 x C_6
    invariants = gap("AbelianInvariantsMultiplier(G);").get_py_obj()

    if not invariants or (len(invariants) == 1 and invariants[0] == 1):
        group_A_str = "C_1 (the trivial group)"
    else:
        group_A_str = " x ".join([f"C_{n}" for n in invariants])

    print(f"The Schur Multiplier, A, is isomorphic to the abelian group: {group_A_str}\n")

    # Step 4: Count the isomorphism classes of proper subgroups of A
    print("--- Step 3: Counting Subgroups of A ---")
    # Create the abstract abelian group A in GAP from its invariants
    invariants_str = str(invariants)
    gap(f"A := AbelianGroup({invariants_str});")

    # Count the total number of isomorphism classes of subgroups of A
    num_iso_classes = gap("NrIsomorphismClassesSubgroups(A);").get_py_obj()
    print(f"The total number of subgroups of A (up to isomorphism) is: {num_iso_classes}")

    # The number of proper subgroups is this count minus 1 (to exclude A itself).
    num_proper_subgroups = num_iso_classes - 1

    print("A proper subgroup is any subgroup except the group itself.")
    print("The number of proper subgroups of A, up to isomorphism, is the total number of classes minus one.")
    print(f"The calculation is: {num_iso_classes} - 1 = {num_proper_subgroups}\n")

    return num_proper_subgroups

if __name__ == '__main__':
    final_answer = solve_group_problem()
    print(f"The final answer is {final_answer}.")
    # The final answer in the required format will be wrapped in <<<>>>
    # print(f"<<<{final_answer}>>>")