172[
void main() {
    // Variable Declarations for Minimum Memory Usage.
    // Total memory for variables is 172D (Decimal Digits).

    // The result of 100! has 158 digits.
    // 'digit' (1D) for each place value is the most memory-efficient storage.
    digit result[158]; // Memory: 158 * 1D = 158D

    // 'char' is a 3D type (0-999), sufficient for loop counters and size.
    char i;            // Loop counter for 2..100 and printing. Memory: 3D.
    char j;            // Inner loop counter for multiplication. Memory: 3D.
    char size;         // Tracks the number of digits in 'result'. Memory: 3D.

    // 'char' is also used for the intermediate product, which fits in 0-999.
    char temp_prod;    // Holds intermediate product value. Memory: 3D.

    // 'short' is a 2D type (0-99), which is perfect for the carry.
    short carry;       // Holds carry-over value. Memory: 2D.

    // Initial state: result = 1
    size = 1;
    result[0] = 1;

    // Calculate factorial by repeatedly multiplying the result array by i.
    for (i = 2; i <= 100; i++) {
        carry = 0;
        for (j = 0; j < size; j++) {
            // Standard bignum multiplication logic.
            temp_prod = result[j] * i + carry;
            result[j] = temp_prod % 10;
            carry = temp_prod / 10;
        }

        // If there's a carry left over, append its digits to the result array.
        while (carry > 0) {
            result[size] = carry % 10;
            size++;
            carry = carry / 10;
        }
    }

    // Print the final result from the most significant digit.
    // A 'while' loop is used to allow for an unsigned loop counter ('i')
    // to correctly decrement down to zero without causing an infinite loop.
    i = size;
    while (i > 0) {
        i--;
        printf("%d", result[i]);
    }
}
]