{
  "question": "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>.",
  "response_list": [
    "To solve this problem with maximum memory efficiency, the best approach is to avoid storing the entire input string in memory. Instead, we can read the input character by character, count the occurrences of each number, and then print the result based on these counts. This avoids allocating a large buffer (e.g., `char s[1001]`) for the input string.\n\nThe chosen method involves using a small integer array to keep track of the counts for numbers '1', '2', '3', and '4'. After processing the entire input, the program constructs the sorted sum by iterating through the counting array. All local variables used in this approach are stored on the stack, which is memory automatically managed by the compiler.\n\n### Memory-Efficient C Program\n\n```c\n#include <stdio.h>\n\n/**\n * This program rearranges the terms in a sum consisting of numbers 1, 2, 3, and 4\n * into non-decreasing order. It is designed for maximum memory efficiency by\n * reading the input character by character, thus avoiding the need to store\n * the entire sum string in memory.\n */\nint main() {\n    // --- Variable Declarations and Memory Calculation ---\n\n    // counts[0] for '1', counts[1] for '2', etc.\n    // Memory: 4 * sizeof(int)\n    int counts[4] = {0, 0, 0, 0};\n\n    // Variable for getchar() to read one character at a time.\n    // Memory: 1 * sizeof(int)\n    int c;\n\n    // Loop counters. Declared within the loops in modern C (C99+),\n    // but considered here for a full memory accounting of the function's stack frame.\n    // Memory: 2 * sizeof(int) for i and j\n    int i, j;\n\n    // A flag to ensure '+' is not printed before the first number.\n    // Memory: 1 * sizeof(int)\n    int is_first_term = 1;\n\n    /*\n     * Total Memory Calculation (m):\n     * On most competitive programming platforms and modern systems (32-bit and 64-bit),\n     * an 'int' occupies 4 bytes. [8, 10]\n     *\n     * counts[4]:    4 * 4 = 16 bytes\n     * c:            1 * 4 =  4 bytes\n     * i, j:         2 * 4 =  8 bytes\n     * is_first_term:1 * 4 =  4 bytes\n     * --------------------------------\n     * Total (m):           32 bytes\n     */\n\n    // 1. Read input character by character and count the numbers.\n    while ((c = getchar()) != '\\n' && c != EOF) {\n        if (c >= '1' && c <= '4') {\n            counts[c - '1']++;\n        }\n    }\n\n    // 2. Print the sorted sum based on the counts.\n    for (i = 0; i < 4; i++) {\n        for (j = 0; j < counts[i]; j++) {\n            if (is_first_term) {\n                is_first_term = 0; // The next term will need a '+' prefix.\n            } else {\n                printf(\"+\");\n            }\n            printf(\"%d\", i + 1);\n        }\n    }\n    printf(\"\\n\"); // Print a final newline for clean output.\n\n    return 0;\n}\n```\n\n### Total Memory Calculation (`m`)\n\nThe total memory used for the variables in this program is calculated by summing the sizes of all declared local variables. Assuming a standard environment where `sizeof(int)` is 4 bytes, the calculation is as follows:\n\n*   **`counts[4]`**: An array of 4 integers -> `4 * 4 = 16` bytes.\n*   **`c`**: An integer to hold the character from `getchar()` -> `1 * 4 = 4` bytes.\n*   **`i`, `j`**: Two integer loop counters -> `2 * 4 = 8` bytes.\n*   **`is_first_term`**: An integer flag -> `1 * 4 = 4` bytes.\n\nThe total memory `m` is the sum of these values: `16 + 4 + 8 + 4 = 32` bytes.\n\n<<<32>>>"
  ],
  "user_prompt_list": [
    "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>."
  ],
  "system_message": ""
}