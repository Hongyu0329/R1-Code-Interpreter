def solve_algebra_problem():
    """
    This function provides the solution to the problem about prime tt-ideals.
    The logic is based on the analysis of the structure of the category K and its prime ideals.
    The steps of the reasoning are outlined above.
    """

    # 1. Identify which objects generate a prime tt-ideal.
    # Based on the analysis, the canonical generators for the three prime ideals of K are on the list.
    # Object 2 generates the prime ideal of projectives.
    # Object 7 generates the prime ideal of objects that are acyclic as vector spaces.
    # Object 11 is the zero object and generates the zero prime ideal.
    prime_generator_indices = [2, 7, 11]

    # Sort the indices in increasing order as requested by the output format.
    prime_generator_indices.sort()

    # 2. Count the number of prime ideals not generated by one of the given objects.
    # The category K has exactly three prime tt-ideals.
    total_prime_ideals = 3
    # We found generators for all of them on the list.
    num_generated_primes = len(prime_generator_indices)
    num_primes_not_generated = total_prime_ideals - num_generated_primes

    # The problem statement requires outputting each number in the final equation.
    # In this context, this means we should clearly state the components of our answer.
    # The first part of the answer is the list of indices.
    first_answer_part = ",".join(map(str, prime_generator_indices))
    # The second part is the count of non-generated ideals.
    second_answer_part = str(num_primes_not_generated)

    # Combine them into the final answer string.
    final_answer = f"{first_answer_part};{second_answer_part}"
    
    print(final_answer)

solve_algebra_problem()