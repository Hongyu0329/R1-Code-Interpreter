def find_next_number_in_sequence():
    """
    Finds the next number in the sequence of 'generated numbers'.
    A number N is in the sequence if it can be expressed as N = x + sum_of_digits(x).
    """

    def sum_digits(n):
        """Calculates the sum of the digits of an integer."""
        s = 0
        for digit in str(n):
            s += int(digit)
        return s

    last_known_number = 2352
    num_to_check = last_known_number + 1

    while True:
        # Search for a generator 'x' for the current num_to_check.
        # The generator 'x' must be less than num_to_check.
        # The maximum sum of digits for a 4-digit number is for 9999 (36),
        # so we only need to check a small range of potential generators.
        potential_generator_start = max(1, num_to_check - 100)
        
        for x in range(potential_generator_start, num_to_check):
            if x + sum_digits(x) == num_to_check:
                # Found the next number and its generator
                next_number = num_to_check
                generator = x
                
                print(f"The sequence is composed of 'generated numbers', where a number N = x + (sum of digits of x).")
                print(f"The last number given is {last_known_number}.")
                print(f"The next generated number after {last_known_number} is {next_number}, which is generated by {generator}.")
                
                # Format the final equation with each digit separate
                digits_str_list = list(str(generator))
                equation = f"{generator} + {' + '.join(digits_str_list)} = {next_number}"
                
                print("\nThe final equation is:")
                print(equation)
                return next_number
        
        num_to_check += 1

# Execute the function and capture the answer
final_answer = find_next_number_in_sequence()
print(f"<<<{final_answer}>>>")