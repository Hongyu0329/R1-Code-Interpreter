def solve_maccartney_inference():
    """
    Solves the MacCartney natural logic inference problem by:
    1. Performing the mechanical compositional proof as per the instructions.
    2. Conducting a logical analysis to find the correct relationship.
    3. Printing the steps and the final correct answer.
    """
    # MacCartney's 7 relations and their symbols:
    # = : Equivalence
    # < : Forward Entailment (Premise entails Hypothesis)
    # > : Reverse Entailment (Hypothesis entails Premise)
    # ^ : Negation (contradiction)
    # | : Alternation (exhaustive)
    # v : Cover (mutually exclusive)
    # # : Independence

    # The JOIN table for composing relations (from MacCartney 2009, Table 5.4)
    relations = ['=', '<', '>', '^', '|', 'v', '#']
    #           =    <    >    ^    |    v    #  <- new relation
    join_table = {
        '=': ['=', '<', '>', '^', '|', 'v', '#'],
        '<': ['<', '<', '#', '|', '|', '#', '#'],
        '>': ['>', '#', '>', 'v', '#', 'v', '#'],
        '^': ['^', 'v', '|', '=', '>', '<', '#'],
        '|': ['|', '|', '#', '<', '|', '#', '#'],
        'v': ['v', '#', 'v', '>', '#', 'v', '#'],
        '#': ['#', '#', '#', '#', '#', '#', '#'],
    }

    def join(rel1, rel2):
        """Composes two relations using the JOIN table."""
        idx2 = relations.index(rel2)
        return join_table[rel1][idx2]

    # The task is to transform the Hypothesis (H) into the Premise (P)
    # by applying edits in left-to-right order as they appear in H.
    print("--- Mechanical Compositional Proof ---")
    print("Premise (P): 'Mark is singing a pop song by Taylor Swift'")
    print("Hypothesis (H): 'Mark is not singing a song by Michael Jackson'")
    print("\nFollowing the instruction to edit the Hypothesis from left to right to transform it into the Premise:\n")
    
    # Edits to transform H into P, in L-R order of appearance in H's text:
    edits = [
        {"desc": "Delete 'not'", "lexical_rel": "^"},
        {"desc": "'song' -> 'pop song'", "lexical_rel": ">"},
        {"desc": "'Michael Jackson' -> 'Taylor Swift'", "lexical_rel": "v"}
    ]

    # Step-by-step composition, starting with Rel(H, H)
    current_relation = '=' 
    equation_parts = []
    
    # --- Edit 1: Negation ---
    edit1 = edits[0]
    projected_rel1 = edit1["lexical_rel"]
    previous_relation = current_relation
    current_relation = join(current_relation, projected_rel1)
    equation_parts.append(projected_rel1)
    
    print(f"1. Edit: \"{edit1['desc']}\" (Lexical Relation: '{projected_rel1}')")
    print(f"   JOIN('{previous_relation}', '{projected_rel1}') = '{current_relation}'")

    # --- Edit 2: "song" -> "pop song" ---
    edit2 = edits[1]
    # Context is "Mark is singing [X] by MJ", which is upward-monotone.
    # So, projected relation is the same as the lexical relation.
    projected_rel2 = edit2["lexical_rel"] 
    previous_relation = current_relation
    current_relation = join(current_relation, projected_rel2)
    equation_parts.append(projected_rel2)

    print(f"2. Edit: \"{edit2['desc']}\" (Lexical Relation: '{projected_rel2}')")
    print(f"   JOIN('{previous_relation}', '{projected_rel2}') = '{current_relation}'")

    # --- Edit 3: "Michael Jackson" -> "Taylor Swift" ---
    edit3 = edits[2]
    # Context is "Mark is singing a pop song by [X]", which is upward-monotone.
    projected_rel3 = edit3["lexical_rel"] 
    previous_relation = current_relation
    current_relation = join(current_relation, projected_rel3)
    equation_parts.append(projected_rel3)

    print(f"3. Edit: \"{edit3['desc']}\" (Lexical Relation: '{projected_rel3}')")
    print(f"   JOIN('{previous_relation}', '{projected_rel3}') = '{current_relation}'\n")

    final_eq_str = f"JOIN( JOIN('{equation_parts[0]}', '{equation_parts[1]}'), '{equation_parts[2]}' )"
    print("Final compositional equation:")
    print(f"  Rel(H, P) = {final_eq_str} = '{current_relation}'")
    print("The symbol '#' stands for Independence.")

    # --- Logical Analysis to find the correct operator ---
    print("\n--- Logical Analysis ---")
    print("The mechanical proof yields Independence ('#'). However, the JOIN table is a sound but incomplete heuristic.")
    print("In cases like JOIN('|', 'v'), it defaults to Independence because a stronger relation cannot be guaranteed for all possible inputs.")
    print("\nTo find the operator that *correctly* identifies the entailment, we analyze the logic directly:")
    print("  - If the Premise is TRUE ('Mark is singing a pop song by Taylor Swift'),")
    print("  - then he cannot be singing a Michael Jackson song (assuming he sings one song at a time).")
    print("  - Therefore, the Hypothesis ('Mark is not singing a song by Michael Jackson') must also be TRUE.")
    print("\nThis means the Premise entails the Hypothesis (P â‡’ H).")
    print("The name for the relation where the premise entails the hypothesis is Forward Entailment.")

solve_maccartney_inference()