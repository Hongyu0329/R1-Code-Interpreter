{
  "question": "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>.",
  "response_list": [
    "### Memory-Efficient C Program\n\nThe most memory-efficient approach to solving this problem is to avoid storing the entire input string. Instead, we can process the input character by character, count the occurrences of the numbers '1', '2', and '3', and then construct the sorted output string from these counts. This method, known as counting sort, is ideal because the set of possible numbers is very small.\n\nThe program reads each character from the input. If the character is a digit, it increments a counter for that digit. The '+' characters are ignored. After counting all the numbers, it prints the sorted sum by first printing all the '1's, then all the '2's, and finally all the '3's, separated by '+' signs.\n\nHere is the C code implementing this logic:\n\n```c\n#include <stdio.h>\n\n/**\n * This program solves the \"Helpful Maths\" problem from Codeforces (339A).\n * It reads a string representing a sum of numbers (1, 2, and 3),\n * and prints the sum with the numbers sorted in non-decreasing order.\n *\n * The approach is designed to be highly memory-efficient. Instead of\n * storing the entire input string or an array of the numbers, it processes\n * the input character by character. It uses a small integer array to keep\n * a count of the occurrences of each number ('1', '2', '3').\n *\n * After counting, it iterates through the counts array and prints the\n * corresponding number the required number of times, separated by '+'.\n * This avoids allocating memory proportional to the input size.\n */\nint main() {\n    // Array to store counts of numbers 1, 2, and 3.\n    // counts[0] for '1's, counts[1] for '2's, counts[2] for '3's.\n    int counts[3] = {0};\n\n    // Variable to hold the character being read from input.\n    char c;\n\n    // Read the input string character by character.\n    // We only care about the digits '1', '2', '3'.\n    while (scanf(\"%c\", &c) == 1 && c != '\\n' && c != EOF) {\n        if (c >= '1' && c <= '3') {\n            // Increment the count for the corresponding number.\n            // '1' - '1' = 0, '2' - '1' = 1, '3' - '1' = 2.\n            counts[c - '1']++;\n        }\n    }\n\n    // Flag to correctly handle printing the '+' separator.\n    int is_first_term = 1;\n\n    // Iterate through the numbers 1, 2, and 3 in order.\n    for (int i = 0; i < 3; i++) {\n        // For each number, print it as many times as it was counted.\n        for (int j = 0; j < counts[i]; j++) {\n            // If it's not the very first term, print a '+' before the number.\n            if (!is_first_term) {\n                printf(\"+\");\n            }\n            // Print the number (i=0 -> 1, i=1 -> 2, i=2 -> 3).\n            printf(\"%d\", i + 1);\n            // After the first term is printed, all subsequent terms need a '+'.\n            is_first_term = 0;\n        }\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```\n\n### Total Memory Calculation\n\nThe total memory (m) used for the variables in this program is calculated by summing the sizes of all declared variables. Assuming a typical environment where `sizeof(int)` is 4 bytes and `sizeof(char)` is 1 byte, the breakdown is as follows:\n\n*   **`int counts[3]`**: An array of 3 integers to store the counts of numbers '1', '2', and '3'.\n    *   Memory = `3 * sizeof(int)` = `3 * 4` = **12 bytes**.\n*   **`char c`**: A single character to store the current input character.\n    *   Memory = `1 * sizeof(char)` = `1 * 1` = **1 byte**.\n*   **`int is_first_term`**: An integer used as a flag to handle the printing of the '+' symbol.\n    *   Memory = `1 * sizeof(int)` = `1 * 4` = **4 bytes**.\n*   **`int i`**: The loop counter for the outer loop.\n    *   Memory = `1 * sizeof(int)` = `1 * 4` = **4 bytes**.\n*   **`int j`**: The loop counter for the inner loop.\n    *   Memory = `1 * sizeof(int)` = `1 * 4` = **4 bytes**.\n\nThe total memory `m` is the sum of these values:\n\nm = 12 + 1 + 4 + 4 + 4 = 25 bytes.\n\n<<<25>>>"
  ],
  "user_prompt_list": [
    "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>."
  ],
  "system_message": ""
}