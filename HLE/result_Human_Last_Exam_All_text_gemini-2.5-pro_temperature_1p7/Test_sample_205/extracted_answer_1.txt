172[void main() {
    // ---- Variable Declarations ----
    // Total memory for variables: 158 + 3 + 3 + 3 + 3 + 2 = 172D.

    // result: Array to store the 158 digits of 100!.
    // Memory: 158 * sizeof(digit) = 158 * 1D = 158D.
    digit result[158];
    
    // num_digits: Current number of digits in 'result'. Max value 158.
    // 'char' (3D, 0-999) is the minimal type. Memory: 3D.
    char num_digits;
    
    // i: Outer loop counter for the factorial multiplier (2 to 100).
    // 'char' (3D, 0-999) is the minimal type. Memory: 3D.
    char i;
    
    // j: Inner loop counter for iterating through 'result' digits. Max 157.
    // 'char' (3D, 0-999) is the minimal type. Memory: 3D.
    char j;

    // product: Holds intermediate result of each digit's multiplication.
    // Max value: 9 * 100 + 99 = 999.
    // 'char' (3D, 0-999) is the minimal type. Memory: 3D.
    char product;
    
    // carry: Holds the carry-over value during multiplication. Max value 99.
    // 'short' (2D, 0-99) is the minimal type. Memory: 2D.
    short carry;

    // ---- Calculation Logic ----

    // Initialize result for 1! = 1.
    result[0] = 1;
    num_digits = 1;

    // Loop from i = 2 to 100 to compute 100!.
    for (i = 2; i <= 100; i++) {
        carry = 0;
        
        // Multiply the big number 'result' by 'i'.
        for (j = 0; j < num_digits; j++) {
            product = result[j] * i + carry;
            result[j] = product % 10;
            carry = product / 10;
        }

        // Propagate the final carry, extending the number of digits.
        while (carry > 0) {
            result[num_digits] = carry % 10;
            num_digits++;
            carry = carry / 10;
        }
    }

    // The calculation is complete.
    // 'result' array now contains the digits of 100! in reverse order.
}]