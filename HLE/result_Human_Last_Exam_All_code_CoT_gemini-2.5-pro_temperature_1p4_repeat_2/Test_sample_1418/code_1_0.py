import sympy

def find_minimal_polynomial():
    """
    This function computes the minimal polynomial of alpha over Q,
    where alpha = sqrt((2+sqrt(2))(3+sqrt(3))).
    """
    x = sympy.Symbol('x')
    y = sympy.Symbol('y')
    s2 = sympy.sqrt(2)
    s3 = sympy.sqrt(3)
    s6 = sympy.sqrt(6)

    # Let alpha^2 = beta. beta is in K = Q(sqrt(2), sqrt(3)).
    beta = (2 + s2) * (3 + s3)
    
    # The conjugates of beta over Q are obtained by applying the automorphisms from Gal(K/Q).
    # The automorphisms are generated by sigma: sqrt(2) -> -sqrt(2) and tau: sqrt(3) -> -sqrt(3).
    sigma_beta = (2 - s2) * (3 + s3)
    tau_beta = (2 + s2) * (3 - s3)
    sigmatau_beta = (2 - s2) * (3 - s3)
    
    # The minimal polynomial of beta over Q is M(y) = (y-beta)(y-sigma_beta)(y-tau_beta)(y-sigmatau_beta).
    # Expanding this polynomial shows it has rational coefficients.
    # To simplify the expansion, we pair the terms cleverly.
    
    # M(y) = [ (y - beta) * (y - sigmatau_beta) ] * [ (y - sigma_beta) * (y - tau_beta) ]
    # Part 1: (y^2 - (beta + sigmatau_beta)*y + beta*sigmatau_beta)
    # Part 2: (y^2 - (sigma_beta + tau_beta)*y + sigma_beta*tau_beta)
    # The non-rational parts cancel out.
    # We use the structure (A - B*sqrt(6)) * (A + B*sqrt(6)) = A^2 - 6*B^2
    
    A = y**2 - 12*y + 12
    B = 2*y
    
    # poly_y = (A - B*s6) * (A + B*s6) would be incorrect, as the terms are (A - B*s6) and (A + B*s6) with different A's.
    # The correct manual expansion leads to:
    # A = y**2 - 12*y + 12
    # B = 2*s6*y
    # M(y) = (A-B)(A+B) where A has different terms.
    # Correct grouping: M(y) = ( (y^2 -12y +12) - 2*y*s6 ) * ( (y^2-12y+12) + 2*y*s6)
    term_A = y**2 - 12*y + 12
    term_B_sqrt = 2*y*s6
    
    poly_y = sympy.expand(term_A**2 - term_B_sqrt**2)
    
    # The minimal polynomial for alpha is P(x) = M(x^2)
    min_poly_x = poly_y.subs(y, x**2)
    
    coeffs = sympy.Poly(min_poly_x, x).all_coeffs()
    
    print("The minimal polynomial of alpha = sqrt((2+sqrt(2))(3+sqrt(3))) over Q is P(x) = 0, where P(x) is:")
    
    equation_str = ""
    # The degree of the polynomial
    degree = sympy.degree(min_poly_x, x)
    
    for i, c in enumerate(coeffs):
        # Determine the power of x
        power = degree - i * 2 # Since it is a polynomial in x^2
        
        # Append sign
        if i > 0:
            if c > 0:
                equation_str += " + "
            else:
                equation_str += " - "
        elif c < 0:
             equation_str += "-"

        # Append coefficient (absolute value)
        coeff_abs = abs(c)
        if coeff_abs != 1 or power == 0:
            equation_str += str(coeff_abs)
        
        # Append variable and power
        if power > 0:
            equation_str += "x"
        if power > 1:
            equation_str += f"^{power}"
            
    print(equation_str)

find_minimal_polynomial()
