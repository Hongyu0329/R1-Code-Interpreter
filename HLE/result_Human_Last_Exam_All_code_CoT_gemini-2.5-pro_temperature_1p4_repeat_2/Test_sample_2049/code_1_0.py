def solve_del_pezzo_problem():
    """
    Calculates the number of isomorphism classes of del Pezzo surfaces of degree 5
    over Q with good reduction outside the prime 2.

    The solution is based on counting conjugacy classes of homomorphisms from the
    Galois group G_{Q,{2,inf}} to S_5. This Galois group is a pro-2 group,
    so we only need to consider 2-subgroups of S_5.
    """

    # nG: Number of Galois extensions of Q unramified outside {2, inf} with Galois group G.
    # Data is sourced from number field databases (e.g., LMFDB).
    nG = {
        "C1": 1,  # The trivial extension Q/Q
        "C2": 3,  # Q(i), Q(sqrt(2)), Q(sqrt(-2))
        "C4": 6,  # From database
        "V4": 1,  # Q(zeta_8)
        "D4": 9,  # From database
    }

    # cG: Number of conjugacy classes of subgroups in S_5 isomorphic to G.
    # This is a standard result from group theory.
    cG = {
        "C1": 1,  # Trivial subgroup
        "C2": 2,  # Generated by a transposition (e.g., (12)) or a double transposition (e.g., (12)(34))
        "C4": 1,  # Generated by a 4-cycle (e.g., (1234))
        "V4": 1,  # Generated by two disjoint transpositions (e.g., (12) and (34))
        "D4": 1,  # All Sylow 2-subgroups are conjugate
    }

    group_types = ["C1", "C2", "C4", "V4", "D4"]
    group_names = {
        "C1": "the trivial group C1",
        "C2": "the cyclic group C2",
        "C4": "the cyclic group C4",
        "V4": "the Klein four-group V4",
        "D4": "the dihedral group D4",
    }
    
    total_surfaces = 0
    print("Calculating the number of isomorphism classes of del Pezzo surfaces of degree 5 with good reduction away from 2.")
    print("This corresponds to counting specific Galois extensions of Q.")
    print("-" * 50)

    # Calculate contribution from each group type
    contributions = {}
    for g_type in group_types:
        num_fields = nG[g_type]
        num_embeddings = cG[g_type]
        contribution = num_fields * num_embeddings
        contributions[g_type] = contribution
        total_surfaces += contribution

    # Print the detailed breakdown of the sum
    sum_parts = []
    for g_type in group_types:
        num_fields = nG[g_type]
        num_embeddings = cG[g_type]
        contribution = contributions[g_type]
        g_name = group_names[g_type]
        print(f"For {g_name}:")
        print(f"  Number of qualifying field extensions: {num_fields}")
        print(f"  Number of non-conjugate embeddings into S5: {num_embeddings}")
        print(f"  Contribution to total: {num_fields} * {num_embeddings} = {contribution}")
        print("-" * 20)
        sum_parts.append(str(contribution))
        
    final_equation = " + ".join(sum_parts)
    print(f"The total number is the sum of these contributions:")
    print(f"Total = {final_equation} = {total_surfaces}")
    
# Execute the function to print the result
solve_del_pezzo_problem()
