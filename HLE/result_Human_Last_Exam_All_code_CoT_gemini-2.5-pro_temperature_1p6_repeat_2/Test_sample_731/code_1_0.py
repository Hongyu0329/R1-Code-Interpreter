import math

def solve():
    """
    Calculates the number of power subgroups in the semidihedral group of size 512.
    """
    group_size = 512

    # A power subgroup is a cyclic subgroup.
    # The semidihedral group of size 512 is SD_512, which is SD_{2^n} for n=9.
    if group_size <= 0 or (group_size & (group_size - 1)) != 0:
        print(f"Error: Group size {group_size} is not a power of 2.")
        return

    n = int(math.log2(group_size))

    # 1. Cyclic subgroups contained within the main cyclic subgroup <r> of order 2^(n-1).
    # The number of subgroups of a cyclic group C_m is the number of divisors of m, tau(m).
    # For C_{2^(n-1)}, the number of subgroups is tau(2^(n-1)) = (n-1) + 1 = n.
    c_r_subgroups = n

    # 2. Cyclic subgroups of order 2 generated by elements of the form sr^i.
    # These exist for even i, and there are 2^(n-2) such distinct subgroups.
    order_2_subgroups = 2**(n - 2)

    # 3. Cyclic subgroups of order 4 generated by elements of the form sr^i.
    # These exist for odd i, and there are 2^(n-3) such distinct subgroups.
    order_4_subgroups = 2**(n - 3)

    # Total number of subgroups is the sum of these three values.
    total_subgroups = c_r_subgroups + order_2_subgroups + order_4_subgroups

    print(f"The semidihedral group of size {group_size} is denoted as SD_{2^n}, where n = {n}.")
    print("A power subgroup is a cyclic subgroup.")
    print("The total number of power subgroups is calculated by summing three components:")
    print(f"1. Cyclic subgroups from the abelian subgroup C_{2**(n-1)}: {c_r_subgroups}")
    print(f"2. Cyclic subgroups of order 2 from other elements: {order_2_subgroups}")
    print(f"3. Cyclic subgroups of order 4 from other elements: {order_4_subgroups}")
    print("---")
    print(f"Total number of power subgroups = {c_r_subgroups} + {order_2_subgroups} + {order_4_subgroups} = {total_subgroups}")

solve()