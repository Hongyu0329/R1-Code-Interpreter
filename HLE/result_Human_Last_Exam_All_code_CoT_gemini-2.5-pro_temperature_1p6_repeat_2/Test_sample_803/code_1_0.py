from sympy.combinatorics.permutations import Permutation
from sympy.combinatorics.perm_groups import PermutationGroup

def illustrate_filled_group():
    """
    This function constructs a nonabelian filled group of order 18 (2 * 3^2)
    and verifies it satisfies the derived property |G:G'|=2.
    """
    print("Constructing an example of a nonabelian filled group.")
    print("Let q=3, m=2. The order is 2 * 3^2 = 18.")
    print("We choose the Sylow 3-subgroup P to be Z_3 x Z_3.")

    # P = Z_3 x Z_3 can be represented as a permutation group on 9 points.
    # The points can be identified with pairs (i,j) where i,j are in {0,1,2}.
    # A point k corresponds to (k // 3, k % 3).
    # Generator 'a' acts as translation by (0,1): (i,j) -> (i, j+1)
    a = Permutation([(0, 1, 2), (3, 4, 5), (6, 7, 8)])
    # Generator 'b' acts as translation by (1,0): (i,j) -> (i+1, j)
    b = Permutation([(0, 3, 6), (1, 4, 7), (2, 5, 8)])
    
    P = PermutationGroup(a, b)
    print(f"\nThe Sylow 3-subgroup P = Z_3 x Z_3 has order: {P.order()}")
    
    # We need an automorphism alpha of P of order 2 that acts as inversion.
    # On P, inversion sends g to g^-1. This corresponds to (i,j) -> (-i, -j).
    # We can realize this automorphism by conjugation with an element 'c'.
    # c must map point k=(i*3+j) to k'=((-i mod 3)*3 + (-j mod 3)).
    # c = (0)(1,2)(3,6)(4,8)(5,7)
    c = Permutation([(1, 2), (3, 6), (4, 8), (5, 7)])

    # Let's verify that c implements the inversion automorphism on generators.
    # c a c^-1 should be a^-1 = a^2
    # c b c^-1 should be b^-1 = b^2
    is_inverting = (c * a * c**-1 == a**-1) and (c * b * c**-1 == b**-1)
    print(f"The element 'c' implements inversion on P: {is_inverting}")

    # The full group G is the semidirect product P semi-direct Z_2,
    # which is generated by P and c.
    G = PermutationGroup(a, b, c)
    
    # Now we compute the commutator subgroup G' and check its index.
    CG = G.commutator()
    
    order_G = G.order()
    order_CG = CG.order()
    index = order_G // order_CG
    
    print("\n--- Verification ---")
    print(f"The group G has order |G| = {order_G}")
    print(f"The commutator subgroup G' has order |G'| = {order_CG}")
    
    # According to our derivation, for G to be a filled group,
    # the index of its commutator subgroup must be 2.
    print(f"The index is |G:G'| = {order_G} / {order_CG} = {index}")

    if index == 2:
        print("\nThe index is 2, which confirms that G is a filled group.")
    else:
        print("\nThe index is not 2, so this G is not a filled group.")

if __name__ == '__main__':
    illustrate_filled_group()
