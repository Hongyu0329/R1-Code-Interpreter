def solve_poynting_vector():
    """
    This script derives and prints the expression for the Poynting vector
    for a moving, charged cylindrical rod in an external electric field.
    """

    # --- Symbolic Representation ---
    # Using strings to represent the variables and unit vectors for clear output.
    # Physical constants and given variables
    mu0 = "μ₀"
    epsilon0 = "ε₀"
    rho = "ρ"
    R = "R"
    E_ext_mag = "E"
    v = "v"
    
    # Position variable and unit vectors
    r = "r"
    r_hat = "r̂"
    phi_hat = "φ̂"
    z_hat = "ẑ"

    print("--- Derivation of the Poynting Vector ---")
    print("All expressions are for a cylindrical coordinate system (r, φ, z).")
    print(f"Rod radius: {R}, Volume charge density: {rho}, Velocity: {v} {z_hat}")
    print(f"External Electric Field: {E_ext_mag} {z_hat}\n")

    # --- Step 1: Electric Field (E_total) ---
    print("--- 1. Total Electric Field (E_total = E_ext + E_rod) ---")
    
    # E_rod from Gauss's Law
    E_rod_inside = f"({rho} * {r}) / (2 * {epsilon0})"
    E_rod_outside = f"({rho} * {R}**2) / (2 * {epsilon0} * {r})"
    
    print(f"Field from rod (E_rod):")
    print(f"  - Inside (r <= R):  E_rod = ({E_rod_inside}) {r_hat}")
    print(f"  - Outside (r > R): E_rod = ({E_rod_outside}) {r_hat}\n")

    # E_total
    E_total_inside = f"({E_ext_mag}) {z_hat} + ({E_rod_inside}) {r_hat}"
    E_total_outside = f"({E_ext_mag}) {z_hat} + ({E_rod_outside}) {r_hat}"
    
    print("Total Electric Field (E_total):")
    print(f"  - Inside (r <= R):  E_total = {E_total_inside}")
    print(f"  - Outside (r > R): E_total = {E_total_outside}\n")
    
    # --- Step 2: Magnetic Field (B) ---
    print("--- 2. Magnetic Field (B) ---")
    
    # B from Ampere's Law (from current J = ρ*v)
    B_inside = f"({mu0} * {rho} * {v} * {r}) / 2"
    B_outside = f"({mu0} * {rho} * {v} * {R}**2) / (2 * {r})"
    
    print("Magnetic Field generated by the moving charge:")
    print(f"  - Inside (r <= R):  B = ({B_inside}) {phi_hat}")
    print(f"  - Outside (r > R): B = ({B_outside}) {phi_hat}\n")

    # --- Step 3: Poynting Vector (S) ---
    print("--- 3. Poynting Vector (S = (1/μ₀) * E_total x B) ---")
    print("Using cross products: ẑ x φ̂ = -r̂  and  r̂ x φ̂ = ẑ")

    # For r <= R
    S_r_inside = f"-({E_ext_mag} * {rho} * {v} * {r}) / 2"
    S_z_inside = f"({rho}**2 * {v} * {r}**2) / (4 * {epsilon0})"
    S_vector_inside = f"({S_r_inside}) {r_hat} + ({S_z_inside}) {z_hat}"

    # For r > R
    S_r_outside = f"-({E_ext_mag} * {rho} * {v} * {R}**2) / (2 * {r})"
    S_z_outside = f"({rho}**2 * {v} * {R}**4) / (4 * {epsilon0} * {r}**2)"
    S_vector_outside = f"({S_r_outside}) {r_hat} + ({S_z_outside}) {z_hat}"

    print("\nThe final Poynting vector S is:")
    print("Inside the rod (r <= R):")
    print(f"S(r <= R) = {S_vector_inside}\n")
    
    print("Outside the rod (r > R):")
    print(f"S(r > R) = {S_vector_outside}")

solve_poynting_vector()