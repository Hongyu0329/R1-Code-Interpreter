import numpy as np

# In the context of toric geometry, the log point P corresponds to a 3D cone, sigma,
# generated by the standard basis vectors.
e1 = np.array([1, 0, 0])
e2 = np.array([0, 1, 0])
e3 = np.array([0, 0, 1])

# The original cone and its dimension
original_cone_generators = np.array([e1, e2, e3])
original_dimension = np.linalg.matrix_rank(original_cone_generators)

print(f"The original space corresponds to a cone of dimension {original_dimension}.")
print("-" * 30)

# The log ideal I is generated by e1=(1,0,0) and e2=(0,1,0).
# The log blowup introduces a new ray v, which is the sum of these generators.
v_new = e1 + e2

print(f"The blowup introduces a new ray: v = {v_new}")
print("-" * 30)

# The blowup subdivides the original cone into two new cones, sigma_1 and sigma_2.
# sigma_1 is generated by e1, v_new, and e3.
# sigma_2 is generated by e2, v_new, and e3.

# Define the generator matrices for the new cones.
cone_1_generators = np.array([e1, v_new, e3])
cone_2_generators = np.array([e2, v_new, e3])

# Calculate the dimension of each new cone by finding the rank of its generator matrix.
dim_1 = np.linalg.matrix_rank(cone_1_generators)
dim_2 = np.linalg.matrix_rank(cone_2_generators)

print("The blowup results in a variety covered by two charts, corresponding to two new cones.")
print("\nChart 1 (Cone 1):")
print(f"Generators:\n{cone_1_generators}")
print(f"Dimension of Cone 1 = rank(matrix) = {dim_1}")

print("\nChart 2 (Cone 2):")
print(f"Generators:\n{cone_2_generators}")
print(f"Dimension of Cone 2 = rank(matrix) = {dim_2}")
print("-" * 30)

# The dimension of the log blowup is the maximum of the dimensions of the new cones.
final_dimension = max(dim_1, dim_2)

print("The dimension of the log blowup is the maximum dimension of the cones in the new fan.")
print(f"Dimension = max({dim_1}, {dim_2}) = {final_dimension}")