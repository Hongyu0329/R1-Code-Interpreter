{
  "question": "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>.",
  "response_list": [
    "To solve this problem with maximum memory efficiency, we must avoid storing the entire input string if possible and use the smallest appropriate data types for our variables. The problem requires us to read a sum of numbers (1, 2, 3, and 4), sort these numbers, and print the new sum.\n\nA highly memory-efficient approach is to read the input character by character instead of storing it in a large buffer. We can use a counting sort algorithm, which is ideal since the range of numbers (1-4) is very small. We will count the occurrences of each number and then construct the output string from these counts.\n\nHere is the most memory-efficient C program for this task:\n\n```c\n#include <stdio.h>\n\n/*\n * This program reads a sum consisting of numbers 1, 2, 3, and 4.\n * It then prints the sum with the numbers rearranged in non-decreasing order.\n * To be highly memory-efficient, it reads the input character by character,\n * avoiding a large input buffer, and uses the smallest necessary data types.\n */\nint main() {\n    // Use an array of 'unsigned short' to count occurrences of '1', '2', '3', '4'.\n    // The maximum length of the input string is 1000, so the max count for any\n    // number is 500, which fits in an unsigned short (0-65535).\n    // counts[0] stores the count of '1's, counts[1] for '2's, etc.\n    unsigned short counts[4] = {0};\n\n    // Variable to hold characters from getchar(). It must be an 'int'\n    // to correctly handle the End-Of-File (EOF) marker.\n    int ch;\n\n    // Read the input one character at a time until a newline or EOF is found.\n    while ((ch = getchar()) != '\\n' && ch != EOF) {\n        // We only process the digits, ignoring the '+' signs.\n        if (ch >= '1' && ch <= '4') {\n            // Convert character '1'-'4' to an array index 0-3 and increment the count.\n            counts[ch - '1']++;\n        }\n    }\n\n    // A flag to ensure '+' is not printed before the first number.\n    // 'char' is the smallest data type suitable for a boolean flag.\n    char is_first = 1;\n\n    // Loop variables; 'unsigned short' is sufficient as the loops are small.\n    unsigned short i, j;\n\n    // Iterate from 1 to 4 (represented by index i = 0 to 3).\n    for (i = 0; i < 4; i++) {\n        // Print the current number (i+1) for as many times as it was counted.\n        for (j = 0; j < counts[i]; j++) {\n            // If this isn't the first number we're printing, prepend a '+'.\n            if (!is_first) {\n                putchar('+');\n            }\n            // Print the number by converting the index back to a character.\n            putchar(i + '1');\n            // Unset the flag after the first number has been printed.\n            is_first = 0;\n        }\n    }\n    \n    // Print a final newline for clean output.\n    putchar('\\n');\n\n    return 0;\n}\n```\n\n### **Memory Usage Calculation**\n\nThe total memory (m) used by the variables in this program is calculated as follows, assuming a standard system where `sizeof(char)` is 1 byte, `sizeof(unsigned short)` is 2 bytes, and `sizeof(int)` is 4 bytes:\n\n*   **`unsigned short counts[4];`**: 4 elements × 2 bytes/element = 8 bytes\n*   **`int ch;`**: 1 element × 4 bytes/element = 4 bytes\n*   **`char is_first;`**: 1 element × 1 byte/element = 1 byte\n*   **`unsigned short i;`**: 1 element × 2 bytes/element = 2 bytes\n*   **`unsigned short j;`**: 1 element × 2 bytes/element = 2 bytes\n\n**Total Memory (m)** = 8 + 4 + 1 + 2 + 2 = 17 bytes.\n\n<<<17>>>"
  ],
  "user_prompt_list": [
    "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>."
  ],
  "system_message": ""
}