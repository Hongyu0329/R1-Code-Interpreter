def solve():
    """
    This function determines which of the 20 objects generate a prime tt-ideal
    and how many prime tt-ideals are not generated by any of these objects.

    Based on the theory of tensor-triangular geometry for the category K = D_b(E(C_p)):
    1. The prime tt-ideals are of three types: two minimal ideals (P_1 and P_p) and a family
       of maximal ideals (P_lambda for lambda in P^1(k)).
    2. Only the maximal ideals P_lambda are generated by single objects. An object generates
       such a prime if and only if its tt-support is a single point {lambda}.
    3. We determine the support of each object. An object has point support if it is a
       canonical generator (like cone(tau) or gap(...)) or a tensor product of a point-support
       object with an object whose support contains the entire P^1_k line.
    
    The list of objects with point support is calculated.
    The number of types of prime ideals not generated by any listed object is counted.
    This corresponds to the minimal primes P_1 and P_p.
    """

    # List of objects whose support is a single point in P^1(k)
    prime_generators = [
        5,  # gap^1(rad(kC_p))
        6,  # gap^{p-1}(rad(kC_p))
        7,  # cone(tau)
        8,  # cone(tau)^2
        9,  # cone(tau)^{p-1}
        10, # cone(tau)^p
        11, # kC_p(0) tensor cone(tau)
        12, # rad(kC_p) tensor cone(tau)
        13, # gap^1(rad(kC_p)) tensor cone(tau)
        14, # gap^{p-1}(rad(kC_p)) tensor cone(tau)
        18, # S tensor cone(tau)
        19, # S tensor gap^1(rad(kC_p))
        20  # S tensor gap^{p-1}(rad(kC_p))
    ]
    prime_generators.sort()
    
    # The two minimal prime ideals are not generated by any object on the list.
    non_generated_primes_count = 2

    print(','.join(map(str, prime_generators)) + ";" + str(non_generated_primes_count))

solve()