def check_filled_nilpotent(group_name, sylow_subgroup_data):
    """
    Checks if a finite nilpotent group is filled based on its Sylow subgroups.

    Args:
        group_name (str): The name of the group for display purposes.
        sylow_subgroup_data (list): A list of tuples, where each tuple is
                                    (p, d) for a Sylow p-subgroup.
                                    p is the prime.
                                    d is the minimum number of generators for that subgroup.
    """
    print(f"Checking group: {group_name}")
    
    # The set of pairs (p, d) for which the elementary abelian group (C_p)^d is NOT filled.
    # d is the minimum number of generators for the Sylow p-subgroup.
    exceptional_pairs = {
        (2, 2), (2, 3), (2, 4), 
        (3, 2), (3, 3), 
        (5, 2), 
        (7, 2)
    }

    is_filled = True
    for p, d in sylow_subgroup_data:
        pair = (p, d)
        if pair in exceptional_pairs:
            print(f"  - Sylow {p}-subgroup has p={p}, d={d}. This pair IS in the exception list.")
            is_filled = False
        else:
            print(f"  - Sylow {p}-subgroup has p={p}, d={d}. This pair is NOT exceptional.")

    if is_filled:
        print(f"Result: {group_name} is a filled group.\n")
    else:
        print(f"Result: {group_name} is NOT a filled group.\n")

if __name__ == "__main__":
    # Example 1: Cyclic group C_72 = C_8 x C_9
    # Sylow 2-subgroup is C_8, which is cyclic, so it has 1 generator (d=1).
    # Sylow 3-subgroup is C_9, which is cyclic, so it has 1 generator (d=1).
    check_filled_nilpotent("C_72", [(2, 1), (3, 1)])

    # Example 2: The Quaternion group Q_8
    # Q_8 is a 2-group. It can be generated by 2 elements (i, j). So d=2.
    check_filled_nilpotent("Q_8", [(2, 2)])

    # Example 3: The group C_3 x C_3
    # This is a 3-group. It is elementary abelian and requires 2 generators. So d=2.
    check_filled_nilpotent("C_3 x C_3", [(3, 2)])

    # Example 4: The Dihedral group D_8 (symmetries of a square)
    # D_8 is a 2-group. It can be generated by 2 elements (a rotation and a flip). So d=2.
    check_filled_nilpotent("D_8", [(2, 2)])

    # Example 5: A more complex nilpotent group G = P1 x P2
    # where P1 is a 5-group needing 3 generators (d=3)
    # and P2 is a 7-group needing 1 generator (d=1).
    check_filled_nilpotent("Hypothetical Group G", [(5, 3), (7, 1)])