```python
import sympy

def solve_coprime_factorization():
    """
    This function defines and prints the matrices for the left coprime factorization
    H(s) = D(s)^-1 * N(s) for the given transfer function.
    """
    # Define the symbolic variable 's'
    s = sympy.Symbol('s')

    # Define the denominator matrix D(s)
    D_s = sympy.Matrix([
        [1, s - 1],
        [0, s**2 - 1]
    ])

    # Define the numerator matrix N(s)
    N_s = sympy.Matrix([
        [1, 1],
        [2, 0]
    ])

    # Print the results in a structured format
    print("A left coprime factorization is H(s) = D(s)^-1 * N(s) where:")
    
    print("\nD(s) =")
    sympy.pprint(D_s)
    
    print("\nN(s) =")
    sympy.pprint(N_s)
    
    print("\nIn equation form, H(s) = D(s)^-1 * N(s):")
    
    # Printing D(s) element-wise
    print(f"D(s) = [[{D_s[0,0]}, {D_s[0,1]}],")
    print(f"        [{D_s[1,0]}, {D_s[1,1]}]]")
    
    # Printing N(s) element-wise
    print(f"N(s) = [[{N_s[0,0]}, {N_s[0,1]}],")
    print(f"        [{N_s[1,0]}, {N_s[1,1]}]]")

if __name__ == '__main__':
    solve_coprime_factorization()
```