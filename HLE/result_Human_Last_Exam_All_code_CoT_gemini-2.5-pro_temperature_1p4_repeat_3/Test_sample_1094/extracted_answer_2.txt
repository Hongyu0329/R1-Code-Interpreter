```python
import math

def calculate_normalized_loss(i):
    """
    Calculates the normalized AC loss 2*pi*Q/(mu_0*Ic^2) for an elliptical superconductor.
    The formula is valid for i = Im/Ic < 1.

    Args:
        i (float): The ratio of the transport current amplitude to the critical current, Im/Ic.

    Returns:
        float: The normalized loss. Returns None if input is invalid.
    """
    if not 0 <= i < 1:
        print(f"Error: Input i={i} is out of the valid range [0, 1).")
        return None

    # The formula becomes 0 for i=0, handled here to avoid potential log(1) floating point issues.
    if i == 0:
        return 0.0

    # The normalized loss is 2 * f(i), where f(i) is Norris's loss function:
    # f(i) = (1 - i) * ln(1 - i) + (1 + i) * ln(1 + i) - i^2
    term1 = (1 - i) * math.log(1 - i)
    term2 = (1 + i) * math.log(1 + i)
    term3 = -i**2
    
    normalized_loss = 2 * (term1 + term2 + term3)
    return normalized_loss

# Main script execution
if __name__ == "__main__":
    print("This script calculates the normalized AC loss in an elliptical superconductor carrying a transport current.")
    print("The normalized loss is given by the formula: 2*pi*Q / (mu_0 * Ic^2)")
    print("where i = Im/Ic is the ratio of current amplitude to the critical current (for i < 1).\n")

    # As requested, here is the final equation with each number explicitly shown.
    # The formula is: C1 * ( (C2 - i)*ln(C2 - i) + (C3 + i)*ln(C3 + i) + (C4)*i**P1 )
    c1 = 2
    c2 = 1
    c3 = 1
    c4 = -1
    p1 = 2
    
    print("The final equation is:")
    print(f"Normalized Loss = {c1} * (({c2} - i)*ln({c2} - i) + ({c3} + i)*ln({c3} + i) + ({c4})*i**{p1})\n")

    # Demonstrating the calculation for a few values of i.
    print("Example calculations:")
    example_i_values = [0.25, 0.5, 0.75, 0.95]
    for i_val in example_i_values:
        loss = calculate_normalized_loss(i_val)
        if loss is not None:
            print(f"For i = {i_val:.2f}, Normalized Loss = {loss:.6f}")
```