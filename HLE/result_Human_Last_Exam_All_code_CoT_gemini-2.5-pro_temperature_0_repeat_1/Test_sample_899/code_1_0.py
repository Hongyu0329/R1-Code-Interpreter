import sympy
from sympy import Poly, groebner, expand, Symbol
from sympy.polys.domains import FF

def main():
    """
    This script classifies a list of rings into isomorphism classes.
    It analyzes each ring, determines its structure, and groups isomorphic rings together.
    """
    # Base field F_7
    F7 = FF(7)
    x, y = sympy.symbols('x y')

    # This dictionary will store the isomorphism classes.
    # The key is a string representing the class, and the value is a list of ring letters.
    classes = {}

    def add_to_class(class_id, ring_letter):
        if class_id not in classes:
            classes[class_id] = []
        classes[class_id].append(ring_letter)

    print("Analyzing the rings...\n")

    # Ring A: F_7[x,y]/(-x^3 - x^2 + y^2 + 3*x - 1)
    # Equation: y^2 = x^3 + x^2 - 3x + 1
    f_A_orig = Poly(x**3 + x**2 - 3*x + 1, x, domain=F7)
    print("Ring A is defined by y^2 = (1)x^3 + (1)x^2 + (-3)x + (1)")
    # Transform to y^2 = x'^3 + Ax' + B by setting x' = x + 5
    x_new = Symbol('x_new')
    f_A_transformed = expand(f_A_orig.as_expr().subs(x, x_new - 5))
    p_A_transformed = Poly(f_A_transformed, x_new, domain=F7)
    # In F_7, this is x_new^3 - x_new = x_new^3 + 6x_new
    print(f"Ring A transforms to y^2 = (1)*{x_new}^3 + (6)*{x_new}. The j-invariant is 6.")
    add_to_class('j=6_curve', 'A')

    # Ring B: F_7[x,y]/(-x^3 - 2*x^2 + y^2 + 2*x - 3)
    # Equation: y^2 = x^3 + 2x^2 - 2x + 3
    f_B_orig = Poly(x**3 + 2*x**2 - 2*x + 3, x, domain=F7)
    print("\nRing B is defined by y^2 = (1)x^3 + (2)x^2 + (-2)x + (3)")
    # Transform by setting x' = x + 3
    f_B_transformed = expand(f_B_orig.as_expr().subs(x, x_new - 3))
    p_B_transformed = Poly(f_B_transformed, x_new, domain=F7)
    # In F_7, this is x_new^3 - 4x_new = x_new^3 + 3x_new
    print(f"Ring B transforms to y^2 = (1)*{x_new}^3 + (3)*{x_new}. The j-invariant is 6.")
    # A and B are isomorphic if -1 = -4/u^4, i.e., u^4 = 4.
    # 3^4 = 81 = 4 mod 7. A solution exists.
    print("Rings A and B are isomorphic because their curves are isomorphic over F_7.")
    add_to_class('j=6_curve', 'B')

    # Ring C: F_7[x]/(5*x^2 + x + 1)
    p_C = Poly(5*x**2 + x + 1, x, domain=F7)
    factors_C = sympy.factor(p_C)
    print(f"\nRing C is F_7[x]/({p_C.as_expr()}).")
    print(f"The polynomial factors as: {factors_C}") # 5*(x + 4)*(x + 6) = 5*(x-3)*(x-1)
    print("Since it has two distinct linear factors, by CRT, Ring C is isomorphic to F_7 x F_7.")
    add_to_class('F7xF7', 'C')

    # Ring D: F_7[x,y]/(3x^3+x^2y+5x-1, y^5+2xy-2, 2x^4+2y^3-x-1)
    p1_D = Poly(3*x**3 + x**2*y + 5*x - 1, x, y, domain=F7)
    p2_D = Poly(y**5 + 2*x*y - 2, x, y, domain=F7)
    p3_D = Poly(2*x**4 + 2*y**3 - x - 1, x, y, domain=F7)
    print(f"\nRing D is F_7[x,y]/I where I is generated by:")
    print(f"  f1 = {p1_D.as_expr()}")
    print(f"  f2 = {p2_D.as_expr()}")
    print(f"  f3 = {p3_D.as_expr()}")
    gb_D = groebner([p1_D, p2_D, p3_D], order='lex')
    print(f"The Groebner basis of the ideal is {[p.as_expr() for p in gb_D]}.")
    print("Since the basis is {1}, the ideal is the whole ring, so Ring D is the zero ring {0}.")
    add_to_class('{0}', 'D')

    # Ring E: F_7[x]/(3x^2 + x + 6)
    p_E = Poly(3*x**2 + x + 6, x, domain=F7)
    factors_E = sympy.factor(p_E)
    print(f"\nRing E is F_7[x]/({p_E.as_expr()}).")
    print(f"The polynomial factors as: {factors_E}")
    print("Since the polynomial is irreducible of degree 2, Ring E is the field F_49.")
    add_to_class('F49', 'E')

    # Ring F: F_7[x]/(x^2)
    p_F = Poly(x**2, x, domain=F7)
    print(f"\nRing F is F_7[x]/({p_F.as_expr()}).")
    print("This ring has nilpotent elements (x != 0 but x^2 = 0).")
    add_to_class('F7[x]/x^2', 'F')

    # Ring G: F_7[x]/(x^2 + 3x + 4)
    p_G = Poly(x**2 + 3*x + 4, x, domain=F7)
    factors_G = sympy.factor(p_G)
    print(f"\nRing G is F_7[x]/({p_G.as_expr()}).")
    print(f"The polynomial factors as: {factors_G}") # (x+5)^2 = (x-2)^2
    print("The ring is isomorphic to F_7[u]/u^2 by setting u = x-2, so it is isomorphic to Ring F.")
    add_to_class('F7[x]/x^2', 'G')

    # Ring H: F_7[[x]]/((6x^2+5x+4)/(x+4))
    # This is isomorphic to F_7[x]/(6x^2+5x+4) because x+4 is a unit in F_7[[x]]
    p_H = Poly(6*x**2 + 5*x + 4, x, domain=F7)
    factors_H = sympy.factor(p_H)
    print(f"\nRing H is isomorphic to F_7[x]/({p_H.as_expr()}).")
    print(f"The polynomial factors as: {factors_H}")
    print("Since the polynomial is irreducible of degree 2, Ring H is the field F_49.")
    add_to_class('F49', 'H')

    # Ring I: F_7[x,y]/(-x^3 - 3x^2 + y^2 - 3x - 2)
    # Equation: y^2 = x^3 + 3x^2 + 3x + 2
    print("\nRing I is defined by y^2 = (1)x^3 + (3)x^2 + (3)x + (2)")
    # Note that x^3+3x^2+3x+2 = (x+1)^3 + 1
    print("This simplifies to y^2 = (x+1)^3 + 1.")
    print("The j-invariant is 0. Since j(I)=0 != j(A)=6, Ring I is not isomorphic to A or B.")
    add_to_class('j=0_curve', 'I')

    # Ring J: O_{A^1_F7, (x+1)}
    print("\nRing J is the localization of F_7[x] at the ideal (x+1).")
    print("It is an infinite-dimensional DVR and not a finitely generated F_7-algebra.")
    print("This makes it non-isomorphic to rings A, B, and I.")
    add_to_class('DVR', 'J')

    # Ring K: F_49
    print("\nRing K is the field F_49 by definition.")
    add_to_class('F49', 'K')

    # Ring L: F_7 x F_7
    print("\nRing L is the product ring F_7 x F_7 by definition.")
    add_to_class('F7xF7', 'L')

    # --- Final Classification ---
    print("\n" + "="*30)
    print("Final Isomorphism Classes:")
    print("="*30)
    
    class_list = [sorted(v) for v in classes.values()]
    class_list.sort(key=lambda c: c[0])
    
    final_string = "[" + ", ".join(["".join(c) for c in class_list]) + "]"
    
    print(final_string)

if __name__ == '__main__':
    main()