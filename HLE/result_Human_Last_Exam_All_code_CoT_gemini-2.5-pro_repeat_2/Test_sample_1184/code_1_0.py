import textwrap

def get_calcium_channel_hotspots():
    """
    This script identifies and prints key amino acid residues and regions in the
    human voltage-gated calcium channel beta-1 subunit (CACNB1) responsible for
    interaction with and modulation of the alpha-1 subunit.

    The residue numbering corresponds to the human CACNB1 isoform 1 sequence
    (UniProt ID: Q02641-1).
    """

    # --- Data for Question 1: Interaction Hotspots ---
    # These residues are in the Beta Interaction Domain (BID), located in the
    # core Guanylate Kinase-like (GK) domain of the beta-1 subunit.
    # They form a binding pocket for the Alpha Interaction Domain (AID) of the alpha-1 subunit.
    interaction_hotspots = {
        'Y194': 'Forms part of the hydrophobic binding groove for the AID helix.',
        'I214': 'Contributes to the hydrophobic floor of the binding pocket.',
        'M216': 'A key hydrophobic contact point for the AID helix.',
        'W239': 'A critical, highly conserved residue that forms extensive hydrophobic interactions with the AID.',
        'K243': 'Forms a crucial salt bridge with a conserved Glutamate (E) residue on the alpha-1 AID.',
        'V262': 'Contributes to the hydrophobic surface of the binding groove.',
        'V301': 'Part of the hydrophobic pocket that stabilizes the AID helix.',
        'I303': 'Another key hydrophobic contact point within the binding groove.'
    }

    # --- Data for Question 2: Gating Modulation Hotspots ---
    # These are regions known to fine-tune the channel's properties, such as the
    # speed and voltage-dependence of opening and closing (gating).
    gating_modulation_hotspots = {
        'N-Terminus (Residues 1-47)':
            "This variable region is a primary determinant of gating modulation. "
            "Its presence significantly influences the kinetics and voltage-dependence of both "
            "activation and inactivation. Deletion of this region alters channel function dramatically.",
        'SH3-GK Linker (Approx. Residues 108-175)':
            "This flexible linker connects the SH3 and GK domains. Its length and amino acid "
            "composition are known to fine-tune the speed of voltage-dependent inactivation of the channel."
    }

    # --- Printing the Results ---

    print("=" * 80)
    print("Analysis of Human CaV beta-1 Subunit (CACNB1) Hotspots")
    print("=" * 80)

    # Question 1
    print("\n[1] Hotspots for Interaction with alpha-1 Subunit (AID-BID Binding)\n")
    print("The following residues in the beta-1 subunit's Guanylate Kinase-like (GK) domain are critical for high-affinity binding to the alpha-1 subunit:\n")
    for residue, description in interaction_hotspots.items():
        print(f"  - Residue: {residue}")
        # textwrap is used for clean formatting of longer description lines
        wrapped_desc = textwrap.fill(description, width=75, initial_indent='    ', subsequent_indent='    ')
        print(wrapped_desc)
        print()

    # Question 2
    print("\n[2] Hotspots for Fine-Tuning Gating Properties of alpha-1 Subunit\n")
    print("Gating modulation is controlled by larger, more flexible regions rather than single residues. The key regions are:\n")
    for region, description in gating_modulation_hotspots.items():
        print(f"  - Region: {region}")
        wrapped_desc = textwrap.fill(description, width=75, initial_indent='    ', subsequent_indent='    ')
        print(wrapped_desc)
        print()
    print("-" * 80)


if __name__ == "__main__":
    get_calcium_channel_hotspots()
    # The final answer content is the output generated by the function call above.
    # To generate the final output string, we can capture the print statements.
    import io
    from contextlib import redirect_stdout

    f = io.StringIO()
    with redirect_stdout(f):
        get_calcium_channel_hotspots()
    output = f.getvalue()
    # We remove the final answer marker from the captured output if it's there
    # and then add it at the very end.
    final_answer = "<<<" + output.strip() + ">>>"
    # To avoid printing the answer twice (once by the call, once by the final print)
    # we just print the final formatted answer here.
    # However, the user instruction is to just have the code block.
    # The final answer will be extracted from the code's output.
    # So the main block will just run the function.
    # For the final submission, I will construct the <<<answer>>> block manually.
