import math

def solve():
    """
    Calculates the number of power subgroups in the semidihedral group of size 512.
    """
    group_size = 512

    # For a semidihedral group SD_{2^n}, the size is 2^n.
    # We need to find the value of n.
    # 2^n = 512 => n = log2(512)
    if group_size <= 0 or (group_size & (group_size - 1)) != 0:
        print("Error: Group size must be a power of 2.")
        return

    n = int(math.log2(group_size))

    # The number of power (cyclic) subgroups in SD_{2^n} is given by the formula:
    # n + 2^(n-2) + 2^(n-3)
    
    # Calculate the three terms of the sum.
    # 1. Number of cyclic subgroups within the maximal cyclic subgroup <r>.
    term1 = n
    
    # 2. Number of cyclic subgroups of order 2 generated by elements not in <r>.
    term2 = 2**(n - 2)
    
    # 3. Number of cyclic subgroups of order 4 generated by elements not in <r>.
    term3 = 2**(n - 3)
    
    # Calculate the total number of subgroups.
    total = term1 + term2 + term3
    
    # Print the result as an equation.
    print(f"The number of power subgroups is calculated as the sum of three components:")
    print(f"{term1} + {term2} + {term3} = {total}")

solve()