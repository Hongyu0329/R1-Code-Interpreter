# This script determines which plot's color palette is suitable for monochromatic vision.
#
# Plan:
# 1. For a plot to be interpretable by someone with monochromatic vision, the
#    colors used for different categories must have distinct lightness values.
# 2. We will define the color palettes for each plot as specified in the R code.
# 3. We will convert each color from its hex code to the CIELAB color space,
#    which has a component L* representing perceptual lightness (0=black, 100=white).
# 4. We will examine the L* values for each palette. A palette is suitable only if
#    all its L* values are distinct and well-separated.
# 5. The script will print the L* values for each palette and then output the
#    final answer, which is the number of the suitable plot.
#
# Note: This script requires the 'colormath' library.
# You can install it by running: pip install colormath

import sys
try:
    from colormath.color_objects import sRGBColor, LabColor
    from colormath.color_conversions import convert_color
except ImportError:
    print("Error: The 'colormath' library is not installed.")
    print("Please install it by running: pip install colormath")
    sys.exit(1)

def get_lab_lightness(hex_code):
    """Converts a hex color string to a CIELAB L* value."""
    rgb = sRGBColor.new_from_rgb_hex(hex_code)
    lab = convert_color(rgb, LabColor)
    return lab.lab_l

def analyze_palettes():
    """
    Analyzes the lightness values of the palettes from the plots and prints the result.
    """
    # Palettes as defined or generated by the R code.
    palettes = {
        1: ["#F8766D", "#A3A500", "#00BF7D", "#00B0F6", "#E76BF3"], # Also for plot 6
        2: ["#00429D", "#73A2C6", "#FFFFFF", "#E68469", "#A50026"],
        3: ["#999999", "#969A7C", "#7FA079", "#5AA391", "#00A3B5"],
        4: ["#A29292", "#9FA388", "#93A886", "#85AB91", "#72ADA5"]
    }

    print("Analyzing lightness (L*) of color palettes for each plot:")
    print("-" * 60)
    suitable_plots = []

    # Analyze plots 1, 2, 3, 4, 6
    for plot_num in sorted(palettes.keys()):
        pal = palettes[plot_num]
        lightness_values = [round(get_lab_lightness(color), 2) for color in pal]
        
        # Check for suitability: all values should be distinct.
        # A small tolerance is used for floating point comparisons.
        # For practical purposes, L* values should differ by more than ~2-3 to be easily distinguishable.
        unique_lightness_count = len(set(lightness_values))
        is_suitable = True
        # Check if values are nearly identical (e.g. default ggplot palette)
        if max(lightness_values) - min(lightness_values) < 5.0:
             is_suitable = False
        
        plot_label = f"Plot {plot_num}"
        if plot_num == 1:
            plot_label = "Plot 1 (and 6)"

        print(f"{plot_label}:")
        print(f"  Lightness (L*) values: {lightness_values}")
        if not is_suitable:
            print("  Result: Not suitable. Lightness values are nearly identical.")
        else:
            print("  Result: Suitable. Lightness values are distinct and well-separated.")
            suitable_plots.append(plot_num)
        print()

    # Analyze Plot 5 separately
    # The R code for plot 5 uses `sample(c(20,50,70,20,90))` for lightness.
    # This guarantees that two of the five colors will have the same lightness value (20).
    plot_5_lightness = [20, 90, 50, 70, 20] # An example realization
    print("Plot 5:")
    print(f"  Lightness (L*) values (from definition): {plot_5_lightness}")
    print("  Result: Not suitable. Contains duplicate lightness values (20).")
    print()
    print("-" * 60)

    # Final Conclusion
    if not suitable_plots:
        final_answer = "none"
    else:
        final_answer = ",".join(map(str, sorted(suitable_plots)))

    print(f"The plot that uses a color palette interpretable for someone with full monochromatic vision is: {final_answer}")


if __name__ == "__main__":
    analyze_palettes()