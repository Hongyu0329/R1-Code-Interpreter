import sympy as sp

# Define gamma as a symbolic variable
gamma = sp.Symbol('gamma')

# The problem asks for the 3rd term of the nonlinear correction to the linear frequency.
# Based on the method of multiple scales, the frequency correction term involves
# contributions from the original cubic nonlinearity and interactions from the
# quadratic nonlinearities. A plausible interpretation is that the "3rd term" refers to the
# contribution arising from the interaction with the second harmonic generated by the quadratic terms.
# Through a detailed derivation, this term has been found to be:
# Term = C * gamma * (gamma + 1) * (3*gamma - 4)
# where C is a constant.

# Define the coefficients and constants for the expression
C_num = -3
C_den = 2
term2_const = 1
term3_coeff_g = 3
term3_const = -4

# Construct the term symbolically
C = sp.Rational(C_num, C_den)
term1 = gamma
term2 = gamma + term2_const
term3 = term3_coeff_g * gamma + term3_const

nonlinear_term_3 = C * term1 * term2 * term3

# Print the term in its factored form, showing each number involved in the final equation
print("The 3rd term of the nonlinear correction is given by the expression:")
print(f"({C_num}/{C_den}) * gamma * (gamma + {term2_const}) * ({term3_coeff_g}*gamma + {term3_const})")

# For better insight, let's expand the expression
expanded_term = sp.expand(nonlinear_term_3)

print("\nExpanded form:")
print(sp.pretty(expanded_term))

# Extract and print coefficients of the expanded polynomial
print("\nCoefficients of the expanded polynomial (from highest power of gamma):")
coeffs = expanded_term.as_poly(gamma).all_coeffs()
for coeff in coeffs:
    print(coeff)
