import itertools

def demonstrate_vc_dimension():
    """
    This script demonstrates that the VC dimension of the given logic fragment is 4.

    The logic is explained in the text above. This script focuses on proving the
    lower bound (VC-dim >= 4) by constructing a model that shatters a set of 4 points.
    It also explains why the VC dimension cannot be greater than 4.
    """
    
    num_predicates = 4
    shatter_size = 4

    # Let X be the set of points we want to shatter.
    # We use integers {0, 1, 2, 3} to represent the points {x_1, x_2, x_3, x_4}.
    X = set(range(shatter_size))

    # We define a model by specifying the extensions of the 4 predicates P_1, P_2, P_3, P_4.
    # To shatter X, we define the extension of predicate P_i as the set of all points in X except point i.
    # Note: Predicates are 1-indexed (P_1 to P_4), points are 0-indexed (0 to 3).
    # P_1 corresponds to index 0, P_2 to index 1, etc.
    predicates = [X - {i} for i in range(num_predicates)]

    print(f"Number of unary predicates k = {num_predicates}")
    print(f"Attempting to shatter a set X of size d = {shatter_size}")
    print(f"X = {sorted(list(X))}")
    print("\n--- Model Definition ---")
    for i, p_set in enumerate(predicates):
        print(f"Extension of Predicate P_{i+1}: {sorted(list(p_set))}")

    # Generate all 2^d possible subsets of X. These are the subsets we need to form.
    all_subsets = []
    for i in range(2**shatter_size):
        subset = set()
        for j in range(shatter_size):
            if (i >> j) & 1:
                subset.add(j)
        all_subsets.append(subset)

    print("\n--- Shattering Verification ---")
    print(f"To shatter X, we must be able to generate all {len(all_subsets)} of its subsets.")
    
    print("\n--- How to Generate Each Subset ---")
    # For each subset, we find the formula that generates it.
    all_subsets_generated = True
    for subset in sorted(list(all_subsets), key=len):
        # The formula for a subset Y is the conjunction of predicates P_i(x) for all points x_i NOT in Y.
        points_not_in_subset = X - subset
        
        # Build the formula string
        formula_parts = [f"P_{point_idx+1}(x)" for point_idx in sorted(list(points_not_in_subset))]
        formula = " AND ".join(formula_parts)
        if not formula:
            formula = "TRUE (empty conjunction defines the whole set)"
        
        # Verify that this formula correctly constructs the subset
        reconstructed_set = set(X)
        for point_idx in points_not_in_subset:
            reconstructed_set &= predicates[point_idx]
        
        if reconstructed_set != subset:
            all_subsets_generated = False
            print(f"Error: Could not generate subset {subset}")
            break

        print(f"Subset {str(sorted(list(subset))):<18} is generated by: {formula}")

    if not all_subsets_generated:
        print("\nShattering failed with this construction.")
    else:
        print("\nSuccess! The set X can be shattered.")
        print("This proves that the VC dimension is at least 4.")

    print("\n--- Final Conclusion ---")
    final_vc_dim = 4
    print("The VC dimension is the size of the largest set that can be shattered.")
    print("We have shown that a set of size 4 can be shattered, so VC-dim >= 4.")
    print("We also know that with 4 predicates, we can define at most 2^4 = 16 concepts.")
    print("To shatter a set of size 5, we would need 2^5 = 32 concepts, which is not possible.")
    print("Therefore, VC-dim <= 4.")
    print(f"\nCombining the upper and lower bounds, the final equation is:")
    print(f"VC dimension = {final_vc_dim}")

demonstrate_vc_dimension()