import sys

# This script determines the molecular point group from a SMILES string.
# It uses the pybel (OpenBabel) and pyscf libraries.
# Please install them if you haven't already:
# pip install openbabel-wheel pyscf

try:
    import pybel
    from pyscf import gto
except ImportError as e:
    print(f"A required library is missing: {e.name}")
    print("Please install the required libraries using: pip install openbabel-wheel pyscf")
    sys.exit(1)

def find_symmetry_from_smiles(smiles_string):
    """
    Parses a SMILES string, generates a 3D structure, and determines its point group.

    Args:
        smiles_string (str): The SMILES representation of the molecule.

    Returns:
        str: The determined point group, or an error message.
    """
    print(f"Analyzing molecule with SMILES: {smiles_string}")
    
    try:
        # Use pybel (OpenBabel) to robustly parse the SMILES string
        mol_ob = pybel.readstring("smi", smiles_string)
        
        # Add hydrogens and generate a 3D conformation using a force field
        mol_ob.addh()
        mol_ob.make3D()
        
    except Exception:
        # Check if the SMILES string could be read at all
        if 'mol_ob' not in locals():
            return "Error: The provided SMILES string is invalid and could not be parsed."
        # If read but failed 3D generation, we can still try to proceed
        print("Warning: 3D coordinate generation may have had issues, but proceeding.")

    # Extract atomic symbols (as atomic numbers) and coordinates for PySCF
    atoms_for_pyscf = []
    for atom in mol_ob.atoms:
        atoms_for_pyscf.append([atom.atomicnum, atom.coords])
        
    if not atoms_for_pyscf:
        return "Error: Could not extract atomic data from the SMILES string."

    # Use PySCF to build a molecule object and find its symmetry
    mol_pyscf = gto.Mole()
    mol_pyscf.atom = atoms_for_pyscf
    mol_pyscf.charge = 0
    mol_pyscf.spin = 0 # Assuming a singlet state

    # Build the molecule and detect symmetry. A looser tolerance is often needed
    # for coordinates generated by general-purpose force fields.
    try:
        mol_pyscf.build(symmetry=True, symmetry_tol=1e-2)
        return mol_pyscf.groupname
    except Exception as e:
        return f"Error during symmetry analysis in PySCF: {e}"

if __name__ == "__main__":
    # The SMILES string of the molecule in question
    smiles = 'C#Cc1cc2ccc3c(C#C)cc4ccc5c(C#C)cc6ccc1c7c2c3c4c5c67'
    
    # Get the symmetry group
    point_group = find_symmetry_from_smiles(smiles)
    
    # Print the final result
    print("\n" + "="*30)
    print(f"Final determined point group: {point_group}")
    print("="*30)
