172[
// This program calculates 100! for the Wuxing computer.
// It is optimized for minimum variable memory usage.
//
// Total variable memory calculation:
// -----------------------------------------------------------------
// TYPE           VARIABLE   MAX VALUE   SMALLEST TYPE   SIZE (D)
// -----------------------------------------------------------------
// digit[158]     result     N/A         digit           158 * 1 = 158
// char           size       158         char (0-999)    3
// char           i          100         char (0-999)    3
// char           j          157         char (0-999)    3
// short          carry      99          short (0-99)    2
// char           product    999         char (0-999)    3
// -----------------------------------------------------------------
// TOTAL MEMORY (z): 172D

// Global array to store the large integer result.
// 100! has 158 decimal digits. 'digit' is the most memory-efficient
// type for this (1D per digit).
digit result[158];

// Global variable to track the number of digits in 'result'.
// The number of digits will not exceed 158.
// 'char' (0-999) is the smallest suitable type (3D).
char size;

void main() {
    // Loop counter for factorial multiplication (i = 2 to 100).
    // The value reaches 100, so 'char' (0-999) is the smallest suitable type (3D).
    char i;

    // Loop counter for iterating through the digits of the result.
    // The index 'j' will not exceed 157, so 'char' is the smallest type (3D).
    char j;

    // Variable to hold the carry-over during multiplication.
    // Max carry can be 99 (from 9*100+99=999), so 'short' (0-99) is
    // the smallest suitable type (2D).
    short carry;

    // Variable for the intermediate product of a single digit multiplication.
    // Max product can be 999 (from 9*100+99), so 'char' (0-999) is
    // the smallest suitable type (3D).
    char product;

    // Initialize the result to 1.
    // Global arrays are zero-initialized, so we only set the first digit.
    size = 1;
    result[0] = 1;

    // Loop from i = 2 to 100 to compute 100!
    for (i = 2; i <= 100; i++) {
        carry = 0;
        // Multiply the number in 'result' by 'i'.
        for (j = 0; j < size; j++) {
            product = result[j] * i + carry;
            result[j] = product % 10;
            carry = product / 10;
        }

        // If there's a remaining carry, append its digits to the result.
        while (carry > 0) {
            result[size] = carry % 10;
            carry = carry / 10;
            size++;
        }
    }

    // Print the final result.
    // The most significant digit is at the end of the used portion of the array.
    // We must loop backwards. Since 'j' is an unsigned type ('char'),
    // a 'j >= 0' condition would create an infinite loop.
    for (j = size; j > 0; j--) {
        // Use %d format specifier for the 'digit' type.
        printf("%d", result[j - 1]);
    }
}
]