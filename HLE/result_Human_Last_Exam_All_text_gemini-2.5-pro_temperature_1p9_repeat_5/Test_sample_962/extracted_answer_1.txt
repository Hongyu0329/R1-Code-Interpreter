A tightly secure t-out-of-n threshold signature scheme with a two-round signing protocol can be designed based on the FROST (Flexible Round-Optimized Schnorr Threshold signatures) framework.

**1. Distributed Key Generation (DKG):**
All `n` participants run a `(t,n)`-Verifiable Secret Sharing (VSS) protocol, like Pedersen VSS. This results in a single group public key `PK`, and each participant `P_i` obtains a private key share `sk_i` and a corresponding public verification key `pk_i`.

**2. Signing Protocol (for `t` participants):**

*   **Pre-computation Phase:** Each participant pre-generates pairs of secret nonces and publicly commits to them. This makes the online phase faster.

*   **Online Phase (2 Rounds):**
    *   **Round 1: Commit.** For a message `m`, each of the `t` signers broadcasts a set of pre-generated nonce commitments to the other signers.
    *   **Round 2: Sign.** After receiving commitments from everyone, each participant `P_i`:
        a. Computes a *binding factor* that makes their secret nonce dependent on all other participants' commitments. This is a critical step for tight security, preventing attacks where an adversary chooses their values after seeing others.
        b. Computes their contribution to the group public nonce `R`.
        c. Computes a common signature challenge `c = Hash(PK, R, m)`.
        d. Computes their partial signature `s_i` using their key share `sk_i`, their nonce share, and the challenge `c`.
        e. Broadcasts their partial signature `s_i`.

**3. Signature Aggregation and Verification:**
A designated combiner (or any participant):
1.  **Verifies each partial signature `s_i`**. This is a mandatory step to detect and exclude malicious participants.
2.  If all shares are valid, computes the final signature `s` by summing the partial signatures (`s = Î£ s_i`).
3.  The final, complete signature is the pair `(R, s)`. This signature can be verified by anyone using the group public key `PK` with the standard Schnorr verification equation.

This design is tightly secure because the two-round commit-and-sign structure, especially the use of a binding factor, prevents forgery attacks that exploit malleability in nonce selection. The security reduction to the underlying discrete logarithm problem is efficient and does not suffer from significant security loss.