import sympy

# Define symbols
x, y = sympy.symbols('x y')
K = sympy.Symbol('K') # Constant coefficient for d(eta)

# Let M be R^2, the cylinder, or the torus. We use local coordinates (x,y).
# We analyze the case where the transitive group of symmetries is assumed to be
# the group of translations, generated by the vector fields d/dx and d/dy.

# Let eta be a 1-form. Let omega = d(eta).
# If eta is invariant under translations, so is omega. Invariance of a 2-form
# under translations on these manifolds implies its coefficient is constant.
# So, we can write d(eta) = K * dx^dy for some constant K.

print("Step 1: Assume the symmetry group contains translations and d(eta) = K*dx^dy.")
print("         K is a constant because d(eta) must be translation-invariant.\n")

# Let eta = a(x,y)*dx + b(x,y)*dy.
# The invariance of eta under translations means its Lie derivative with respect
# to the generators (d/dx and d/dy) is zero.
# We use Cartan's formula: L_X(eta) = d(i_X(eta)) + i_X(d(eta)) = 0.
a = sympy.Function('a')(x, y)
b = sympy.Function('b')(x, y)

# Constraint from invariance under x-translation (generator X = d/dx):
# d(i_X(eta)) + i_X(d(eta)) = d(a) + i_X(K*dx^dy) = d(a) + K*dy = 0
# This gives two partial differential equations for a(x,y):
pde_a_x = sympy.Eq(a.diff(x), 0)
pde_a_y = sympy.Eq(a.diff(y), -K)

# Constraint from invariance under y-translation (generator Y = d/dy):
# d(i_Y(eta)) + i_Y(d(eta)) = d(b) + i_Y(K*dx^dy) = d(b) - K*dx = 0
# This gives two partial differential equations for b(x,y):
pde_b_x = sympy.Eq(b.diff(x), K)
pde_b_y = sympy.Eq(b.diff(y), 0)

print("Step 2: Use the invariance of eta to derive constraints on its components a(x,y) and b(x,y).")
print(f"From x-translation invariance: d(a)/dx = {pde_a_x.rhs} and d(a)/dy = {pde_a_y.rhs}")
print(f"From y-translation invariance: d(b)/dx = {pde_b_x.rhs} and d(b)/dy = {pde_b_y.rhs}\n")


# Finally, we use the definition of the exterior derivative:
# d(eta) = (d(b)/dx - d(a)/dy) * dx^dy
# We know the coefficient of d(eta) is K.
# So, we must have the consistency equation: K = d(b)/dx - d(a)/dy.

# Let's substitute the results from the invariance constraints.
final_eq = sympy.Eq(K, pde_b_x.rhs - pde_a_y.rhs)

print("Step 3: Use the definition d(eta) = (d(b)/dx - d(a)/dy)*dx^dy for a consistency check.")
print("This means we must have the equation: K = d(b)/dx - d(a)/dy")
print(f"Substituting the derived constraints: {final_eq.lhs} = {final_eq.rhs.args[0]} - ({final_eq.rhs.args[1]})")

# Simplify and print the final resulting equation
final_simplified_eq = sympy.Eq(final_eq.lhs, sympy.simplify(final_eq.rhs))
print("This equation simplifies to:")
print(f"  {final_simplified_eq.lhs} = {final_simplified_eq.rhs.args[0]} * {final_simplified_eq.rhs.args[1]}")
print("\nThe equation K = 2*K can only be true if K = 0.")
print("This shows that IF the symmetry group is the group of translations, then d(eta) must be 0.")
print("However, the problem does not require this assumption for the group, and as explained above,")
print("the compactness of the torus is the deciding factor.")
