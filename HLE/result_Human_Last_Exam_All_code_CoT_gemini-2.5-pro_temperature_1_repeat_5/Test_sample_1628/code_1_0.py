import math

def calculate_shear_center_asymmetric_channel():
    """
    Calculates the shear center location for an asymmetric channel section.

    The shear center is a point where a shear force can be applied without
    causing torsion. For a channel section, it is located outside the section,
    offset from the web. This script calculates this offset distance 'e'.
    """

    # --- Define Geometric Properties of an Asymmetric Channel (in mm) ---
    # h: Height between the centerlines of the top and bottom flanges
    h = 150.0
    # t_w: Thickness of the web
    t_w = 6.0
    # b_1: Width of the top flange (from web centerline to tip)
    b_1 = 80.0
    # t_1: Thickness of the top flange
    t_1 = 10.0
    # b_2: Width of the bottom flange (from web centerline to tip)
    b_2 = 60.0
    # t_2: Thickness of the bottom flange
    t_2 = 8.0

    print("--- Asymmetric Channel Section Properties (mm) ---")
    print(f"Web Height (h, between flange centerlines): {h}")
    print(f"Web Thickness (t_w): {t_w}")
    print(f"Top Flange Width (b_1): {b_1}")
    print(f"Top Flange Thickness (t_1): {t_1}")
    print(f"Bottom Flange Width (b_2): {b_2}")
    print(f"Bottom Flange Thickness (t_2): {t_2}\n")

    # --- Step 1: Calculate Moment of Inertia (I_x) ---
    # Using the parallel axis theorem for the flanges and ignoring their own
    # moment of inertia as they are thin. The axis is the horizontal
    # centroidal axis, which passes through the center of the web.
    # I_x = I_web + I_top_flange + I_bottom_flange
    i_web = (t_w * h**3) / 12
    # Area * distance^2 for top flange
    i_top_flange = (b_1 * t_1) * (h / 2)**2
    # Area * distance^2 for bottom flange
    i_bottom_flange = (b_2 * t_2) * (h / 2)**2

    i_x = i_web + i_top_flange + i_bottom_flange

    print("--- Calculation ---")
    print(f"1. Moment of Inertia (I_x) calculation:")
    print(f"I_x = (t_w * h^3)/12 + (b_1*t_1)*(h/2)^2 + (b_2*t_2)*(h/2)^2")
    print(f"I_x = ({t_w:.1f} * {h:.1f}^3)/12 + ({b_1:.1f}*{t_1:.1f})*({h/2:.1f})^2 + ({b_2:.1f}*{t_2:.1f})*({h/2:.1f})^2")
    print(f"I_x = {i_web:,.2f} + {i_top_flange:,.2f} + {i_bottom_flange:,.2f} = {i_x:,.2f} mm^4\n")

    # --- Step 2: Calculate Shear Center Eccentricity (e) ---
    # This formula balances the external torque (V*e) with the internal torque
    # generated by the shear flow in the flanges.
    numerator = (h**2 / 8) * (t_1 * b_1**2 + t_2 * b_2**2)
    e = numerator / i_x

    print(f"2. Shear Center Eccentricity (e) calculation:")
    print(f"e = [h^2 / (8 * I_x)] * (t_1 * b_1^2 + t_2 * b_2^2)")
    print(f"e = [{h:.1f}^2 / (8 * {i_x:,.2f})] * ({t_1:.1f} * {b_1:.1f}^2 + {t_2:.1f} * {b_2:.1f}^2)")
    
    term1_val = t_1 * b_1**2
    term2_val = t_2 * b_2**2
    print(f"e = [{h**2 / 8:,.2f} / {i_x:,.2f}] * ({term1_val:,.2f} + {term2_val:,.2f})")
    print(f"e = [{numerator/i_x:,.4f}] (calculated based on intermediate values)")
    print("\n--- Result ---")
    print(f"The shear center is located at a distance 'e' = {e:.2f} mm from the centerline of the web.")
    print("This location is outside the physical cross-section, on the opposite side from the flanges.")


if __name__ == "__main__":
    calculate_shear_center_asymmetric_channel()