import re

def analyze_crispr_targets():
    """
    Analyzes potential CRISPR sgRNA targets for the second exon of a given gene.
    """
    full_sequence = "ATGTGTGCCTGCGGGATACTTTTGACTTTTACTTTGCTTTTGCATTTTCTTGGTGTTCACTCAATGAATCCTCTGTTTCCAAGCGCATCCAGGGGCATGAAAGTGTCTAAGTCTGTTCCTGCTGAGGGCAACAGGAGAGCAAAATACGGCAAGAATGTGCTGTCAGCATCACTGTTATCCGGAGACATACAGTCCAGAAGGGCGATCAAGGATGCGATTGAACCTCACGATTACATGATTTCCATATACAAGACCTTTTCAGCGGCTGAAAAACTGGGACTGAACGCGAGTTTTTTCCGCTCGTCTAAAGCAGCAAACACCATCACGAGCTTTGTGGACGAGGGTCAAG^GTTAGTTATTTCTACTTATACAAGCAACAGTGATTTCAAACGCACACGTACTGATTCTATATTGGTACTCACAGGGAAAAAAAAAAAAAAAACATTTGTATACAATTCAAACAACTCTTAAAGGAATACAGTCAAATGTGTCAGTGAACAGATGGAAACAAAGCATTTTGAATATTAGGCCTATATCATCTATGATACTGCGGAAAATCTTCAAGAAATCTTTTTCCCCTAATAGTAAAAATAATGACAACAATATATGTATAACATTATACACTCTGTTTACAATCTTGCATAAAATAAGTTGTGTTTGCATCAAAGTGTGTATACATGCACTGTCCATTTCAAATATTTTTTATTGGAATGTGTAGGAATTTTCACGATGTAGGCAGGTTATTATCACTATAAAGTGCCTTAGATGTCCCACAAGATTGAATCAGTCCCATATGAGCATAATGCGAAATTGATGTTTTAATATGATTGGTTAAACTTGTACACACATGCAGGTAGAATTATGAGTGTTTTGAAACATGTTTTTGCCAATTATTGCCATAGTCTTTTATTGAATGGATGTGATTTTGCCATGTCCCACACACTGCACAGCCAAGTTCAGTAAGTCTAAAAAGTAGCTAAATTAGATAAATTTTTTTTAAATGTTTAAGTATTCTTTCTATTCTTACAGTTATTTTGAAAACTAAATCATTTTTATAACTTTTATTTTTTTATTCTTTTATAATATTATTAATCATTTTGCACGAGTCTTTGAGTTTGCTGTCCACCCTGTCATGATGTAGTAAATCCCCTTTAAGAAACCCTCTGATGTACTCATTGGCATCCCCATGCCTATTTTGCTTTTCTTCAGAGGAGGTTAAAAAAACTGATGTGCACACATTAAATATCTACATATATGTTTCCTATTTTTCATCATATTGTGTTTGAAACCGAATGTGGTCAAGCTTAACATGTCCACCCTGTCATAGTAAAATATTAATTAATATAAAAAATTCGGAAATCAAAGATAGCTTTTAAACTGTATACAAAGAGCTTAAATAAGGAAACACTTTACCAGCTGCAGGTTCAACCTGTGTTAAATAAATGCTATCTTTAGCCAAAAATGTCCTCCTTGTTATTGTCCACCCTTTCACAAATCCTTCCTTGGGTGGACATATGCATCGTTATTGACACTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTTTTGTTAATCAGCTAATGTTTTATTATGGTACATCACATACATACTACACCAGTAGATGCAATACATAAGTGGACAATACAAATCTTTTGGCAATATTTATCTCAGTCTATATAAAGAATATCCTTTTAAAGTCCATATAAGGCAGCTCATTGACTGTTTGAAATTAAAATACATTATTTATCCTATTCTGGAAAAGAAAAAATATGATACATTTGTGCGTTGATGGATTTGAAACCACACTGGACTGAACTAATTTGAACTTTTAATTTCAATTCACTACAACTTCTATGTTAAGCTGCTTAGACACAATTTACATTACAGGTGTCAAATCCAGTTTCTTAAGAGCCACAGCTCTGCACAGTTTAGGGTTAACCCTAATTAAACACACCTGATCAAACTAATTGAGTCCTTCAGGCTTGTTTGATACCTACAGGTAGGTTTGTTAAAGCAAGGTTGGAACTAAATTGTGCAGAGCTGCGGCCCTTCAGGAACTAGATTTGACACCTAATTTACATTATGGAAACGCTATAGAAATAAAGATAAATTGAATTGAATAGATTTTTCTCCTCCAAAACACTATATATAAAAATACTAATTAGCAAATGCTAGTATTAGAAAAAAAAATTAGAACCTAGCTTTAAAAACTTTAGCATAATGAAAGAAACAGAGACACAAGACAGAAATAAATTTCAACATATGTCACCTTAATTAGGTAAAAACGAGTTCTCGATCTGCACATGCCATAACAGATATTGTAAATTTTGTGGATGCAGATCTAGTGTCAACAAGCATCTGTTCTCTTTGTTTCAG^ATGACCATTTGAACTCTCCACTTTGGAGACAGAAATATTTATTCGACGTATCAACGCTTTCTGAAAATGTGGAGATCCTGGGTGCCGAACTGAGGATTTACACAAAGATCTCCGGAAGCTTCCGCGCATCTGAAACCGGTCCTGTGGAAATACAGCTTCTCTCCTGCCAGTCGCACACTGTCCTTGATTCACAAACTTTGGATCTGGAGGATGCACATAAACCAAAATGGGAAGTTTTCGACGTCTGGGAGATTTTTAAGGAACGTCAGCACCACTCTCATGGCACCCGCTTCTGTTTAGAGCTCAGGGCCACACTGGATAATCCAGAGAGAGAAATTGATTTGCAATATCTTGGATTTCACAGACATGGCCGCCCGCAACTGAAGAAAGCCATACTGGTTGTTTTCACAAGGTCAAAAAAGAGGCAAAGTCTTTTTTATGAAAAAAGAGAGAAGATCAAGCTATGGGGTCTGGATAGTATTGGTAAGGAAAGAAGATCCCACTCGAAAACCCGCCGGAGCAGACGGACTGCTCTACCCAATCGCCATGGCAAGAGACATGGTAAAAAGTCAAAATCTAGATGCAGCAAAAAGCCACTGCATGTCAATTTCAGAGAGCTGGGTTGGGACGATTGGGTCATCGCTCCATTAGATTATGAGGCTTATCACTGTGAGGGCATGTGTGACTTTCCCCTCCGATCTCACCTGGAACCAACCAATCATGCCATCATACAAACTCTAATGAACTCAATGAACCCCAGCAACATGCCACCCAGCTGTTGCGTCCCCTCCAAACTCAGTCCCATTAGCATCTTGTACATTGACGCAGGAAATAATGTTGTGTACAAGCAGTATGAAGACATGGTAGTGGAGTCCTGCGGCTGCAGATGA"

    parts = full_sequence.split('^')
    exon1 = parts[0]
    intron = parts[1]
    exon2 = parts[2]

    options = {
        'A': "AGCGGTTTACTGAGACCCGG(TGG)",
        'B': "TCCGGCGGGTTTTCGAGTGGG", # Assuming last 3 is PAM
        'C': "TTCATGCCCCTGGATGCGCT(TGG)",
        'D': "CAGGACCGGTTTCAGATGCG(CGG)",
        'E': "GCATCTGAAACCGGTCCTG(TGG)",
        'F': "GGAAGCAATCCTCCGAACGT(TGG)",
        'G': "ACGTTGCGAGGACAGAGTCA(AGG)",
        'H': "CCCTTTCACAAATCCTTCCT(TGG)",
        'I': "TTCACCCGCACCTTGAACGG(AGG)",
        'J': "CTTTCTTTCTTTCTTTCTTTC(TTT)",
        'K': "CTGCTCTACCCAATCGCCA(TGG)",
        'L': "TGCCTG(CGG)",
        'M': "TGCAAAGTAGATCGAGATGG(AGG)",
        'N': "ACAGTCCAGAAGGGCGATCA(AGG)",
        'O': "ATG(ACC)",
    }
    
    print("--- sgRNA Target Analysis ---\n")
    suitable_candidate = None

    for key, value in options.items():
        # Parse guide and PAM
        match = re.match(r"([\w\s]+)(?:\((\w+)\))?", value)
        guide, pam = match.groups() if match else (None, None)

        if not pam: # Handle cases like 'B' where PAM is not in parens
            if value.endswith("GGG") or value.endswith("AGG") or value.endswith("TGG") or value.endswith("CGG"):
                pam = value[-3:]
                guide = value[:-3]

        print(f"Option {key}: {value}")
        
        # Validation checks
        if not guide or not pam:
            print("  Status: Invalid format.\n")
            continue
        if len(pam) != 3 or pam[1:] != 'GG':
            print(f"  Status: Invalid PAM sequence '{pam}'. spCas9 requires NGG.\n")
            continue
        if not (17 <= len(guide) <= 21):
            print(f"  Status: Guide length {len(guide)} is not standard.\n")
            continue
            
        target_seq = guide + pam
        location = "Not Found"
        analysis = []
        
        if target_seq in exon2:
            location = "Exon 2"
            pos = exon2.find(target_seq)
            gc_count = guide.count('G') + guide.count('C')
            gc_percent = (gc_count / len(guide)) * 100
            
            analysis.append(f"Position: {pos}")
            analysis.append(f"GC Content: {gc_percent:.1f}%")

            # Simple complexity check
            if 'AAAAA' in guide or 'TTTTT' in guide or re.search(r"(\w\w)\1{3,}", guide):
                analysis.append("Complexity: Low (Repetitive)")
            else:
                analysis.append("Complexity: Good")

        elif target_seq in exon1:
            location = "Exon 1"
        elif target_seq in intron:
            location = "Intron"
            if key == 'J':
                analysis.append("Complexity: Extremely Low")

        print(f"  Location: {location}")
        if analysis:
            print(f"  Details: {', '.join(analysis)}")
        
        if location == "Exon 2" and "Good" in ''.join(analysis):
             if suitable_candidate is None:
                 suitable_candidate = key
             # Prefer earlier target
             elif exon2.find(target_seq) < exon2.find(options[suitable_candidate].replace('(','').replace(')','')):
                  suitable_candidate = key
        
        print("-" * 25)

    print("\n--- Conclusion ---")
    if suitable_candidate:
        print(f"The most suitable candidate is Option {suitable_candidate}.")
        print("It targets Exon 2 early in the sequence and has good complexity and GC content,")
        print("which are desirable properties for minimizing off-target effects and maximizing knockout efficiency.")
    else:
        print("None of the options were found to be suitable targets in Exon 2.")

# Execute the analysis
analyze_crispr_targets()