import sys
# This script derives the Poynting vector symbolically and prints the result.

def solve_poynting_vector():
    """
    Derives and prints the formula for the Poynting vector in the given scenario.
    """
    # Using string representations for physical quantities and vectors
    # E_ext: External Electric Field
    # rho: Volume charge density
    # v: Velocity of the rod
    # r: Radial distance from the center of the rod
    # epsilon_0: Permittivity of free space
    # mu_0: Permeability of free space
    # r_hat, phi_hat, k_hat: Unit vectors in cylindrical coordinates

    print("Derivation of the Poynting Vector S")
    print("====================================")
    print("The Poynting vector is defined as: S = (1/mu_0) * (E x B)\n")

    # Step 1: Find the total Electric Field (E)
    print("--- Step 1: Finding the total Electric Field E ---")
    print("The total electric field E is the sum of the external field and the internal field generated by the charge density.")
    print("  E_external = E * k_hat")
    print("  E_internal (from Gauss's Law) = (rho * r / (2 * epsilon_0)) * r_hat")
    print("Total E = (rho * r / (2 * epsilon_0)) * r_hat + E * k_hat\n")
    e_total_str = "(rho*r/(2*epsilon_0))*r_hat + E*k_hat"

    # Step 2: Find the Magnetic Field (B)
    print("--- Step 2: Finding the Magnetic Field B ---")
    print("The moving charge density (rho) creates a current density J = rho * v * k_hat.")
    print("The magnetic field B from this current (from Ampere's Law) is:")
    print("  B = (mu_0 * rho * v * r / 2) * phi_hat\n")
    b_field_str = "(mu_0*rho*v*r/2)*phi_hat"

    # Step 3: Compute the cross product (E x B)
    print("--- Step 3: Computing the cross product E x B ---")
    print(f"  E x B = [ {e_total_str} ] x [ {b_field_str} ]")
    print("  This expands to two terms:")
    print("  Term 1: (rho*r/(2*epsilon_0))*r_hat x (mu_0*rho*v*r/2)*phi_hat = (mu_0*rho^2*v*r^2/(4*epsilon_0)) * (r_hat x phi_hat)")
    print("  Term 2: E*k_hat x (mu_0*rho*v*r/2)*phi_hat = (E*mu_0*rho*v*r/2) * (k_hat x phi_hat)")
    print("\n  Using the cylindrical cross products: (r_hat x phi_hat = k_hat) and (k_hat x phi_hat = -r_hat):")
    print("  E x B = (mu_0*rho^2*v*r^2/(4*epsilon_0))*k_hat - (mu_0*E*rho*v*r/2)*r_hat\n")

    # Step 4: Compute the Poynting Vector S
    print("--- Step 4: Computing the Poynting Vector S = (1/mu_0) * (E x B) ---")
    print("Dividing E x B by mu_0, we cancel mu_0 from both terms.\n")
    
    # Final Result
    print("====================================")
    print("Final Poynting Vector S")
    print("====================================")
    print("The Poynting vector inside the rod at a radial distance r has two components:")
    print("  S = S_r * r_hat + S_z * k_hat")
    print("\nThe radial component (S_r) is:")
    print("  S_r = -(E * rho * v * r) / 2")
    print("\nThe axial component (S_z or S_k) is:")
    print("  S_z = (rho^2 * v * r^2) / (4 * epsilon_0)")
    
solve_poynting_vector()
