def solve_tt_primes():
    """
    Solves the problem based on the provided analysis of the tt-spectrum of D_b(E(C_p)).

    The analysis identifies which of the 20 objects generate a prime tt-ideal.
    It also determines that both prime tt-ideals of the category are generated
    by objects in the provided list.
    """

    # List of indices of the objects that generate a prime tt-ideal.
    # This list is derived from the step-by-step thinking process above.
    generator_indices = [2, 3, 4, 5, 6, 7, 12, 13, 14]

    # The list is already sorted, but we sort to be robust.
    generator_indices.sort()

    # The two prime tt-ideals in the spectrum are generated by objects from the list.
    # Therefore, the number of prime ideals not generated by any of these objects is 0.
    non_generated_count = 0

    # Format the first part of the answer: a comma-separated list of numbers.
    first_answer = ",".join(map(str, generator_indices))
    
    # Format the second part of the answer: the count.
    second_answer = str(non_generated_count)

    # Combine the parts with a semicolon as requested.
    final_answer = f"{first_answer};{second_answer}"

    print(final_answer)

solve_tt_primes()