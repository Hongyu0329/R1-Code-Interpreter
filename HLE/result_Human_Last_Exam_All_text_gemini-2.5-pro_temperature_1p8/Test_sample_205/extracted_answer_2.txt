172[void main() {
    // Program to calculate 100! using minimal variable memory.
    // Variable memory usage:
    // - res: digit[158]             = 158 * 1D = 158D
    // - i: char (for 2..100)          = 1 * 3D = 3D
    // - size: char (for max size 158) = 1 * 3D = 3D
    // - j: char (for inner loop index)  = 1 * 3D = 3D
    // - carry: short (for max carry 99) = 1 * 2D = 2D
    // - product: char (for max val 999) = 1 * 3D = 3D
    // Total variable memory: 158 + 3 + 3 + 3 + 2 + 3 = 172D

    digit res[158];
    char i, size, j;
    short carry;
    char product;

    // Initialize result to 1 (res[0]=1, size=1)
    size = 1;
    res[0] = 1;
    
    // Loop from i = 2 to 100 to compute factorial
    for (i = 2; i <= 100; i++) {
        carry = 0;
        // Multiply current result 'res' by 'i'
        for (j = 0; j < size; j++) {
            // product = digit * char + short -> fits in a char (0-999)
            product = res[j] * i + carry;
            res[j] = product % 10;
            // carry = product / 10 -> fits in a short (0-99)
            carry = product / 10;
        }
        
        // Handle leftover carry by extending the number's size
        while (carry > 0) {
            res[size] = carry % 10;
            carry = carry / 10;
            size++;
        }
    }

    // Print final result (Most Significant Digit first)
    j = size;
    while (j > 0) {
        j--;
        // Use '%d' format specifier for the 'digit' data type
        printf("%d", res[j]);
    }
}]