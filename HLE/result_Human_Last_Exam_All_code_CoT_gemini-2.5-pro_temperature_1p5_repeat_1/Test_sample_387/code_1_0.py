import numpy as np

# Step 1: Define the original space.
# The log point P with log structure N^3 corresponds to the affine space A^3.
# In toric geometry, this space is described by a cone in R^3 generated by the standard basis vectors.
e1 = np.array([1, 0, 0])
e2 = np.array([0, 1, 0])
e3 = np.array([0, 0, 1])

# The matrix formed by these vectors represents the cone.
# The dimension of the original space is the rank of this matrix.
original_cone_matrix = np.array([e1, e2, e3])
original_dim = np.linalg.matrix_rank(original_cone_matrix)

print("--- Analyzing the Original Space ---")
print("The original space is associated with a cone whose generators can be written as the matrix:")
print(original_cone_matrix)
print(f"The dimension of the original space is the rank of this matrix: rank({np.array2string(original_cone_matrix, separator=',')}) = {original_dim}.")
print("-" * 40)

# Step 2: Define the log ideal and the blowup procedure.
# The log ideal I is generated by (1,0,0) and (0,1,0), which are the vectors e1 and e2.
ideal_gen1 = e1
ideal_gen2 = e2

print("\n--- Performing the Log Blowup ---")
print("The log blowup along the ideal generated by:")
print(f"{ideal_gen1} and {ideal_gen2}")
print("corresponds to a subdivision of the original cone.")

# The subdivision introduces a new ray generated by the sum of the ideal's generators.
new_vector = ideal_gen1 + ideal_gen2
print(f"A new vector is introduced: {new_vector}")

# Step 3: Determine the new cones and their dimension.
# The original cone is split into two new cones by this new vector.
# Cone 1 is generated by {e1, new_vector, e3}.
# Cone 2 is generated by {e2, new_vector, e3}.
cone1_matrix = np.array([e1, new_vector, e3])
cone2_matrix = np.array([e2, new_vector, e3])

# The dimension of the blowup is the dimension of these new maximal cones.
# We calculate the dimension by finding the rank of their generating matrices.
dim_cone1 = np.linalg.matrix_rank(cone1_matrix)
dim_cone2 = np.linalg.matrix_rank(cone2_matrix)

print("\nThe log blowup results in a variety covered by two charts, corresponding to two new cones.")
print("\nChart 1 (Cone 1) is generated by:")
print(cone1_matrix)
print(f"The dimension of this chart is: rank({np.array2string(cone1_matrix, separator=',')}) = {dim_cone1}")

print("\nChart 2 (Cone 2) is generated by:")
print(cone2_matrix)
print(f"The dimension of this chart is: rank({np.array2string(cone2_matrix, separator=',')}) = {dim_cone2}")

# The dimension of the log blowup is the dimension of these cones.
final_dimension = max(dim_cone1, dim_cone2)

print("\n--- Final Answer ---")
print("The final dimension of the log blowup is the maximal dimension of these charts.")
print(f"Final Dimension = max({dim_cone1}, {dim_cone2}) = {final_dimension}")