def solve():
    """
    This function determines which of the 20 objects generate a prime tt-ideal
    and how many canonical prime tt-ideals are not generated by these objects.
    """
    # Based on the analysis, the objects that generate a prime tt-ideal are
    # those whose support is a single point or empty.
    # The analysis concluded that objects 3 and 15 have supports that are not single points.
    prime_generators = [i for i in range(1, 21) if i not in [3, 15]]

    # The number of prime tt-ideals not generated by one of these objects.
    # The prime ideals correspond to points on the projective line P^1_k.
    # The canonical points are 0, infinity, 1, and -1.
    # Object 2 (kC_p(0)) generates the prime for 0.
    # Object 1 (k(0)) generates the prime for infinity.
    # Object 7 (cone(tau)) generates the prime for 1 (by choosing tau appropriately).
    # Assuming p > 2, the point -1 is distinct and has no generator in the list.
    # Thus, there is 1 canonical prime ideal not generated.
    # If p = 2, then 1 = -1 and all canonical primes are generated, leading to 0 non-generated.
    # The problem implies a single answer for any p > 0.
    # A robust interpretation that provides a single integer for p>2 is that one canonical
    # point (-1) is left out.
    not_generated_count = 1

    # Format the output as requested.
    prime_generators_str = ",".join(map(str, prime_generators))
    result = f"{prime_generators_str};{not_generated_count}"
    print(result)

solve()