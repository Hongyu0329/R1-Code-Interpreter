import numpy as np

def simulate_spin_valve_sensor(bias_field, particle_field, gain=2.0, max_output=1.0):
    """
    Simulates the output of a Spin Valve sensor with saturation.
    Uses the hyperbolic tangent (tanh) function to model the saturation effect.

    Args:
        bias_field (float): The static DC magnetic field from the permanent magnet.
        particle_field (float): The small magnetic field from a passing particle.
        gain (float): The gain of the sensor in its linear region.
        max_output (float): The maximum output signal of the sensor.

    Returns:
        tuple: A tuple containing the detected signal difference and the operating point description.
    """
    # Sensor output without the particle (only bias field)
    output_without_particle = max_output * np.tanh(gain * bias_field)

    # Total field when a particle is present
    total_field = bias_field + particle_field

    # Sensor output with the particle
    output_with_particle = max_output * np.tanh(gain * total_field)

    # The detected signal is the difference in output
    detected_signal = output_with_particle - output_without_particle
    
    return detected_signal, output_without_particle

# --- Simulation Parameters ---
# The magnetic field generated by a single paramagnetic particle
# This is a small perturbation the sensor needs to detect.
B_particle = 0.1  # Arbitrary units of magnetic field

# Scenario 1: Correct Magnet Position
# The bias field is set to an optimal value, keeping the sensor in its sensitive linear range.
B_bias_correct = 0.5 # Arbitrary units

# Scenario 2: Improper Magnet Position (Too Close)
# The magnet is too close, creating a very strong bias field that pushes the sensor into saturation.
B_bias_high = 3.0 # Arbitrary units, much higher than the correct bias

# --- Run Simulation and Print Results ---

print("--- Simulating Spin Valve Sensor Response ---")
print(f"Magnetic field from particle: {B_particle} units")
print("\n" + "="*50)

# Run Scenario 1
detected_signal_correct, op_point_correct = simulate_spin_valve_sensor(B_bias_correct, B_particle)
print("\nScenario 1: CORRECT Magnet Position")
print(f"Bias Field: {B_bias_correct} units")
print(f"Sensor operating point (output due to bias): {op_point_correct:.4f} V")
print(f"Resulting detected signal from particle: {detected_signal_correct:.4f} V")
print("=> The sensor is in its linear range and successfully detects the particle signal.")

print("\n" + "="*50)

# Run Scenario 2
detected_signal_high_bias, op_point_high_bias = simulate_spin_valve_sensor(B_bias_high, B_particle)
print("\nScenario 2: IMPROPER Magnet Position (Too Close)")
print(f"Bias Field: {B_bias_high} units")
print(f"Sensor operating point (output due to bias): {op_point_high_bias:.4f} V")
print(f"Resulting detected signal from particle: {detected_signal_high_bias:.4f} V")
print("=> The sensor is in SATURATION. The output signal from the particle is nearly zero and goes undetected.")
print("\n" + "="*50)
