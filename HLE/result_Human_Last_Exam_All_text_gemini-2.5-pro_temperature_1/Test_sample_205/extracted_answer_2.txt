170[
void main() {
    // This program calculates 100! using an array of digits to handle the large result.
    // The total memory for variables is minimized by choosing the smallest possible data types.
    // Memory calculation:
    // result: 158 * sizeof(digit) = 158 * 1D = 158D
    // num_digits: 1 * sizeof(char) = 1 * 3D = 3D
    // i: 1 * sizeof(char) = 1 * 3D = 3D
    // j: 1 * sizeof(char) = 1 * 3D = 3D
    // carry: 1 * sizeof(char) = 1 * 3D = 3D
    // Total memory (z) = 158 + 3 + 3 + 3 + 3 = 170D

    digit result[158] = {0}; // Array to store 158 digits of 100!
    char num_digits = 1;     // Current number of digits in the result
    
    char i;                  // Loop counter for factorial (2 to 100)
    char j;                  // Loop counter for digits array
    char carry;              // Carry for multiplication

    // Initialize result to 1
    result[0] = 1;

    // Calculate 100! by multiplying from 2 to 100
    for (i = 2; i <= 100; i++) {
        carry = 0;
        // Multiply the current result array by i
        for (j = 0; j < num_digits; j++) {
            // Re-use 'carry' to store the intermediate product
            carry = result[j] * i + carry; 
            result[j] = carry % 10;
            carry = carry / 10;
        }

        // If there's a remaining carry, extend the number of digits
        while (carry > 0) {
            result[num_digits] = carry % 10;
            carry = carry / 10;
            num_digits++;
        }
    }

    // Print the final result
    printf("100! = ");
    
    // Print digits from most significant to least significant.
    // Loop is written to be safe for an unsigned type 'j'.
    j = num_digits;
    while (j > 0) {
        j--;
        printf("%d", result[j]);
    }
    printf("\n");
}
]