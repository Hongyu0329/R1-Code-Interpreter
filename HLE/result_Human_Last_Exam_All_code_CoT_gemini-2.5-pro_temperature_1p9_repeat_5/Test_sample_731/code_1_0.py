import math

def solve():
    """
    Calculates the number of power subgroups (cyclic subgroups) in the
    semidihedral group of size 512.
    """
    group_order = 512
    print(f"Finding the number of power subgroups in the semidihedral group of order {group_order}.")

    # For a semidihedral group of order 2^n, the order is 512, so 2^n = 512 => n = 9.
    n = int(math.log2(group_order))
    order_of_r = 2**(n - 1)
    
    # 1. Count cyclic subgroups within the maximal cyclic subgroup <r>.
    # The number of subgroups of a cyclic group of order m is the number of divisors of m, tau(m).
    # For order_of_r = 256 = 2^8, the number of divisors is 8 + 1 = 9.
    # In general for 2^(n-1), it is (n-1)+1 = n.
    subgroups_from_r = n
    print(f"Step 1: The maximal cyclic subgroup <r> has order {order_of_r}.")
    print(f"The number of cyclic subgroups contained within <r> is the number of divisors of {order_of_r}, which is {subgroups_from_r}.")
    
    # 2. Count cyclic subgroups generated by elements of the form sr^i.
    # These elements have order 2 if i is even, and order 4 if i is odd.
    # The number of such elements is order_of_r = 256.
    
    # Case i is even:
    num_even_i = order_of_r // 2
    # Each sr^i with even i has order 2 and generates a distinct subgroup.
    subgroups_from_sr_even = num_even_i
    print(f"\nStep 2: Analyzing subgroups generated by elements of the form sr^i.")
    print(f"There are {num_even_i} elements where i is even. Each generates a distinct cyclic subgroup of order 2.")
    print(f"This gives {subgroups_from_sr_even} subgroups.")

    # Case i is odd:
    num_odd_i = order_of_r // 2
    # Each sr^i with odd i has order 4. A cyclic group of order 4 has 2 generators.
    # The 128 such elements form pairs that generate the same subgroup.
    subgroups_from_sr_odd = num_odd_i // 2
    print(f"\nThere are {num_odd_i} elements where i is odd. These generate cyclic subgroups of order 4.")
    print(f"Since each such subgroup has 2 generators, they form {num_odd_i} / 2 = {subgroups_from_sr_odd} distinct subgroups.")

    # 3. Sum the counts. These sets of subgroups are disjoint (except for the trivial subgroup).
    total_subgroups = subgroups_from_r + subgroups_from_sr_even + subgroups_from_sr_odd
    print("\nStep 3: Summing the counts from all categories.")
    print(f"Total number of power subgroups = (subgroups from <r>) + (subgroups from sr^i, i even) + (subgroups from sr^i, i odd)")
    print(f"Total = {subgroups_from_r} + {subgroups_from_sr_even} + {subgroups_from_sr_odd} = {total_subgroups}")

solve()