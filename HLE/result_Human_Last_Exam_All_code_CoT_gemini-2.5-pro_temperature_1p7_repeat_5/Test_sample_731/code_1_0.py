import math

def count_power_subgroups_in_sd512():
    """
    Calculates the number of power subgroups (cyclic subgroups)
    in the semidihedral group of size 512.
    """
    group_size = 512

    # A semidihedral group of size N = 2^n is denoted SD_{2^n}.
    # For size 512, we have 2^n = 512, so n = 9.
    # The group can be described by generators and relations:
    # <r, s | r^(2^(n-1)) = s^2 = 1, srs = r^(2^(n-2) - 1)>
    n = int(math.log2(group_size))

    # We can find the number of power (cyclic) subgroups by summing three parts
    # based on the structure of the group.

    # Part 1: Subgroups from the cyclic subgroup <r>
    # The subgroup <r> is cyclic of order 2^(n-1). The number of subgroups
    # in a cyclic group of order m is the number of its divisors, tau(m).
    # For m = 2^(n-1) = 2^8 = 256, the number of divisors is (n-1)+1 = n.
    subgroups_from_r = n
    order_of_r_subgroup = 2**(n-1)

    # Part 2: Subgroups generated by elements sr^i where i is even.
    # These elements (2^(n-2) of them) all have order 2 and each generates
    # a distinct cyclic subgroup.
    subgroups_from_sr_even = 2**(n-2)

    # Part 3: Subgroups generated by elements sr^i where i is odd.
    # These elements (2^(n-2) of them) all have order 4.
    # Since a cyclic group of order 4 has 2 generators, these elements
    # form 2^(n-2) / 2 = 2^(n-3) distinct subgroups.
    subgroups_from_sr_odd = 2**(n-3)

    # The total number of power subgroups is the sum of these parts.
    total_subgroups = subgroups_from_r + subgroups_from_sr_even + subgroups_from_sr_odd

    print(f"For the semidihedral group of size {group_size} (SD_{{2**n}}), the number of power subgroups is calculated as follows:")
    print("-" * 30)
    print(f"1. Number of cyclic subgroups from the main cyclic part <r> of order {order_of_r_subgroup}: {subgroups_from_r}")
    print(f"2. Number of cyclic subgroups generated by elements of the form sr^i with even i: {subgroups_from_sr_even}")
    print(f"3. Number of cyclic subgroups generated by elements of the form sr^i with odd i: {subgroups_from_sr_odd}")
    print("-" * 30)
    print("The total number of power subgroups is the sum:")
    print(f"{subgroups_from_r} + {subgroups_from_sr_even} + {subgroups_from_sr_odd} = {total_subgroups}")

count_power_subgroups_in_sd512()