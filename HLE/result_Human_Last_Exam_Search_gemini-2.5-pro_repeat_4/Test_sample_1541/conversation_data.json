{
  "question": "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>.",
  "response_list": [
    "Here is the most memory-efficient C program to solve the problem.\n\nThis solution avoids storing the entire input string in memory. Instead, it processes the input character by character. It uses a constant amount of memory regardless of the input string's length (up to the defined limits of the problem), making it extremely memory-efficient.\n\nThe program reads each character from the input. If the character is a digit ('1', '2', '3', or '4'), it increments the corresponding counter. After counting all the numbers, it prints them in non-decreasing order, separated by plus signs.\n\n### Most Memory-Efficient C Program\n\n```c\n#include <stdio.h>\n\n/**\n * This program solves the Xenia and the Sum problem in the most memory-efficient way.\n * It reads the input sum character by character, counts the occurrences of the\n * numbers 1, 2, 3, and 4, and then prints the sorted sum.\n * This approach avoids storing the entire input string, thus minimizing memory usage.\n */\nint main(void) {\n    // Variables to count the occurrences of each number.\n    int count1 = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n\n    // Variable to store the character being read from input.\n    char c;\n\n    // Loop counter. Declared once to be reused.\n    int i;\n\n    // Flag to handle the printing of the '+' separator.\n    int first = 1;\n\n    // Read the input character by character until a newline or end-of-file is found.\n    while ((c = getchar()) != '\\n' && c != EOF) {\n        switch (c) {\n            case '1': count1++; break;\n            case '2': count2++; break;\n            case '3': count3++; break;\n            case '4': count4++; break;\n            // The '+' character is ignored.\n        }\n    }\n\n    // Print the numbers in non-decreasing order.\n    // Loop for the number '1'.\n    for (i = 0; i < count1; i++) {\n        if (!first) {\n            putchar('+');\n        }\n        putchar('1');\n        first = 0;\n    }\n\n    // Loop for the number '2'.\n    for (i = 0; i < count2; i++) {\n        if (!first) {\n            putchar('+');\n        }\n        putchar('2');\n        first = 0;\n    }\n\n    // Loop for the number '3'.\n    for (i = 0; i < count3; i++) {\n        if (!first) {\n            putchar('+');\n        }\n        putchar('3');\n        first = 0;\n    }\n\n    // Loop for the number '4'.\n    for (i = 0; i < count4; i++) {\n        if (!first) {\n            putchar('+');\n        }\n        putchar('4');\n        first = 0;\n    }\n\n    // Print a final newline character for clean output.\n    putchar('\\n');\n\n    return 0;\n}\n```\n\n### Memory Usage Calculation (m)\n\nThe total memory `m` used for variables in this program is calculated by summing the sizes of all declared variables. The calculation assumes a standard system where `sizeof(int)` is 4 bytes and `sizeof(char)` is 1 byte.\n\n*   **Counters for numbers (`count1`, `count2`, `count3`, `count4`):** There are 4 integer variables.\n    *   Memory = 4 * `sizeof(int)` = 4 * 4 bytes = 16 bytes.\n*   **Input character variable (`c`):** There is 1 character variable.\n    *   Memory = 1 * `sizeof(char)` = 1 * 1 byte = 1 byte.\n*   **Loop counter (`i`):** There is 1 integer variable used for loops.\n    *   Memory = 1 * `sizeof(int)` = 1 * 4 bytes = 4 bytes.\n*   **Formatting flag (`first`):** There is 1 integer variable to manage the '+' sign.\n    *   Memory = 1 * `sizeof(int)` = 1 * 4 bytes = 4 bytes.\n\n**Total Memory (m):**\nm = 16 bytes + 1 byte + 4 bytes + 4 bytes = 25 bytes.\n\n<<<25>>>"
  ],
  "user_prompt_list": [
    "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>."
  ],
  "system_message": ""
}