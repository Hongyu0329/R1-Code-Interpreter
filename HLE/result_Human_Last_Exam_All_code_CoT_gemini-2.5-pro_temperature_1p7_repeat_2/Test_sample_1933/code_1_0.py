import itertools

def get_powerset(s):
    """Returns the powerset of a given set."""
    return (set(i) for r in range(len(s) + 1) for i in itertools.combinations(s, r))

def solve():
    """
    This function demonstrates that the VC dimension is at least 4 by showing
    that a set of 4 points can be shattered.
    """
    points = {'x1', 'x2', 'x3', 'x4'}
    num_predicates = 4
    
    # We define a model (the interpretation of the 4 predicates P1, P2, P3, P4)
    # on the set of points. H_i is the set of points where predicate Pi is true.
    # Let H_i = points \ {xi}.
    predicates = {f'P{i+1}': points - {f'x{i+1}'} for i in range(num_predicates)}

    print(f"Let the set of points to shatter be X = {sorted(list(points))}")
    print("Let the 4 predicates be interpreted as follows:")
    for p_name, truth_set in predicates.items():
        print(f"- {p_name} is true for points: {sorted(list(truth_set))}")
    print("-" * 30)

    print("We will now show that any subset of X can be generated by a formula.")
    
    shattered = True
    # Iterate through every subset of the points
    for target_subset in get_powerset(points):
        # For a target subset Y, the formula is the conjunction of all P_i
        # such that the corresponding point x_i is NOT in Y.
        points_not_in_subset = points - target_subset
        
        formula_predicates = []
        if not points_not_in_subset:
            # Empty conjunction is TOP (true for all points)
            formula_str = "TOP"
        else:
            formula_predicates = sorted([f'P{p[1]}' for p in points_not_in_subset])
            if len(formula_predicates) > 0:
                 formula_str = " AND ".join(formula_predicates)
            else:
                 formula_str = "TOP"

        # Calculate the actual set of points selected by this formula
        if not formula_predicates:
             # The empty intersection is the entire set of points
            generated_set = points
        else:
            # Start with the full set and take intersections
            generated_set = set(points) 
            for p_name in formula_predicates:
                generated_set.intersection_update(predicates[p_name])
        
        print(f"Target subset Y = {sorted(list(target_subset)) if target_subset else '{}'}")
        print(f"  - Formula: {formula_str}")
        print(f"  - Generated set C_Y = {sorted(list(generated_set)) if generated_set else '{}'}")
        print(f"  - Intersection with X: C_Y intersect X = {sorted(list(generated_set & points)) if (generated_set & points) else '{}'}")

        if generated_set != target_subset:
            shattered = False
            print("Mismatch found, shattering failed for this subset.")

    print("-" * 30)
    if shattered:
        print("Successfully shattered the set of 4 points.")
        print("This proves that the VC dimension is at least 4.")
    else:
        print("Failed to shatter the set of 4 points with this construction.")
        
    print("\nCombining with the theoretical upper bound (VC-dim <= 4), we conclude:")
    print("The VC dimension is 4.")


solve()