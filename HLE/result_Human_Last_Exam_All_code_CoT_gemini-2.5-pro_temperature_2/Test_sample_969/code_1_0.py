def solve_sequence_puzzle():
    """
    Analyzes the sequence 3 2 1 2 3 3 3 2 2 to determine the next 4 elements
    by identifying and extending its underlying block-based pattern.
    """
    initial_sequence = [3, 2, 1, 2, 3, 3, 3, 2, 2]

    # Step 1: Explain the pattern by breaking the sequence into blocks.
    print("The sequence can be understood by breaking it into blocks with specific properties.")
    print(f"Original sequence: {' '.join(map(str, initial_sequence))}\n")
    print("Identified Blocks:")
    print("Block 1: [3, 2, 1]   (Starts: 3, Length: 3, Type: Decreasing)")
    print("Block 2: [2, 3]     (Starts: 2, Length: 2, Type: Increasing)")
    print("Block 3: [3, 3, 3]   (Starts: 3, Length: 3, Type: Constant)")
    # Based on answer choices, we infer the incomplete block is completed with a '2'.
    print("Block 4: [2, 2, 2]   (Starts: 2, Length: 3, Type: Constant)\n")

    # Step 2: Define the rules for generating new blocks based on the pattern.
    print("Rules derived from the pattern:")
    print("1. Starting Number: Alternates between 3 and 2. Next block starts with 3.")
    print("2. Type: Repeats the cycle (Decreasing, Increasing, Constant, Constant). Next is Decreasing.")
    print("3. Length: Is 3, unless the Type is 'Increasing' (then it's 2). Next length is 3.\n")

    # Step 3: Generate the next block based on the discovered rules.
    print("Predicting the next block (Block 5):")
    next_block_start = 3
    next_block_length = 3
    # A decreasing block is generated by subtracting 1 at each step.
    next_block = [next_block_start - i for i in range(next_block_length)]
    print(f"Generated Block 5: {next_block}\n")
    
    # Step 4: Assemble the next 4 elements.
    # The first element completes Block 4.
    first_of_the_four = 2
    # The next three are from the start of Block 5.
    next_three = next_block
    
    next_four_elements = [first_of_the_four] + next_three

    # Step 5: Output the result clearly.
    # The prompt asks to output each number in the final solution.
    print("The final answer is composed of:")
    print(f"1. The number to complete the fourth block: {first_of_the_four}")
    print(f"2. The next three numbers from the start of the fifth block: {next_three[0]}, {next_three[1]}, {next_three[2]}")
    
    print("\n----------------------------------------------------")
    final_output_str = ' '.join(map(str, next_four_elements))
    print(f"The next 4 elements of the sequence are: {final_output_str}")
    print("----------------------------------------------------")
    
    # Also printing the full sequence with the extension for clarity
    full_sequence = initial_sequence + next_four_elements
    print(f"The completed sequence is: {' '.join(map(str, full_sequence))}")

# Execute the function to solve the puzzle
solve_sequence_puzzle()