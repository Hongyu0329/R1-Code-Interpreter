import numpy as np

def get_num_d_values(N):
    """
    Calculates the number of distinct non-zero values for the symmetric structure
    constants d_ijk of SU(N).
    
    Args:
        N (int): The dimension of the SU(N) group.
        
    Returns:
        int: The number of distinct non-zero d_ijk values.
    """
    if N < 3:
        # For SU(2), all d_ijk are zero.
        return 0

    # Use a tolerance for floating point comparisons
    TOL = 1e-9
    
    # Use a set to store unique values
    distinct_values = set()

    # Create the N-1 diagonal generators D_l
    diag_gens = []
    for l in range(1, N):
        c = 1.0 / np.sqrt(2 * l * (l + 1))
        d = np.zeros(N)
        d[:l] = 1.0
        d[l] = -l
        diag_gens.append(c * d)

    # --- OOD (Two Off-diagonal, One Diagonal) type ---
    # These are of the form d_l(j) + d_l(k)
    for l_idx, d_vec in enumerate(diag_gens):
        for j in range(N):
            for k in range(j + 1, N):
                val = d_vec[j] + d_vec[k]
                if abs(val) > TOL:
                    distinct_values.add(round(val, 9))

    # --- DDD (Three Diagonal) type ---
    # These are of the form 4 * Tr(D_l1 * D_l2 * D_l3)
    # The trace is the sum of the element-wise product of the diagonal vectors.
    for i in range(N - 1):
        for j in range(i, N - 1):
            for k in range(j, N - 1):
                val = 4.0 * np.sum(diag_gens[i] * diag_gens[j] * diag_gens[k])
                if abs(val) > TOL:
                    distinct_values.add(round(val, 9))
    
    # --- OOO (Three Off-diagonal) type ---
    # It can be shown that for any N>=3, this type gives values of +0.5 and -0.5.
    # These values are already generated by the OOD case with l=1.
    # d_1(0) + d_1(k>1) = c_1 * (1 + 0) = (1/sqrt(4)) * 1 = 0.5
    # d_1(1) + d_1(k>1) = c_1 * (-1 + 0) = (1/sqrt(4)) * -1 = -0.5
    # So we don't need to add them separately.

    return len(distinct_values)

if __name__ == '__main__':
    # This is an example for N=3, which is a common case in physics.
    # You can change this value to calculate for other N.
    N_val = 3
    num_values = get_num_d_values(N_val)
    print(f"For SU({N_val}), there are {num_values} different non-zero numerical values for d_ijk.")
    
    # Example for SU(4)
    N_val = 4
    num_values = get_num_d_values(N_val)
    print(f"For SU({N_val}), there are {num_values} different non-zero numerical values for d_ijk.")
    
    # Example for SU(5)
    N_val = 5
    num_values = get_num_d_values(N_val)
    print(f"For SU({N_val}), there are {num_values} different non-zero numerical values for d_ijk.")