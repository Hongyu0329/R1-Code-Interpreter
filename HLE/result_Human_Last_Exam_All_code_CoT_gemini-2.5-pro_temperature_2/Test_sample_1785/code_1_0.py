import math

def calculate_path_length(vertices):
    """Calculates the total length of a path on a lattice."""
    total_length = 0
    # Iterate through the vertices to calculate the length between consecutive points
    for i in range(len(vertices) - 1):
        p1 = vertices[i]
        p2 = vertices[i+1]
        # Manhattan distance |x1-x2| + |y1-y2| + |z1-z2|
        distance = abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) + abs(p1[2] - p2[2])
        total_length += distance
    
    # Add the length of the segment closing the loop (last vertex to first vertex)
    p_last = vertices[-1]
    p_first = vertices[0]
    distance = abs(p_last[0] - p_first[0]) + abs(p_last[1] - p_first[1]) + abs(p_last[2] - p_first[2])
    total_length += distance
    
    return total_length

def main():
    """
    Defines the components of the minimal lattice Borromean rings and calculates their total length.
    """
    # Vertices for the first component loop
    # This is a 12-edge, non-planar loop.
    component1_verts = [
        (0, 1, 2),
        (0, -1, 2),
        (2, -1, 2),
        (2, -1, 0),
        (2, 1, 0),
        (0, 1, 0),
    ]

    # The other two components are generated by a cyclic permutation of coordinates: (x,y,z) -> (y,z,x) -> (z,x,y)
    # This rotation maintains the shape, length, and ensures the components link correctly without intersecting.
    component2_verts = [(v[1], v[2], v[0]) for v in component1_verts]
    component3_verts = [(v[2], v[0], v[1]) for v in component1_verts]

    # Calculate the length of each component
    len1 = calculate_path_length(component1_verts)
    len2 = calculate_path_length(component2_verts)
    len3 = calculate_path_length(component3_verts)
    
    total_len = len1 + len2 + len3

    print(f"The minimum total number of edges is formed by three loops.")
    print(f"Length of Component 1: {len1}")
    print(f"Length of Component 2: {len2}")
    print(f"Length of Component 3: {len3}")
    print("The final equation for the total length is:")
    print(f"{len1} + {len2} + {len3} = {total_len}")


if __name__ == "__main__":
    main()