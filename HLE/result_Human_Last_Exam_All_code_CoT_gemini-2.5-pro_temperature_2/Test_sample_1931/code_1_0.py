import random

def is_prime(n, k=10):
    """
    Test if a number is prime using the Miller-Rabin primality test.
    k is the number of rounds, increasing it improves accuracy.
    """
    if n < 2:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False

    # Write n as 2^s * d + 1
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1

    for _ in range(k):
        a = random.randrange(2, n - 2)
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            # Loop fell through without finding a witness, so n is composite
            return False
    return True

def solve_puzzle():
    """
    Generates the sequence from the digits of e and finds the 6th prime.
    """
    # The digits of e = 2.718281828...
    # The string starts with '2' followed by the digits of e's fractional part.
    e_digits = "2718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181830632240738630303687521023"
    
    primes_found_list = []
    current_number_str = ""
    target_prime_count = 6
    target_suffix = "521023"

    print(f"Searching for the {target_prime_count}th prime in the sequence generated by the digits of e...")
    print("-" * 50)
    
    for digit in e_digits:
        current_number_str += digit
        
        # Optimization: A number greater than 5 ending in 5 cannot be prime.
        if len(current_number_str) > 1 and current_number_str.endswith('5'):
            continue
        
        num = int(current_number_str)
        if is_prime(num):
            primes_found_list.append(num)
            print(f"Found prime #{len(primes_found_list)}: {num}\n")
            
            if len(primes_found_list) == target_prime_count:
                break
    
    print("-" * 50)
    if len(primes_found_list) == target_prime_count:
        last_prime = primes_found_list[-1]
        if str(last_prime).endswith(target_suffix):
            print(f"Success! The {target_prime_count}th prime in the sequence ends in {target_suffix}.")
            print(f"The irrational number is e (Euler's number).")
        else:
            print("The 6th prime was found, but it did not have the correct ending.")
    else:
        print(f"Could not find {target_prime_count} primes with the provided digits.")

if __name__ == "__main__":
    solve_puzzle()
<<<e>>>