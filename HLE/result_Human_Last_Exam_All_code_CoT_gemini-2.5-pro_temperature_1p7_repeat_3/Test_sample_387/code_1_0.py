import numpy as np

# Step 1: Define the generating vectors for the original space.
# The space P corresponds to a cone generated by the standard basis vectors in R^3.
e1 = np.array([1, 0, 0])
e2 = np.array([0, 1, 0])
e3 = np.array([0, 0, 1])

# The dimension of the original space is the rank of the matrix of these vectors.
dim_original = np.linalg.matrix_rank(np.array([e1, e2, e3]))
print(f"The original space is associated with a cone in 3D, so its dimension is {dim_original}.")
print("-" * 20)

# Step 2: Define the log ideal generators and the new vector for the blowup.
# The ideal I is generated by u1=(1,0,0) and u2=(0,1,0).
u1 = e1
u2 = e2
# The log blowup introduces a new ray 'v' which is the sum of the ideal's generators.
v = u1 + u2
print(f"The log blowup is constructed by introducing a new ray v = u1 + u2 = {v}.")
print("-" * 20)

# Step 3: Define the new cones in the fan of the blowup.
# The blowup replaces the original cone with a fan whose maximal cones are sigma1 and sigma2.
# sigma1 is generated by e1, v, e3
# sigma2 is generated by e2, v, e3
M1 = np.array([e1, v, e3])
M2 = np.array([e2, v, e3])

# Step 4: Calculate the dimension of the new cones and find the maximum.
# The dimension of a cone is the rank of the matrix of its generating vectors.
dim1 = np.linalg.matrix_rank(M1)
print(f"The first new cone sigma1 is generated by:\n{M1}")
print(f"The dimension of sigma1 is: {dim1}\n")

dim2 = np.linalg.matrix_rank(M2)
print(f"The second new cone sigma2 is generated by:\n{M2}")
print(f"The dimension of sigma2 is: {dim2}\n")

# The dimension of the blown-up space is the maximum dimension of any cone in its fan.
dim_blowup = max(dim1, dim2)

print("-" * 20)
print("The dimension of the log blowup is the maximum of the dimensions of the new cones.")
# The final equation as requested
print(f"Dimension of Log Blowup = max({dim1}, {dim2}) = {dim_blowup}")

<<<3>>>