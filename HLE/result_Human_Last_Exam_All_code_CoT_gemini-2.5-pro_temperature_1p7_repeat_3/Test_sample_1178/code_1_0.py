import math
import itertools

def find_smallest_rectangle_area():
    """
    This function finds the area of the smallest integer length rectangle which admits a 
    non-guillotine tiling by squares from the set S={2x2, 3x3, 5x5, 7x7}.

    This is based on the principle that the smallest non-guillotine tiled rectangle must
    be fault-free, and for two square sizes with coprime sides 'a' and 'b', the smallest
    known fault-free tiled rectangle has dimensions a*(a+b) x b*(a+b).
    """
    
    # The set of side lengths for the available squares.
    side_lengths = [2, 3, 5, 7]
    print(f"The set of available square side lengths is S = {side_lengths}\n")

    # Generate all unique pairs of side lengths from the set S.
    # All pairs from S are coprime, so we can apply the formula.
    pairs = list(itertools.combinations(side_lengths, 2))

    min_area = float('inf')
    best_pair = None
    best_dims = None

    print("Evaluating candidate rectangles for each pair of side lengths (a, b):")
    for a, b in pairs:
        # For each pair, calculate the dimensions and area of the corresponding rectangle.
        W = a * (a + b)
        L = b * (a + b)
        area = W * L

        print(f"\n- For the pair ({a}, {b}):")
        print(f"  Rectangle dimensions are calculated as:")
        print(f"  Width  = {a} * ({a} + {b}) = {W}")
        print(f"  Length = {b} * ({a} + {b}) = {L}")
        print(f"  Area   = {W} * {L} = {area}")

        # Keep track of the rectangle with the minimum area found so far.
        if area < min_area:
            min_area = area
            best_pair = (a, b)
            best_dims = (W, L)

    # After checking all pairs, print the final result.
    W, L = best_dims
    print("\n-------------------------------------------------")
    print("The smallest rectangle is generated by the pair that yields the minimum area.")
    print(f"The best pair of side lengths is {best_pair}.")
    print(f"The dimensions of the smallest rectangle are {W}x{L}.")
    print("\nThe area of this rectangle is:")
    # The final equation output
    print(f"{W} * {L} = {min_area}")

find_smallest_rectangle_area()
<<<150>>>