{
  "question": "You are near the money bubble with 16bb UTG1. What hand should you jam?\n\nAnswer Choices:\nA. QJs\nB. None of these \nC. 99\nD. AJo\nE. AKo\nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>.",
  "response_list": [
    "When faced with a decision to go all-in (jam) in a poker tournament, especially in a high-pressure situation like being near the money bubble, players often use \"push/fold\" charts. These charts are based on Game Theory Optimal (GTO) strategy and tell you which hands are profitable to jam based on your position, stack size, and the number of players.\n\n**Step-by-step plan:**\n\n1.  **Analyze the situation:** You are in an early position (UTG+1) with a 16 big blind stack. Being in an early position means you must be cautious, as many players are yet to act behind you.\n2.  **Consider the bubble:** The \"money bubble\" adds significant pressure. You want to avoid busting out just before you're guaranteed a payout. This pressure, known as the Independent Chip Model (ICM) pressure, forces you to play tighter than you normally would. You should only jam with very strong hands.\n3.  **Define a shoving range:** Based on these factors, we will define a very tight shoving range that accounts for the extreme ICM pressure of the bubble. A reasonable range for this specific spot would be `TT+` (pocket tens or better), `AKs` (Ace-King suited), and `AKo` (Ace-King offsuit).\n4.  **Evaluate the options:** We will write a Python script to check which of the given hands (QJs, 99, AJo, AKo) fall within this tight, bubble-factor-adjusted range. The script will tell us which hand is the correct one to jam.\n\nThe Python code below will define this range and check each of your hand options against it to determine the correct action.\n\n```python\nimport sys\n\ndef get_rank(card):\n    \"\"\"Returns the numerical rank of a card.\"\"\"\n    if card.isdigit():\n        return int(card)\n    return {'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}[card]\n\ndef is_in_range(hand, hand_range):\n    \"\"\"\n    Checks if a hand is within a defined GTO range.\n    Range notation examples: '77+' (pairs), 'A9s+' (suited aces), 'KQo' (specific offsuit).\n    \"\"\"\n    card1_rank = get_rank(hand[0])\n    card2_rank = get_rank(hand[1])\n    is_suited = len(hand) == 3 and hand[2] == 's'\n    is_pair = card1_rank == card2_rank\n\n    for r_hand in hand_range:\n        # Case 1: Pocket Pair Range (e.g., 'TT+')\n        if r_hand.endswith('+') and r_hand[0] == r_hand[1]:\n            if is_pair:\n                min_rank = get_rank(r_hand[0])\n                if card1_rank >= min_rank:\n                    return True\n        # Case 2: Suited High Card Range (e.g., 'AJs+')\n        elif r_hand.endswith('s+'):\n            if is_suited and card1_rank == get_rank(r_hand[0]):\n                min_rank_kicker = get_rank(r_hand[1])\n                if card2_rank >= min_rank_kicker:\n                    return True\n        # Case 3: Offsuit High Card Range (e.g., 'AQo+')\n        elif r_hand.endswith('o+'):\n            if not is_suited and card1_rank == get_rank(r_hand[0]):\n                min_rank_kicker = get_rank(r_hand[1])\n                if card2_rank >= min_rank_kicker:\n                    return True\n        # Case 4: Specific Hand (e.g., AKs, KQo)\n        else:\n            if hand.lower() == r_hand.lower():\n                return True\n    return False\n\ndef main():\n    \"\"\"\n    Main function to analyze the poker hand choices.\n    \"\"\"\n    # Define a tight shoving range for 16bb UTG+1 on the bubble.\n    # This range accounts for heavy ICM pressure.\n    # TT+ means TT, JJ, QQ, KK, AA.\n    # AKs is Ace-King suited.\n    # AKo is Ace-King offsuit.\n    shoving_range = ['TT+', 'AKs', 'AKo']\n\n    # The user's hand options\n    options = {\n        'A': 'QJs',\n        'C': '99',\n        'D': 'AJo',\n        'E': 'AKo'\n    }\n\n    print(\"Analyzing shove/fold decisions for 16bb UTG+1 on the money bubble.\")\n    print(f\"Using a tight GTO Range: {', '.join(shoving_range)}\\n\")\n\n    correct_option = None\n    for option, hand in options.items():\n        if is_in_range(hand, shoving_range):\n            action = \"SHOVE\"\n            correct_option = option\n        else:\n            action = \"FOLD\"\n        \n        # We need to print each part of the final equation to be helpful\n        # The equation here is the logical check of each option\n        print(f\"Hand: {hand} ({option}) -> Action: {action}\")\n        \n    # The problem implies a single best answer. \n    # Our tight, bubble-adjusted range yields one correct shove.\n    # The following line is not part of the required output format but helps clarify.\n    # print(f\"\\nBased on this analysis, the correct hand to jam is {options.get(correct_option)}.\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n<<<E>>>"
  ],
  "user_prompt_list": [
    "You are a helpful AI assistant. Solve tasks using your coding skills.\n    In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute.\n    Don't include multiple code blocks in one response, only include one in the response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant.\n    Think the task step by step if you need to. If a plan is not provided, explain your plan first. You can first output your thinking steps with texts and then the final python code.\n    Remember in the final code you still need to output each number in the final equation!\n    Start the python block with ```python\n\n    You are near the money bubble with 16bb UTG1. What hand should you jam?\n\nAnswer Choices:\nA. QJs\nB. None of these \nC. 99\nD. AJo\nE. AKo\nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>."
  ],
  "system_message": ""
}