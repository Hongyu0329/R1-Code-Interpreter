def calculate_max_excitation_level():
    """
    Calculates the maximum excitation level generated by the CCSD
    similarity-transformed Hamiltonian acting on a reference determinant.
    """

    # 1. Define the maximum body-rank of the fundamental operators.
    # The electronic Hamiltonian (H) is a two-body operator.
    H_rank = 2
    # The CCSD cluster operator (T=T1+T2) has a maximum rank of 2.
    T_rank = 2

    # 2. Define the rule for the rank of a commutator.
    # rank([A_m, B_n]) = m + n - 1
    def commutator_rank(rank_A, rank_B):
        return rank_A + rank_B - 1

    # 3. Calculate the rank of each term in the terminating BCH expansion for H_bar.
    # H_bar = H + [H,T] + 1/2[[H,T],T] + 1/6[[[H,T],T],T] + 1/24[[[[H,T],T],T],T]
    
    # Zeroth-order term: H
    comm0_rank = H_rank
    
    # First-order commutator: [H,T]
    comm1_rank = commutator_rank(comm0_rank, T_rank)
    
    # Second-order commutator: [[H,T],T]
    comm2_rank = commutator_rank(comm1_rank, T_rank)

    # Third-order commutator: [[[H,T],T],T]
    comm3_rank = commutator_rank(comm2_rank, T_rank)

    # Fourth-order commutator: [[[[H,T],T],T],T]
    comm4_rank = commutator_rank(comm3_rank, T_rank)

    bch_term_ranks = [comm0_rank, comm1_rank, comm2_rank, comm3_rank, comm4_rank]
    
    # 4. The maximum body-rank of H_bar is the maximum of these terms.
    max_body_rank = max(bch_term_ranks)

    # The maximum excitation level from the reference is equal to the max body-rank.
    max_excitation = max_body_rank

    # 5. Print the derivation of the result.
    print("Derivation of the maximum excitation level:")
    print("-" * 40)
    print(f"Max body-rank of Hamiltonian H: {H_rank}")
    print(f"Max body-rank of CCSD operator T: {T_rank}")
    print("\nCalculating body-rank of terms in the BCH expansion of H_bar:")
    print(f"Rank(H) = {comm0_rank}")
    print(f"Rank([H,T]) = Rank(H) + Rank(T) - 1 = {H_rank} + {T_rank} - 1 = {comm1_rank}")
    print(f"Rank([[H,T],T]) = Rank([H,T]) + Rank(T) - 1 = {comm1_rank} + {T_rank} - 1 = {comm2_rank}")
    print(f"Rank([[[H,T],T],T]) = Rank([[H,T],T]) + Rank(T) - 1 = {comm2_rank} + {T_rank} - 1 = {comm3_rank}")
    print(f"Rank([[[[H,T],T],T],T]) = Rank([[[H,T],T],T]) + Rank(T) - 1 = {comm3_rank} + {T_rank} - 1 = {comm4_rank}")

    # The final equation showing how the maximum is determined
    final_equation_str = f"Max Excitation Level = max({bch_term_ranks[0]}, {bch_term_ranks[1]}, {bch_term_ranks[2]}, {bch_term_ranks[3]}, {bch_term_ranks[4]})"
    print(f"\nFinal Equation: {final_equation_str}")

    print(f"Result: {max_excitation}")
    print("-" * 40)

    # 6. State the conclusion.
    print("\nConclusion:")
    print(f"The similarity-transformed Hamiltonian, H_bar, can create excitations up to level {max_excitation}.")
    print("Therefore, the matrix elements <Phi_K | H_bar | Phi> are identically zero for all")
    print(f"excited Slater determinants |Phi_K> with an excitation level of {max_excitation + 1} or greater.")

if __name__ == "__main__":
    calculate_max_excitation_level()