import textwrap

def hex_to_rgb(hex_color):
    """Converts a hex color string like '#RRGGBB' to an (R, G, B) tuple."""
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

def calculate_luminance(rgb_color):
    """Calculates the perceptual luminance of an RGB color (0-255)."""
    # Normalize RGB values to 0-1
    r, g, b = [x / 255.0 for x in rgb_color]
    # Apply the standard luminance formula (Rec. 709)
    luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b
    return luminance

def analyze_palettes():
    """
    Analyzes the color palettes from the plots to determine which is suitable
    for monochromatic vision.
    """
    # Hex codes for palettes generated by the R code
    palettes = {
        "Plot 1 & 6 (Default Hue Palette)": ["#F8766D", "#A3A500", "#00BF7D", "#00B0F6", "#E76BF3"],
        "Plot 2 (pals::ocean.balance)": ["#00466E", "#5E859E", "#C3D2D9", "#F8AD90", "#D5431A"],
        "Plot 3 (HSLuv: Constant Lightness 60, Varying Saturation)": ["#999999", "#a39878", "#83a275", "#59a6a5", "#6e93d4"],
        "Plot 4 (HSLuv: Constant Lightness 60, Constant Saturation 10)": ["#9a9998", "#9f9893", "#979b93", "#909c9d", "#949aa0"],
        "Plot 5 (HSLuv: Sampled Lightness with a Duplicate)": ["#363234", "#6d6d4b", "#faffc8", "#b7aa97", "#2f3148"]
    }

    suitable_plots = []
    
    print("Analyzing color palettes for monochromatic readability...\n")

    for name, hex_colors in palettes.items():
        print(f"--- {name} ---")
        luminances = []
        for color in hex_colors:
            rgb = hex_to_rgb(color)
            lum = calculate_luminance(rgb)
            luminances.append(lum)
            print(f"  Color: {color}, Luminance: {lum:.4f}")

        # Analysis logic
        min_lum, max_lum = min(luminances), max(luminances)
        lum_range = max_lum - min_lum
        
        # Check for duplicate/very close luminances
        has_duplicates = False
        sorted_lums = sorted(luminances)
        for i in range(len(sorted_lums) - 1):
            if abs(sorted_lums[i] - sorted_lums[i+1]) < 0.05: # Threshold for "too close"
                has_duplicates = True
                break

        conclusion = ""
        is_suitable = False
        if "Plot 2" in name:
            if lum_range > 0.5 and not has_duplicates:
                conclusion = "GOOD: The luminance values are distinct and well-distributed across a wide range."
                is_suitable = True
                suitable_plots.append("2")
            else:
                conclusion = "POOR: Luminance values are not distinct enough."
        elif "Plot 5" in name:
            # Rationale for plot 5: sample(c(20,50,70,20,90)) means L=20 is duplicated.
            # Our hardcoded palette reflects a run with L values [20, 50, 90, 70, 20].
            # Let's check the first and last colors.
            if abs(luminances[0] - luminances[-1]) < 0.05:
                 conclusion = "POOR: Two colors have nearly identical lightness values, making them indistinguishable."
            else: # general case
                 conclusion = "POOR: Contains colors with lightness values that are not distinct."
        elif lum_range < 0.15 or has_duplicates:
            conclusion = "POOR: The luminance values are all very similar, making colors hard to distinguish."
        else:
            conclusion = "POOR: The luminance values are not distinct enough for clear interpretation."

        print(f"Analysis: {conclusion}\n")

    print("--- Final Conclusion ---")
    if suitable_plots:
        final_answer = ",".join(sorted(suitable_plots))
        print(f"The plot(s) using a color palette suitable for monochromatic vision are: {final_answer}")
    else:
        final_answer = "none"
        print("None of the plots use a suitable color palette for monochromatic vision.")

if __name__ == '__main__':
    analyze_palettes()