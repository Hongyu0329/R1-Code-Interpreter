def solve():
    """
    This function determines which of the 20 objects generate a prime tt-ideal
    and how many such ideals are not generated by any of the objects.

    Based on the theory of tensor-triangulated geometry for representations of finite groups,
    the specified category K has exactly three prime tt-ideals. These ideals and their
    canonical generators are:
    1. The ideal of perfect complexes, P_perf, generated by the regular representation kC_p.
    2. The ideal of k-acyclic complexes, P_acyc, generated by the special complex S.
    3. The ideal corresponding to cohomological support, P_cohom, generated by cone(tau).

    We identify which of the 20 listed objects correspond to these generators.
    """

    # Objects generating P_perf (the ideal of perfect complexes)
    # The canonical generator is kC_p.
    # Object 2: kC_p(0) is the generator.
    # Objects 4, 5, 6: rad(kC_p) and its gapped versions are isomorphic to kC_p as modules,
    # making them perfect and thus generators for this ideal.
    p_perf_generators = [2, 4, 5, 6]

    # Objects generating P_cohom (the ideal related to cohomology)
    # The canonical generator is cone(tau). Its tensor powers generate the same prime ideal.
    # Object 7: cone(tau) is the generator.
    # Objects 8, 9, 10 are tensor powers of object 7.
    p_cohom_generators = [7, 8, 9, 10]

    # Objects generating P_acyc (the ideal of k-acyclic complexes)
    # The canonical generator is the complex S.
    # Object 15: S is the generator.
    p_acyc_generators = [15]

    # Combine all generator indices and sort them.
    all_generators = sorted(p_perf_generators + p_cohom_generators + p_acyc_generators)

    # The problem identifies 3 prime ideals, and we have found generators for all of them
    # in the provided list. Therefore, the number of prime tt-ideals not generated
    # by any of these objects is 0.
    unaccounted_primes_count = 0

    # Format the output string as requested.
    # Example format: "2,3,5,7,11,13,17,19;4"
    result_string = ",".join(map(str, all_generators)) + ";" + str(unaccounted_primes_count)
    print(result_string)

solve()