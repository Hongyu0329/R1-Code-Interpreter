172[#include <stdio.h>

void main() {
    // Variable Declarations (Total Memory: 172D)
    // result: Stores digits of 100! in reverse order (158 digits are needed)
    digit result[158] = {0};  // 158 * 1D = 158D
    // i: Loop counter for multiplication, from 2 to 100
    char i;                   // 3D (0-999) is sufficient
    // j: Loop counter for iterating through the digits of the result array
    char j;                   // 3D (0-999) is sufficient for array index
    // size: Stores the current number of digits in the result array
    char size;                // 3D (0-999) is sufficient for size up to 158
    // carry: Stores the carry-over value during multiplication
    short carry;              // 2D (0-99) is sufficient
    // product: Stores the intermediate product of a digit and 'i' plus carry
    char product;             // 3D (max value is ~9*100+99=999, so 0-999 is sufficient)
    
    // Initialize the result to 1
    result[0] = 1;
    size = 1;

    // Calculate 100! by repeatedly multiplying the result by i
    for (i = 2; i <= 100; i++) {
        carry = 0;
        // Multiply each digit of the current result by i
        for (j = 0; j < size; j++) {
            product = result[j] * i + carry;
            result[j] = product % 10;
            carry = product / 10;
        }
        
        // If there is a remaining carry, append its digits to the result array
        while (carry > 0) {
            result[size] = carry % 10;
            size++;
            carry = carry / 10;
        }
    }

    // Print the final calculated value of 100!
    // The digits are stored in reverse, so we print from the end of the array.
    // The while loop correctly handles the unsigned 'j' counter.
    printf("100! = ");
    j = size;
    while (j > 0) {
        j--;
        printf("%d", result[j]);
    }
    printf("\\n");
}]