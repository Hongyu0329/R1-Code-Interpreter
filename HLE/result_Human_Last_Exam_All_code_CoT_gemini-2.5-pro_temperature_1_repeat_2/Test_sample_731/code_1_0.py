def solve_power_subgroups():
    """
    Calculates the number of power subgroups (cyclic subgroups) in the
    semidihedral group of size 512.
    """
    group_order = 512

    # A semidihedral group SD_{2^n} has order 2^n.
    # For a group of size 512, we find n such that 2^n = 512.
    # n = log2(512)
    n = group_order.bit_length() - 1

    print(f"The semidihedral group of size {group_order} is SD_{{{2**n}}}.")
    print(f"This corresponds to n = {n} in the general formula for SD_{{2^n}}.")
    print("-" * 40)

    # Step 1: Count cyclic subgroups from the cyclic part <r>
    # The subgroup <r> is cyclic of order 2^(n-1).
    # A cyclic group of order m has one subgroup for each divisor of m.
    # The number of divisors of 2^(k) is k+1. Here k = n-1.
    order_of_r_subgroup = 2**(n - 1)
    num_subgroups_from_r = n
    print("Step 1: Counting cyclic subgroups from the main cyclic subgroup <r>.")
    print(f"This subgroup is cyclic of order 2^({n}-1) = {order_of_r_subgroup}.")
    print(f"The number of subgroups of a cyclic group of order 2^k is k+1.")
    print(f"In this case, k = n-1 = {n-1}, so the number of subgroups is {n-1}+1 = {n}.")
    print(f"Number of cyclic subgroups from <r> = {num_subgroups_from_r}")
    print("-" * 40)

    # Step 2: Count cyclic subgroups from the coset s<r>
    # These are generated by elements of the form sr^i.
    print("Step 2: Counting cyclic subgroups generated by elements of the form sr^i.")
    
    # Case 2a: When i is even.
    # The elements sr^i where i is even have order 2.
    # There are 2^(n-1) / 2 = 2^(n-2) such elements.
    # Each generates a distinct cyclic subgroup of order 2, which are new.
    num_subgroups_i_even = 2**(n - 2)
    print("  Sub-step 2a: For i being even.")
    print(f"  There are 2^({n}-2) = {num_subgroups_i_even} elements of order 2.")
    print(f"  These generate {num_subgroups_i_even} new cyclic subgroups.")

    # Case 2b: When i is odd.
    # The elements sr^i where i is odd have order 4.
    # There are 2^(n-2) such elements.
    # They generate cyclic subgroups that come in pairs, so we divide by 2.
    num_subgroups_i_odd = 2**(n - 3)
    print("\n  Sub-step 2b: For i being odd.")
    print(f"  There are 2^({n}-2) = {2**(n-2)} elements of order 4.")
    print(f"  These generate 2^({n}-2) / 2 = 2^({n-3}) = {num_subgroups_i_odd} new cyclic subgroups.")
    print("-" * 40)

    # Step 3: Sum the results
    total_subgroups = num_subgroups_from_r + num_subgroups_i_even + num_subgroups_i_odd
    print("Step 3: Summing the counts from all cases.")
    print("Final Equation:")
    print(f"Total Subgroups = (from <r>) + (from sr^i, i even) + (from sr^i, i odd)")
    print(f"Total = {num_subgroups_from_r} + {num_subgroups_i_even} + {num_subgroups_i_odd}")
    print(f"Total number of power subgroups = {total_subgroups}")

solve_power_subgroups()