import math

def number_of_divisors(n):
    """
    Calculates the number of positive divisors of an integer n (tau function).
    """
    if n <= 0:
        return 0
    count = 0
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            # If divisors are the same (perfect square), count one
            if n // i == i:
                count += 1
            # Otherwise, count both i and n/i
            else:
                count += 2
    return count

def phi(n):
    """
    Calculates Euler's totient function phi(n).
    """
    result = n
    p = 2
    while p * p <= n:
        if n % p == 0:
            while n % p == 0:
                n //= p
            result -= result // p
        p += 1
    if n > 1:
        result -= result // n
    return result

def solve_q128_subgroups():
    """
    Calculates the number of power subgroups in the generalized quaternion group Q_128.
    """
    group_order = 128
    
    # For a generalized quaternion group Q_4n, the order is 4n.
    # Q_128 implies 4n = 128, so n = 32.
    n = group_order // 4
    
    # The group has a maximal cyclic subgroup <x> of order 2n.
    order_of_x_subgroup = 2 * n

    print("Step 1: Calculate the number of cyclic subgroups contained within the maximal cyclic subgroup <x>.")
    print(f"The order of <x> is {order_of_x_subgroup}.")
    # The number of subgroups of a cyclic group of order m is the number of divisors of m, tau(m).
    num_subgroups_in_x = number_of_divisors(order_of_x_subgroup)
    print(f"The number of divisors of {order_of_x_subgroup} is {num_subgroups_in_x}. These are the subgroups of <x>.\n")

    print("Step 2: Calculate the number of cyclic subgroups generated by elements not in <x>.")
    # These elements are of the form yx^k. There are 2n = 64 such elements.
    # All of these elements can be shown to have order 4.
    num_elements_outside_x = 2 * n
    order_of_yxk = 4
    print(f"There are {num_elements_outside_x} elements of the form yx^k, and each has order {order_of_yxk}.")
    
    # A cyclic group of order 4 has phi(4) generators.
    generators_per_group = phi(order_of_yxk)
    print(f"Each cyclic subgroup of order {order_of_yxk} has {generators_per_group} generators.")
    
    # The number of distinct subgroups is the number of elements divided by the number of generators per subgroup.
    num_subgroups_from_yxk = num_elements_outside_x // generators_per_group
    print(f"The number of distinct cyclic subgroups generated by these elements is {num_elements_outside_x} / {generators_per_group} = {num_subgroups_from_yxk}.\n")
    
    print("Step 3: Calculate the total number of power (cyclic) subgroups.")
    # The two sets of subgroups are disjoint, so we sum the counts.
    total_subgroups = num_subgroups_in_x + num_subgroups_from_yxk
    print(f"Total number of power subgroups = {num_subgroups_in_x} + {num_subgroups_from_yxk} = {total_subgroups}.")

if __name__ == "__main__":
    solve_q128_subgroups()
