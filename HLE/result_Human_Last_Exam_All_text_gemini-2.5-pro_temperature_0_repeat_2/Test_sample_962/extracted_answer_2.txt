The final answer is a detailed design for a t-out-of-n threshold signature scheme. The design is based on Schnorr signatures over an elliptic curve group and consists of three phases: a one-time Distributed Key Generation (DKG) using Pedersen VSS, a two-round signing protocol, and a final non-interactive aggregation step.

**Phase 1: DKG**
- All `n` parties run a `(t, n)`-Pedersen VSS to generate a shared public key `P` and distribute secret shares `s_i` without any single party knowing the full private key.

**Phase 2: Two-Round Signing Protocol (for `t` parties)**
- **Round 1 (Commitment):** Each of the `t` signers `i` generates a random nonce `k_i`, computes the public point `R_i = k_i G`, and broadcasts a commitment `C_i = H(R_i)` to prevent adaptive nonce attacks.
- **Round 2 (Reveal & Partial Signature):** After receiving all commitments, each signer `i` broadcasts their nonce point `R_i`. They verify that all received `R_j` match the commitments `C_j`. If so, they compute the aggregated nonce `R = \sum R_j`, the challenge `c = H(P, R, m)`, and their partial signature `z_i = k_i + c \cdot L_i \cdot s_i`, where `L_i` is their public Lagrange coefficient. This `z_i` is then broadcast.

**Phase 3: Aggregation**
- An aggregator collects the `t` partial signatures `z_i` and sums them to get the final signature scalar `z = \sum z_i`. The complete signature is the pair `(R, z)`.

This design is tightly secure because its security proof reduces closely to the hardness of the Discrete Logarithm Problem in the Random Oracle Model. The two-round commit-and-reveal structure is crucial for achieving this security against malicious adversaries.