172[
#define MAX_DIGITS 158

/*
 * This program calculates 100 factorial (100!) for the Wuxing computer.
 * It is designed to use the smallest possible amount of memory for its
 * variables, based on the Wuxing C compiler specification.
 *
 * Total variable memory footprint: 172D.
 * Breakdown:
 *   digit z[158]:      158 * 1D = 158D
 *   char i:             1 * 3D =   3D
 *   char j:             1 * 3D =   3D
 *   char num_digits:    1 * 3D =   3D
 *   char product:       1 * 3D =   3D
 *   short carry:        1 * 2D =   2D
 *   ---------------------------------
 *   Total:                       172D
*/
void main() {
    digit z[MAX_DIGITS];
    char i, j, num_digits, product;
    short carry;

    // Initialize the result array 'z' to all zeros, as the initial
    // state of memory is not guaranteed.
    for (j = 0; j < MAX_DIGITS; j = j + 1) {
        z[j] = 0;
    }

    // Set the initial value for the calculation to 1.
    z[0] = 1;
    num_digits = 1;

    // Calculate 100! by multiplying the result by i from 2 to 100.
    for (i = 2; i <= 100; i = i + 1) {
        carry = 0;
        // Perform long multiplication: z = z * i
        for (j = 0; j < num_digits; j = j + 1) {
            product = z[j] * i + carry;
            z[j] = product % 10;
            carry = product / 10;
        }

        // Handle any remaining carry, which may extend the number of digits.
        while (carry > 0) {
            z[num_digits] = carry % 10;
            carry = carry / 10;
            num_digits = num_digits + 1;
        }
    }

    // Print the final result. The digits are stored in reverse order.
    // A 'while' loop is used to safely iterate backwards, as the loop
    // counter 'j' (type 'char') is unsigned and would otherwise cause
    // an infinite loop.
    j = num_digits;
    while (j > 0) {
        j = j - 1;
        printf("%d", z[j]);
    }
}
]