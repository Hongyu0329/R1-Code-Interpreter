import sys

def find_best_litigation_forum():
    """
    Analyzes a legal scenario to determine the best litigation forum.
    """
    # --- Case Details ---
    # Based on the user's scenario
    case_facts = {
        "value_exceeds_35k": True,
        "is_complex_commercial": True,
        "jurisdiction": "Ontario Provincial",
        "primary_goal": "speed",
        "is_appeal": False
    }

    # --- Forum Options ---
    # 'is_specialized_commercial' also implies it's designed for speed.
    forums = {
        'A': {'name': "Ontario Court of Appeal", 'is_trial_court': False, 'handles_provincial': True, 'monetary_limit_ok': True, 'is_specialized_commercial': False},
        'B': {'name': "Commercial List", 'is_trial_court': True, 'handles_provincial': True, 'monetary_limit_ok': True, 'is_specialized_commercial': True},
        'C': {'name': "Superior Court of Justice", 'is_trial_court': True, 'handles_provincial': True, 'monetary_limit_ok': True, 'is_specialized_commercial': False},
        'D': {'name': "Small Claims Court", 'is_trial_court': True, 'handles_provincial': True, 'monetary_limit_ok': False, 'is_specialized_commercial': False},
        'E': {'name': "Federal Court of Canada", 'is_trial_court': True, 'handles_provincial': False, 'monetary_limit_ok': True, 'is_specialized_commercial': False}
    }

    print("Analyzing Litigation Forum Options:")
    print("-" * 35)

    best_choice = None
    reasoning = {}

    for key, props in forums.items():
        # Rule-based evaluation
        if case_facts["is_appeal"] and not props['is_trial_court']:
            reasoning[key] = f"Rejected: The scenario is a new claim, not an appeal."
            continue # This logic path is for hypotheticals, not the current case.
        if not case_facts["is_appeal"] and not props['is_trial_court']:
            reasoning[key] = f"Rejected: {props['name']} is an appellate court. New cases cannot be started here."
            continue
        if not props['handles_provincial']:
            reasoning[key] = f"Rejected: {props['name']} does not have jurisdiction over private, provincial commercial disputes."
            continue
        if not props['monetary_limit_ok']:
            reasoning[key] = f"Rejected: {props['name']} is for low-value claims. This case's value is too high."
            continue
        
        # If we reach here, the forum is a possible candidate.
        reasoning[key] = f"Candidate: {props['name']} is a potential forum."
        
    # After initial filtering, find the *best* candidate.
    # The best choice is the specialized one, as it satisfies the 'speed' requirement.
    for key in reasoning:
        if "Candidate" in reasoning[key]:
            if forums[key]['is_specialized_commercial'] and case_facts['is_complex_commercial'] and case_facts['primary_goal'] == 'speed':
                best_choice = key
                reasoning[key] += " This is the BEST choice because it is specialized for complex commercial cases and designed for speed, meeting all of the client's needs."
            elif best_choice is None: # For non-specialized but valid options
                reasoning[key] += " While a valid court, it is not specialized and may not be the fastest option."


    # Print the analysis step-by-step
    for key in sorted(forums.keys()):
        print(f"Choice {key}: {forums[key]['name']}")
        print(f"  - Analysis: {reasoning[key]}\n")

    print("-" * 35)
    print(f"Conclusion: Based on the need for speed and the complex commercial nature of the dispute, the best choice is {best_choice}.")
    
    # Final Answer as required
    # This prints the required <<<answer>>> format, but to the console as requested,
    # without asking the user to copy/paste.
    # print(f"\n<<<{best_choice}>>>")
    # The final output will be generated by the calling environment based on the actual result.
    
if __name__ == '__main__':
    find_best_litigation_forum()
