import itertools

def solve_vc_dimension():
    """
    This script demonstrates that the VC dimension of monotone conjunctions
    of 4 predicates is at least 4 by shattering a set of 4 points.
    """
    # 1. Define a set X of 4 points.
    points = ['x1', 'x2', 'x3', 'x4']
    X = set(points)
    print(f"Set of points to shatter: X = {sorted(list(X))}\n")

    # 2. Define the 4 predicates (P1, P2, P3, P4) as subsets of X.
    # The construction P_i = X \ {x_i} is used.
    # A predicate is represented as a set of points for which it is true.
    p1 = X - {'x1'}
    p2 = X - {'x2'}
    p3 = X - {'x3'}
    p4 = X - {'x4'}
    predicates = {'P1': p1, 'P2': p2, 'P3': p3, 'P4': p4}

    print("Defined Predicates:")
    for name, p_set in predicates.items():
        print(f"  {name} = {sorted(list(p_set))}")
    print("-" * 40)

    # 3. Iterate through all 2^4 = 16 possible subsets of X to show they can be formed.
    num_points = len(points)
    shattered = True
    for i in range(2**num_points):
        target_subset = set()
        # Generate the target subset using a bitmask
        for j in range(num_points):
            if (i >> j) & 1:
                target_subset.add(points[j])

        # 4. Find the concept (intersection of predicates) that generates the target_subset.
        # The rule is: to obtain a target Y, we intersect the predicates P_k
        # for all k where x_k is NOT in Y.
        predicates_to_intersect = []
        # Start with the universal set U = X, which corresponds to the empty conjunction (True)
        generated_set = X.copy()
        
        for k in range(num_points):
            if points[k] not in target_subset:
                # points are 0-indexed, predicates are 1-indexed
                p_name = f'P{k+1}'
                predicates_to_intersect.append(p_name)
                generated_set.intersection_update(predicates[p_name])
        
        if not predicates_to_intersect:
            # This corresponds to the empty conjunction, i.e., the formula is TOP.
            equation_str = "TOP (empty conjunction)"
        else:
            equation_str = " & ".join(predicates_to_intersect)
        
        print(f"Target Subset: {sorted(list(target_subset))}")
        print(f"  - Generated by: {equation_str}")
        print(f"  - Result: {sorted(list(generated_set))}")

        if generated_set != target_subset:
            shattered = False
            print("  - MISMATCH!")
        print("")

    if shattered:
        print("\nSuccessfully shattered the set of 4 points.")
        print("This proves that the VC dimension is at least 4.")
    else:
        print("\nFailed to shatter the set of 4 points.")

    # From the upper bound argument (17 concepts < 32 needed for 5 points),
    # the VC dimension is less than 5.
    # Since it is >= 4 and < 5, the VC dimension is 4.
    final_vc_dim = 4
    print(f"\nThe final VC dimension is {final_vc_dim}.")

solve_vc_dimension()