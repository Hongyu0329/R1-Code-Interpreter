import math

def solve():
    """
    Calculates the number of power subgroups (cyclic subgroups) in the
    semidihedral group of size 512.
    """
    group_size = 512

    # For a semidihedral group SD_{2^n}, the order is 2^n.
    # We need to find the value of n.
    if group_size <= 0 or (group_size & (group_size - 1)) != 0:
        print(f"Error: Group size must be a power of 2. Got {group_size}")
        return

    n = int(math.log2(group_size))

    # The number of power subgroups is the sum of three distinct types:
    # 1. Subgroups of the maximal cyclic subgroup <r>, which is of order 2^(n-1).
    #    The number of subgroups of a cyclic group C_m is tau(m), the number of
    #    divisors of m. For m = 2^(n-1), tau(m) = (n-1) + 1 = n.
    subgroups_in_r = n

    # 2. Cyclic subgroups generated by elements of the form s*r^i where i is even.
    #    These elements have order 2. There are 2^(n-2) such elements,
    #    each generating a distinct subgroup.
    subgroups_sr_even = 2**(n - 2)

    # 3. Cyclic subgroups generated by elements of the form s*r^i where i is odd.
    #    These elements have order 4. There are 2^(n-2) such elements, which
    #    form pairs that generate the same subgroup. So there are
    #    2^(n-2) / 2 = 2^(n-3) distinct subgroups.
    subgroups_sr_odd = 2**(n - 3)

    # The total is the sum of these three values.
    total_subgroups = subgroups_in_r + subgroups_sr_even + subgroups_sr_odd

    print("The number of power subgroups in the semidihedral group of size 512 is the sum of:")
    print(f"- The {subgroups_in_r} cyclic subgroups contained in the maximal cyclic subgroup.")
    print(f"- The {subgroups_sr_even} cyclic subgroups of order 2 generated by elements outside the maximal cyclic subgroup.")
    print(f"- The {subgroups_sr_odd} cyclic subgroups of order 4 generated by elements outside the maximal cyclic subgroup.")
    print("\nFinal calculation:")
    print(f"{subgroups_in_r} + {subgroups_sr_even} + {subgroups_sr_odd} = {total_subgroups}")

solve()