import sympy

# In our derivation, we found a short exact sequence for H_1(X, Z):
# 0 -> Coker(f) -> H_1(X, Z) -> Ker(g) -> 0
# where f is multiplication by 2 on Z/12Z
# and g is multiplication by 0 on Z.

# Let's compute the cokernel of f.
# f: Z/12Z -> Z/12Z, f(x) = 2x
# The image of f is the subgroup generated by 2 in Z/12Z.
image_f = { (2 * i) % 12 for i in range(12) }
image_order = len(image_f)

# The cokernel is the quotient group (Z/12Z) / Im(f).
# Its order is |Z/12Z| / |Im(f)|.
coker_order = 12 // image_order

# Since the quotient of a cyclic group is cyclic,
# Coker(f) is isomorphic to Z/coker_order Z.
coker_group_str = f"Z/{coker_order}Z"
print(f"The group H_1(X_o, Z) is Z/12Z.")
print(f"The map phi_* induces multiplication by -1 on H_1(X_o, Z).")
print(f"The map 1-phi_* is multiplication by 1 - (-1) = 2.")
print(f"The image of multiplication by 2 on Z/12Z is {sorted(list(image_f))}.")
print(f"The order of the image is {image_order}.")
print(f"The cokernel group Coker(1-phi_*) is (Z/12Z) / ({image_order}Z/12Z), which is isomorphic to {coker_group_str}.")

# Now let's compute the kernel of g.
# g: Z -> Z, g(x) = 0x = 0
# The kernel of g is the set of all integers x such that 0*x = 0.
# This is the entire group Z.
ker_g_str = "Z"
print(f"The kernel of the map g (multiplication by 0 on Z) is {ker_g_str}.")

# The short exact sequence is:
# 0 -> Z/2Z -> H_1(X, Z) -> Z -> 0
# Since Z is a free module, this sequence splits.
# Therefore, H_1(X, Z) is the direct sum of Z/2Z and Z.
final_group_str = "Z + Z/2Z"
print(f"The splitting of the short exact sequence implies H_1(X, Z) is isomorphic to the direct sum of the kernel and cokernel.")
print(f"So, H_1(X, Z) = {final_group_str}.")
