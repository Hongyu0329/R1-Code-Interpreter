import numpy as np

# Step 1: Define the basis vectors for the original cone (R^3)
e1 = np.array([1, 0, 0])
e2 = np.array([0, 1, 0])
e3 = np.array([0, 0, 1])

# The original space corresponds to the cone generated by e1, e2, e3.
# This is A^3, and its dimension is the rank of the matrix [e1, e2, e3].
original_matrix = np.array([e1, e2, e3])
original_dim = np.linalg.matrix_rank(original_matrix)
print(f"The dimension of the original space P is {original_dim}.")
print("-" * 20)

# Step 2: Define the generators of the log ideal I
# The ideal is generated by (1,0,0) and (0,1,0), which are e1 and e2.
v1 = e1
v2 = e2

# Step 3: The log blowup introduces a new vector w, which is the sum of the ideal generators.
w = v1 + v2
print(f"The new vector for the blowup is w = {list(v1)} + {list(v2)} = {list(w)}")
print("-" * 20)


# Step 4: The blowup subdivides the original cone into two new cones, sigma_1 and sigma_2.
# We find the dimension of the variety by finding the dimension of these cones.
# The dimension of a cone is the rank of the matrix formed by its generating vectors.

# Cone sigma_1 is generated by e1, w, e3
matrix1_gens = np.array([e1, w, e3])
dim1 = np.linalg.matrix_rank(matrix1_gens)
print("Generators for the first cone of the blowup:")
print(matrix1_gens)
print(f"Dimension of the first cone (rank of the matrix) = {dim1}")
print("-" * 20)


# Cone sigma_2 is generated by e2, w, e3
matrix2_gens = np.array([e2, w, e3])
dim2 = np.linalg.matrix_rank(matrix2_gens)
print("Generators for the second cone of the blowup:")
print(matrix2_gens)
print(f"Dimension of the second cone (rank of the matrix) = {dim2}")
print("-" * 20)

# The dimension of the log blowup is the dimension of its maximal cones.
# Both cones have the same dimension.
dimension_of_blowup = max(dim1, dim2)

print(f"The dimension of the log blowup of P in I is the maximum of the dimensions of the new cones.")
print(f"Dimension = max({dim1}, {dim2}) = {dimension_of_blowup}")
<<<3>>>