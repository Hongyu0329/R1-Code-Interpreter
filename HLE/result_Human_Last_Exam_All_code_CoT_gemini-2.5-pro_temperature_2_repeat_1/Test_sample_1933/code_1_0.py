import itertools

def solve_vc_dimension():
    """
    This script calculates the VC dimension for the given problem and demonstrates the proof.
    """
    # Number of unary predicates in the schema S. This is our 'k'.
    k = 4

    print("--- Analysis of the problem ---")
    print(f"The logical language defines a concept class based on k={k} unary predicates.")
    print("The concepts are all possible intersections of the k base sets corresponding to these predicates.")
    print("The VC dimension of a class of all intersections of k sets is k.")
    print(f"Therefore, the VC dimension for this problem is {k}.")

    print("\n--- Demonstration: Shattering a set of size k=4 ---")
    
    # We create a set X with k points to be shattered.
    X = set(range(k))
    print(f"Let's take a set of points X = {X}.")

    # For the proof, we strategically define our k base sets S_i.
    # Let S_i be X excluding the point 'i'.
    base_sets = {i: X - {i} for i in range(k)}
    print("We define k base sets S_i = X \\ {i}:")
    for i in sorted(base_sets.keys()):
        print(f"  S_{i} = {base_sets[i]}")

    print("\nWe will now show that any subset of X can be generated as an intersection of these base sets.")
    print("The formula for a target subset Y is the conjunction of P_i(x) for all i such that the point i is NOT in Y.")

    num_subsets_generated = 0
    # Iterate through the entire powerset of X.
    for r in range(len(X) + 1):
        for target_subset_tuple in itertools.combinations(X, r):
            target_subset = set(target_subset_tuple)
            
            # The indices of the base sets we need to intersect are the points *not* in our target subset.
            indices_to_intersect = X - target_subset
            
            # Construct the logical formula representation.
            formula_parts = [f"P_{i}(x)" for i in sorted(list(indices_to_intersect))]
            formula = " AND ".join(formula_parts) if formula_parts else "TRUE"
            
            # Perform the intersection operation. Start with the universal set X.
            result_set = set(X)
            for i in indices_to_intersect:
                result_set.intersection_update(base_sets[i])
            
            # Check that we correctly generated the target subset.
            if result_set == target_subset:
                print(f"- Target: {str(target_subset):<18} is generated by formula: {formula}")
                num_subsets_generated += 1
            else:
                # This case should not be reached with our construction.
                print(f"Error: Failed to generate {target_subset}")

    print(f"\nWe successfully generated all {num_subsets_generated} of the {2**k} possible subsets of X.")
    print(f"This proves that a set of size k={k} can be shattered, which means VCdim >= {k}.")
    print("Combined with the proof that VCdim <= k, we conclude the VC dimension is exactly k.")
    
    print("\n--- Final Equation ---")
    final_vc_dimension = k
    print(f"Number of predicates k = {k}")
    print(f"VC Dimension = {final_vc_dimension}")


solve_vc_dimension()