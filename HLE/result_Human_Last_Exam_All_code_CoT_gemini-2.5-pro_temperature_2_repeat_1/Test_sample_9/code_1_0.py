import sympy

def compute_h1_sl2z():
    """
    Computes the first homology group of SL(2, Z), H_1(SL(2, Z)), which
    is the abelianization of SL(2, Z).

    A standard presentation for SL(2, Z) is <s, t | s^4 = 1, (st)^3 = s^2>.
    In an abelian group, we use additive notation. The relations become:
    1. 4s = 0
    2. 3(s+t) = 2s  which simplifies to s + 3t = 0
    
    We solve this system of linear equations over the integers.
    From s + 3t = 0, we have s = -3t.
    Substituting this into 4s = 0, we get 4(-3t) = 0, which is -12t = 0,
    or 12t = 0.

    The group is generated by a single element t of order 12.
    Therefore, the group is the cyclic group of order 12, Z_12.
    """
    
    print("Computing the abelianization of SL(2, Z) from its presentation:")
    print("<s, t | s^4 = 1, (st)^3 = s^2>")
    print("\nIn the abelianized group, the relations are:")
    print("1) 4s = 0")
    print("2) s + 3t = 0")
    print("\nSolving the system gives 12t = 0.")
    h1_sl2z_order = 12
    print(f"Thus, H_1(SL(2, Z)) is the cyclic group Z_{h1_sl2z_order}.")

    print("\nBased on the splitting of the short exact sequence:")
    print(f"0 -> Z -> H_1(X, Z) -> Z_{h1_sl2z_order} -> 0")
    
    # The final answer is the direct sum.
    # The ranks and orders are the numbers in the equation.
    z_rank = 1
    
    print("\nThe first homology group is H_1(X, Z) = Z^r + Z_n where:")
    print(f"r = {z_rank}")
    print(f"n = {h1_sl2z_order}")

compute_h1_sl2z()
