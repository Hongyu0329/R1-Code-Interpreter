import numpy as np

def solve():
    """
    Calculates the dimension of the log blowup of a log point.
    """
    # Step 1: Define the ambient monoid structure
    # The log structure is N^3, which corresponds to a cone in R^3 generated by
    # the standard basis vectors. This implies an ambient dimension of 3.
    e1 = np.array([1, 0, 0])
    e2 = np.array([0, 1, 0])
    e3 = np.array([0, 0, 1])

    original_cone_generators = np.array([e1, e2, e3])
    ambient_dim = np.linalg.matrix_rank(original_cone_generators)
    print(f"The problem can be modeled in a space of dimension {ambient_dim}.")
    print("The log structure corresponds to the cone generated by:")
    print(f"e1 = {e1}, e2 = {e2}, e3 = {e3}\n")


    # Step 2: Define the log ideal generators
    # The log ideal I is generated by (1,0,0) and (0,1,0), corresponding to e1 and e2.
    ideal_generators = [e1, e2]
    print("The log ideal I is generated by:")
    print(f"v1 = {ideal_generators[0]}")
    print(f"v2 = {ideal_generators[1]}\n")

    # Step 3: Compute the new ray for the combinatorial blowup
    # The blowup introduces a new ray defined by the sum of the ideal's generators.
    v_new = np.sum(ideal_generators, axis=0)
    print(f"The blowup introduces a new ray into the fan: v_new = {v_new}\n")

    # Step 4: Determine the maximal cones of the new fan.
    # The original maximal cone cone(e1, e2, e3) is subdivided by the new ray.
    # The new maximal cones are cone(e1, e3, v_new) and cone(e2, e3, v_new).
    new_cone1_generators = np.array([e1, e3, v_new])
    new_cone2_generators = np.array([e2, e3, v_new])
    
    print("The fan of the resulting space has two maximal cones.")
    print("Generators of the first new cone are:")
    print(new_cone1_generators)
    print("\nGenerators of the second new cone are:")
    print(new_cone2_generators)
    print("")

    # Step 5: Compute the dimension of each new cone by calculating matrix rank.
    dim1 = np.linalg.matrix_rank(new_cone1_generators)
    dim2 = np.linalg.matrix_rank(new_cone2_generators)

    print(f"The dimension of the first new cone is {dim1}.")
    print(f"The dimension of the second new cone is {dim2}.\n")

    # Step 6: The dimension of the blowup is the maximum of the cone dimensions.
    blowup_dimension = max(dim1, dim2)

    print("The dimension of the log blowup is the maximum dimension of the new maximal cones.")
    print(f"Dimension = max({dim1}, {dim2}) = {blowup_dimension}")

solve()