import math
from fractions import Fraction

# This script calculates the total mass M(A_5, rho, 2)
# G = A_5, rho is the 5D permutation representation, p = 2.

# Let's outline the steps of the calculation.
# The total mass is defined as M(G, rho, p) = (1/|G|) * sum_{phi: Gamma_p -> G} p^(-c_rho(phi)).
# where Gamma_p is the absolute Galois group of Q_p.
# G = A_5 is the alternating group on 5 elements. Its order is 5!/2 = 60.
# The prime is p = 2.
# A theorem by Roberts states that if the Sylow p-subgroup of G is not cyclic,
# any homomorphism phi: Gamma_p -> G corresponds to a tamely ramified extension of Q_p.
# The Sylow 2-subgroups of A_5 are isomorphic to the Klein four-group V_4, which is not cyclic.
# Therefore, any homomorphism phi: Gamma_2 -> A_5 is tamely ramified.
# This implies the inertia group I = phi(I_2) has an order not divisible by p=2, i.e., odd order.

# The number of such homomorphisms corresponds to the number of pairs (g, h) in G x G
# such that h has odd order and g*h*g^(-1) = h^2.
# For each such homomorphism, defined by the pair (g,h), the inertia group is I = <h>.
# The conductor c_rho(phi) for a tame extension is given by codim(V^I), where V is the representation space.
# Here V = C^5 and the representation rho is the standard permutation representation of A_5.
# dim(V^I) is the number of points fixed by all elements of I. So c_rho(phi) = 5 - dim(V^I).

# The summation is over all such pairs (g, h).
# We group the pairs by the order of h. The possible odd orders of elements in A_5 are 1, 3, 5.

# -- Step 1: Define group properties
order_A5 = 60

# -- Step 2: Contribution from h = identity (unramified extensions)
# h has order 1, which is odd. The condition g*id*g^(-1) = id^2 = id is true for all g in A_5.
num_g_h_is_id = order_A5
# For these maps, the inertia group I = {id}. The identity element fixes all 5 points.
dim_V_I_1 = 5
c_1 = 5 - dim_V_I_1  # conductor is 0
term1_val = num_g_h_is_id * (2**(-c_1))

# -- Step 3: Contribution from h of order 3
# All elements of order 3 in A_5 are 3-cycles. There are 20 such elements.
num_h_order_3 = 20
# The condition is g*h*g^(-1) = h^2 = h^(-1) (since h^3=id).
# The number of g's for a given h is the size of the centralizer of h in A_5, because h and h^(-1) are conjugate in A_5.
# The centralizer of a 3-cycle in A_5 is the cyclic group of order 3 generated by the 3-cycle itself.
centralizer_size_h_order_3 = 3
num_g_h_order_3 = centralizer_size_h_order_3
# Total number of such pairs (g,h)
num_pairs_order_3 = num_h_order_3 * num_g_h_order_3
# For these maps, I = <h> where h is a 3-cycle (e.g., (1,2,3)).
# The points fixed by <h> are those not in the cycle's support, i.e., {4, 5}.
dim_V_I_3 = 2
c_3 = 5 - dim_V_I_3  # conductor is 3
term2_val = num_pairs_order_3 * (2**(-c_3))

# -- Step 4: Contribution from h of order 5
# The condition is g*h*g^(-1) = h^2.
# For a 5-cycle h, h is conjugate to h^k in A_5 iff k is a quadratic residue mod 5.
# The quadratic residues mod 5 are 1 and 4. Since 2 is not a quadratic residue,
# h and h^2 are not conjugate in A_5. Thus, there is no such g.
num_pairs_order_5 = 0
term3_val = num_pairs_order_5 * 1.0 # Contribution is 0

# -- Step 5: Calculate the total sum
total_sum = term1_val + term2_val + term3_val

# -- Step 6: Calculate the total mass
mass = Fraction(total_sum, order_A5)

print("The calculation for the total mass M(A_5, rho, 2) is as follows:")
print(f"The order of A_5 is |A_5| = {order_A5}.")
print("The mass is given by the formula: M = (1/|A_5|) * sum_{phi} 2^(-c_rho(phi)).")
print("All homomorphisms phi: Gamma_2 -> A_5 are tamely ramified.")
print("The sum is over pairs (g, h) in A_5 x A_5 where h has odd order and ghg^{-1} = h^2.")
print("")

print("Contribution from h = identity (order 1):")
print(f"Number of pairs (g, id): {num_g_h_is_id}")
print(f"Conductor c = 5 - (fixed points of id) = 5 - {dim_V_I_1} = {c_1}")
print(f"Contribution to the sum: {num_g_h_is_id} * 2^(-{c_1}) = {term1_val}")
print("")

print("Contribution from h of order 3:")
print(f"Number of elements h of order 3: {num_h_order_3}")
print(f"For each such h, the number of g satisfying ghg^(-1) = h^2 is {num_g_h_order_3}")
print(f"Total pairs (g, h) for order 3: {num_h_order_3} * {num_g_h_order_3} = {num_pairs_order_3}")
print(f"Conductor c = 5 - (fixed points of a 3-cycle) = 5 - {dim_V_I_3} = {c_3}")
print(f"Contribution to the sum: {num_pairs_order_3} * 2^(-{c_3}) = {Fraction(term2_val)}")
print("")

print("Contribution from h of order 5:")
print("An element h of order 5 is not conjugate to h^2 in A_5.")
print(f"Number of pairs (g, h) for order 5: {num_pairs_order_5}")
print("Contribution to the sum is 0.")
print("")

print("Total sum over all homomorphisms:")
sum_frac = Fraction(term1_val) + Fraction(term2_val)
print(f"Total sum = {Fraction(term1_val)} + {Fraction(term2_val)} = {sum_frac}")
print("")

print("Total Mass M(A_5, rho, 2):")
print(f"M = (1 / {order_A5}) * {sum_frac} = {mass}")
print(f"The equation is: (1/{order_A5}) * ({num_g_h_is_id}*2^(-{c_1}) + {num_pairs_order_3}*2^(-{c_3})) = {mass}")
