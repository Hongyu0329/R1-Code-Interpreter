import math

def solve_semidihedral_subgroups():
    """
    Calculates the number of power subgroups (cyclic subgroups) in the
    semidihedral group of a given size.
    """
    group_size = 512

    # For a semidihedral group SD_{2^n}, the order is 2^n.
    # We find n for the given group size.
    if group_size <= 0 or (group_size & (group_size - 1)) != 0:
        print("Error: Group size must be a power of 2.")
        return

    n = int(math.log2(group_size))

    # A "power subgroup" is a cyclic subgroup.
    # The formula for the number of cyclic subgroups in SD_{2^n} is n + 2^(n-2) + 2^(n-3).

    # 1. Number of cyclic subgroups in the maximal cyclic subgroup <r> of order 2^(n-1).
    # This is equal to the number of divisors of 2^(n-1), which is n.
    cyclic_part_subgroups = n

    # 2. Number of cyclic subgroups generated by elements of order 2 in the coset s<r>.
    # There are 2^(n-2) such subgroups.
    order_2_coset_subgroups = 2**(n - 2)

    # 3. Number of cyclic subgroups generated by elements of order 4 in the coset s<r>.
    # There are 2^(n-3) such subgroups.
    order_4_coset_subgroups = 2**(n - 3)

    # The total number of cyclic subgroups is the sum of these disjoint sets of subgroups.
    total_subgroups = cyclic_part_subgroups + order_2_coset_subgroups + order_4_coset_subgroups

    print(f"For the semidihedral group of size {group_size} (where n={n}):")
    print("\nThe number of power subgroups (cyclic subgroups) is the sum of three components:")
    print(f"1. Subgroups from the cyclic part <r>: {cyclic_part_subgroups}")
    print(f"2. Subgroups of order 2 from the coset s<r>: {order_2_coset_subgroups}")
    print(f"3. Subgroups of order 4 from the coset s<r>: {order_4_coset_subgroups}")
    print("\nFinal Equation:")
    print(f"Total = {cyclic_part_subgroups} + {order_2_coset_subgroups} + {order_4_coset_subgroups}")
    print(f"Total number of power subgroups = {total_subgroups}")

solve_semidihedral_subgroups()