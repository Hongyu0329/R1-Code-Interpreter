```python
import sympy

def display_infinite_product_solution():
    """
    This function computes and displays the symbolic solution for the infinite product
    Product_{n=3 to infinity} (1 - z^3 / n^3).
    """
    # Define the symbolic variables
    z = sympy.Symbol('z')
    omega = sympy.exp(2 * sympy.pi * sympy.I / 3)

    # The final simplified expression for the infinite product is
    # C / (Gamma(k - z) * Gamma(k - z*omega) * Gamma(k - z*omega**2))
    # where C=8 and k=3.

    # Extract the numbers from the final equation
    numerator_constant = 8
    gamma_argument_constant = 3

    # Construct the final symbolic expression
    denominator = (sympy.gamma(gamma_argument_constant - z) *
                   sympy.gamma(gamma_argument_constant - z * omega) *
                   sympy.gamma(gamma_argument_constant - z * omega**2))

    final_expression = numerator_constant / denominator

    # Print the final result in a structured way, mentioning each number
    print("The result of the infinite product is given by the equation:")
    print(f"{numerator_constant} / (Gamma({gamma_argument_constant} - z) * Gamma({gamma_argument_constant} - z*omega) * Gamma({gamma_argument_constant} - z*omega**2))")
    print("\nwhere omega = exp(2*pi*i/3) is the principal cube root of unity.")
    print("\nBelow is the formatted output from the sympy library:")
    sympy.pprint(final_expression, use_unicode=True)

if __name__ == '__main__':
    display_infinite_product_solution()
```