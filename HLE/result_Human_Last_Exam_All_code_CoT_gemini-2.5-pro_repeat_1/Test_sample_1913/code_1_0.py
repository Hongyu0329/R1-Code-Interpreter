import cypari2
import math

def solve_elliptic_curve_problem():
    """
    Solves the problem involving the elliptic curve E, Dirichlet characters,
    and their L-functions.
    """
    # Initialize the PARI/GP environment with cypari2
    # Set a high precision for the calculations to ensure accuracy.
    pari = cypari2.Pari()
    pari.default('realprecision', 50)

    # Step 1: Define the elliptic curve E
    # The equation y^2 + y = x^3 - x^2 - 10x - 20 corresponds to the
    # Weierstrass form y^2 + a1*x*y + a3*y = x^3 + a2*x^2 + a4*x + a6
    # with coefficients a1=0, a2=-1, a3=1, a4=-10, a6=-20.
    E = pari.ellinit([0, -1, 1, -10, -20])

    # Step 2: Compute the rank r of E(Q)
    # The ellrank function returns a vector, with the first component being the rank.
    r = pari.ellrank(E)[0]

    # Step 3: Define the primitive cubic Dirichlet characters of conductor 7
    # The multiplicative group (Z/7Z)^* is cyclic of order 6, generated by 3.
    # We need characters of order 3. We can construct them by mapping the
    # generator 3 to the 3rd roots of unity, exp(2*pi*i*k/3) for k=1,2.
    # This corresponds to characters chi_0^2 and chi_0^4 where chi_0 is a
    # generator of the character group.
    gen = pari.Mod(3, 7)
    chi1 = pari.znchar(gen, 2)
    chi2 = pari.znchar(gen, 4)

    # Step 4: Compute the leading coefficients a and b
    # The lfun(E, s, chi) function returns a vector [ord, val, ...], where 'ord'
    # is the order of the zero at s, and 'val' is the leading coefficient of the
    # Taylor series, which is L^(ord)(s) / ord!.
    # The central point for this L-function is s=1.
    lfun_res1 = pari.lfun(E, 1, chi1)
    a = lfun_res1[1]

    lfun_res2 = pari.lfun(E, 1, chi2)
    b = lfun_res2[1]
    
    # As a check, b should be the complex conjugate of a because chi2 is the
    # complex conjugate of chi1.

    # Step 5: Calculate the final sum and round the result
    total_sum = r + a + b
    
    # The sum a+b is real, so total_sum is a PARI real number.
    # We convert it to a Python float for standard rounding.
    rounded_result = round(float(total_sum), 4)

    # Print the details of the calculation as requested
    print("The rank of the elliptic curve E(Q) is:")
    print(f"r = {r}")
    print("\nThe leading coefficients of the twisted L-functions at s=1 are:")
    print(f"a = {a}")
    print(f"b = {b}")
    print("\nThe final equation is:")
    # We format the complex numbers to show their structure in the sum
    print(f"{r} + ({a}) + ({b}) = {total_sum}")
    print("\nThe final result rounded to four decimal places is:")
    print(rounded_result)

solve_elliptic_curve_problem()