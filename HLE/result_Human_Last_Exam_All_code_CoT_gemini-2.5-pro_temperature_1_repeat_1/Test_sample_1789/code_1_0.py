def solve():
    """
    Calculates the size of the largest union of 20 antichains in the
    divisor poset on {1, 2, ..., N}.
    
    This is equivalent to finding the maximum sum of the lengths of 20
    disjoint chains. The optimal choice for these chains are of the form
    {m, 2m, 4m, ...} where m are the first 20 odd numbers.
    """
    
    N = 823564528378596
    num_chains = 20
    
    chain_lengths = []
    odd_numbers = []
    
    print(f"The problem is to find the largest union of {num_chains} antichains in the divisor poset on [1, {N}].")
    print("By Greene's Theorem, this is the sum of the lengths of the "
          f"{num_chains} longest disjoint chains.")
    print("These chains are generated by the first 20 odd numbers.")
    print("-" * 40)
    
    for i in range(num_chains):
        # The i-th odd number (0-indexed) is 2*i + 1
        m = 2 * i + 1
        odd_numbers.append(m)
        
        # The number of elements in the chain {m, 2m, 4m, ...} <= N is
        # floor(log2(N/m)) + 1.
        # This can be calculated using (N // m).bit_length() for integers.
        q = N // m
        length = q.bit_length()
        chain_lengths.append(length)

    total_size = sum(chain_lengths)
    
    # Create the string for the final equation
    equation_str = " + ".join(map(str, chain_lengths))
    
    print("The final calculation is the sum of these lengths:")
    print(f"{equation_str} = {total_size}")

solve()