import math

# The size of the semidihedral group is 2^n.
group_size = 512

# Find n from the group size
n = int(math.log2(group_size))

# 1. Number of cyclic subgroups contained in the maximal cyclic subgroup <r>
# This is equal to the number of divisors of the order of <r>, which is 2^(n-1).
# The number of divisors of 2^(n-1) is (n-1) + 1 = n.
num_subgroups_in_r = n

# 2. Number of cyclic subgroups generated by elements of the form sr^i.
# These elements have order 2 if i is even, and order 4 if i is odd.
num_elements_in_coset = 2**(n-1)

# Case i is even: There are 2^(n-2) such elements, each generating a unique subgroup of order 2.
num_subgroups_order_2_coset = 2**(n-2)

# Case i is odd: There are 2^(n-2) such elements. They generate subgroups of order 4.
# These subgroups come in pairs, <sr^i> = <sr^(i + 2^(n-2))>.
# So the number of distinct subgroups is (2^(n-2)) / 2 = 2^(n-3).
num_subgroups_order_4_coset = 2**(n-3)

# The total number of power subgroups is the sum of these disjoint collections.
total_subgroups = num_subgroups_in_r + num_subgroups_order_2_coset + num_subgroups_order_4_coset

print(f"The analysis is for the semidihedral group of size {group_size} (SD_{group_size}), where n={n}.")
print("-" * 40)
print(f"Number of cyclic subgroups within the maximal cyclic subgroup <r>: {num_subgroups_in_r}")
print(f"Number of cyclic subgroups of order 2 from the coset s<r>: {num_subgroups_order_2_coset}")
print(f"Number of cyclic subgroups of order 4 from the coset s<r>: {num_subgroups_order_4_coset}")
print("-" * 40)
print("The total number of power (cyclic) subgroups is the sum of these values.")
print(f"Total = {num_subgroups_in_r} + {num_subgroups_order_2_coset} + {num_subgroups_order_4_coset} = {total_subgroups}")
