import networkx as nx
from collections import defaultdict

def count_biconnected_graphs_on_5_vertices():
    """
    This function counts the number of 2-vertex-connected simple nonisomorphic
    graphs with 5 vertices. It does so by iterating through all 34 such graphs,
    checking each for 2-vertex-connectivity, and summing up the results.
    """
    # This is the complete list of all 34 non-isomorphic simple graphs on 5 
    # vertices, represented in graph6 format. This list is standard and can be
    # generated by tools like 'geng' from the nauty package.
    graph6_list = [
        "D?", "D@", "DC", "Dq", "DB", "D`", "DQ", "DG", "DR", "Ds", "DT",
        "DA", "Dk", "D[", "Dd", "DN", "DL", "DF", "DU", "DP", "Dg", "Dc",
        "Do", "D{", "Dj", "De", "DW", "DI", "Dh", "DE", "D_", "D}", "Dw", "D~"
    ]

    biconnected_counts_by_edges = defaultdict(int)
    
    for g6 in graph6_list:
        # Create a graph object from the graph6 string
        G = nx.from_graph6_string(g6)

        # A graph is 2-vertex-connected if its node connectivity is at least 2.
        # We first check if the graph is connected, as node connectivity is
        # defined for connected graphs. A disconnected graph has connectivity 0.
        if nx.is_connected(G):
            # For a connected graph, networkx.node_connectivity(G) returns the
            # minimum number of nodes that must be removed to disconnect it.
            connectivity = nx.node_connectivity(G)
            
            if connectivity >= 2:
                num_edges = G.number_of_edges()
                biconnected_counts_by_edges[num_edges] += 1

    print("Number of 2-vertex-connected graphs on 5 vertices, by number of edges:")
    
    edge_counts_str = []
    total_biconnected = 0
    
    # A 2-connected graph on n vertices must have at least n edges.
    # For n=5, the number of edges can range from 5 to C(5,2)=10.
    for num_edges in sorted(biconnected_counts_by_edges.keys()):
        count = biconnected_counts_by_edges[num_edges]
        print(f"Edges = {num_edges}: {count} graph(s)")
        edge_counts_str.append(str(count))
        total_biconnected += count

    # Print the final sum as an equation
    equation = " + ".join(edge_counts_str)
    print(f"\nTotal number = {equation} = {total_biconnected}")


# Execute the function to find and print the answer.
count_biconnected_graphs_on_5_vertices()