```python
from fractions import Fraction

def solve_spin_orbital_coupling():
    """
    Calculates and prints the common eigenvalues of J^2 and J_z for a p-electron.
    """
    # Step 1: Define quantum numbers for a p-electron
    l = 1  # Orbital angular momentum quantum number for p-electron
    s = Fraction(1, 2)  # Spin quantum number for an electron

    print(f"Solving for a p-electron with orbital quantum number l = {l} and spin quantum number s = {s}.")
    print("-" * 50)

    # Step 2: Determine the possible values for the total angular momentum quantum number j
    j_min = abs(l - s)
    j_max = l + s
    # j ranges from |l-s| to l+s in integer steps
    j_values = [Fraction(j) for j in range(int(j_min * 2), int(j_max * 2) + 1, 2)]
    j_values = [j / 2 for j in j_values]
    
    print(f"The possible values for the total angular momentum quantum number j are: {[float(j) for j in j_values]}")
    print("-" * 50)

    # Step 3 & 4: Calculate and print eigenvalues for each j
    for j in j_values:
        print(f"\nFor the state with j = {j}:")
        
        # Calculate J^2 eigenvalue
        j2_eigenvalue = j * (j + 1)
        print(f"The eigenvalue of J^2 is calculated as ħ² * j * (j + 1).")
        print(f"  J^2 eigenvalue = ħ² * {j} * ({j} + 1) = ħ² * {j} * {j+1} = {j2_eigenvalue}ħ²")
        
        # Determine m_j values
        m_j_values = [Fraction(m, 2) for m in range(int(-j * 2), int(j * 2) + 1, 2)]
        
        print(f"  The possible m_j values are: {[float(m) for m in m_j_values]}")
        print(f"  The common eigenstates |j, m_j> have the following J_z eigenvalues:")

        # Calculate J_z eigenvalue for each m_j
        for m_j in m_j_values:
            # The J_z eigenvalue is just m_j * h_bar
            jz_eigenvalue = m_j
            print(f"    For state |j={j}, m_j={m_j}>:")
            print(f"      Eigenvalue of J_z = {jz_eigenvalue}ħ")

if __name__ == "__main__":
    solve_spin_orbital_coupling()
```