def solve_grassmannian_torsion_rank():
    """
    Calculates the rank of the torsion subgroup of the integral cohomology
    ring of the space of 3-subspaces of R^5, which is the real Grassmannian Gr(3, 5).
    """
    
    # The space of 3-subspaces of R^5 is the Grassmannian Gr(3, R^5).
    # By a standard diffeomorphism, Gr(k, R^n) is equivalent to Gr(n-k, R^n).
    # So, Gr(3, R^5) is diffeomorphic to Gr(2, R^5). We work with the latter.
    k = 2
    n = 5
    # The total dimension of the manifold Gr(k, R^n) is k * (n-k).
    dim = k * (n - k)

    print(f"We want to find the rank of the torsion subgroup of H*(Gr(3, R^5); Z).")
    print(f"This is diffeomorphic to X = Gr(2, R^5), a {dim}-dimensional manifold.")
    print("\nThe integral cohomology H*(X; Z) of a real Grassmannian has only 2-torsion.")
    print("Let r_i be the rank of the free part of H^i(X; Z) (the i-th rational Betti number).")
    print("Let t_i be the rank of the torsion part of H^i(X; Z).")
    print("Let b_i be the i-th mod 2 Betti number, dim(H^i(X; Z/2Z)).")
    print("These numbers are related by the formula: b_i = r_i + t_i + t_{i+1}")

    # Step 1: State the mod 2 Betti numbers, b_i.
    # For Gr(2, 5), these are determined by Schubert calculus.
    b = [1, 1, 2, 2, 2, 1, 1]
    print(f"\nThe mod 2 Betti numbers for Gr(2, 5) are: b = {b}")

    # Step 2: State the rational Betti numbers, r_i.
    # For Gr(2, 5), the rational cohomology is generated by the Pontryagin class p_1 in degree 4.
    r = [0] * (dim + 1)
    r[0] = 1
    r[4] = 1
    print(f"The rational Betti numbers for Gr(2, 5) are: r = {r}")

    # Step 3: Compute the torsion ranks t_i iteratively.
    # We have t_0 = 0 since H^0(X, Z) = Z is torsion-free.
    t = [0] * (dim + 2)  # includes t_0 up to t_{dim+1}, which is also 0.
    print("\nUsing b_i = r_i + t_i + t_{i+1}, we solve for each t_{i+1}:")
    for i in range(dim + 1):
        t[i+1] = b[i] - r[i] - t[i]
        print(f"  t_{i+1} = b_{i} - r_{i} - t_{i} = {b[i]} - {r[i]} - {t[i]} = {t[i+1]}")
    
    # We are interested in t_1, ..., t_dim
    torsion_ranks_per_degree = t[1:-1] 
    
    # Step 4: Sum the ranks to get the final answer.
    total_rank = sum(torsion_ranks_per_degree)
    non_zero_ranks = [str(rank) for rank in torsion_ranks_per_degree if rank > 0]
    
    print("\nThe rank of the torsion subgroup is the sum of these individual ranks.")
    print(f"Total Rank = {' + '.join(non_zero_ranks)} = {total_rank}")

solve_grassmannian_torsion_rank()