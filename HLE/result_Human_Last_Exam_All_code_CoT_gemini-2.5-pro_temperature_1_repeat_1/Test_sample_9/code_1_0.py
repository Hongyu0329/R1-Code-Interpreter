import sympy

# Define the generators of the braid group B_3 as symbolic variables
s1, s2 = sympy.symbols('s1 s2')

# The defining relation for B_3 is s1*s2*s1 = s2*s1*s2
relation = sympy.Eq(s1 * s2 * s1, s2 * s1 * s2)

print("The defining relation for the braid group B_3 is:")
print(relation)
print("-" * 30)

# To find the abelianization, we add the commutation relation s1*s2 = s2*s1
# Let's see how the defining relation simplifies under this new condition.
# We can substitute s2*s1 for s1*s2 in the original relation.
# LHS = s1 * (s2*s1) = s1 * (s1*s2) = s1**2 * s2
# RHS = s2 * (s1*s2) = s2 * (s2*s1) = s2**2 * s1
# So the relation becomes s1**2 * s2 = s2**2 * s1

# We can express this in sympy
comm_relation = sympy.Eq(s1*s2, s2*s1)
abelian_relation = sympy.Eq(s1**2 * s2, s2**2 * s1)

print("In the abelianization, generators commute: s1*s2 = s2*s1.")
print("The B_3 relation simplifies to:")
print(abelian_relation)
print("-" * 30)

# We can simplify this relation further.
# Since s1 and s2 are non-zero elements of a group, we can cancel.
# Divide both sides by s1*s2:
# (s1**2 * s2) / (s1*s2) = (s2**2 * s1) / (s1*s2)
# This gives s1 = s2.
simplified_relation = sympy.Eq(s1, s2)

print("This further simplifies to (assuming generators are invertible):")
print(simplified_relation)
print("-" * 30)

print("This means that in the abelianized group, the two generators are equal.")
print("The group is generated by a single element, let's call it 's', with no other relations.")
print("An abelian group with one generator and no relations is the infinite cyclic group, Z.")
print("\nTherefore, the abelianization of B_3 is Z.")
print("H_1(SL(2,R)/SL(2,Z), Z) = Z.")
print("As explained in the text, the homology of our space X is also Z.")
