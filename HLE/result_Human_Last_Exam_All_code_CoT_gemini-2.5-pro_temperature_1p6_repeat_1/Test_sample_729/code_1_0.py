import math

def solve():
    """
    Calculates the number of power subgroups in the generalized quaternion group of size 128.
    
    A power subgroup of a group G is a subgroup H such that H = G^k = {g^k | g in G} for some integer k.
    For a generalized quaternion group Q_{2^n} (for n >= 3):
    - If k is odd, Q_{2^n}^k = Q_{2^n}. This gives 1 subgroup.
    - If k is even, Q_{2^n}^k is one of the n-1 non-trivial cyclic subgroups <x^d> where d is an even divisor of 2^(n-1).
      This gives n-1 distinct subgroups.
    The total number of power subgroups is 1 + (n-1) = n.
    """
    
    group_order = 128
    
    # For a generalized quaternion group Q_N, the order N must be a power of 2.
    # We find n such that 2^n = group_order.
    # n = log2(group_order)
    if group_order <= 0 or (group_order & (group_order - 1)) != 0:
        print(f"Error: Group order {group_order} is not a power of 2.")
        return
        
    n = int(math.log2(group_order))
    
    if n < 3:
        print(f"Error: Generalized quaternion group Q_{group_order} requires the exponent n to be >= 3.")
        return
        
    # Case 1: k is odd. This always yields the group itself.
    num_odd_power_subgroups = 1
    
    # Case 2: k is even. This yields n-1 distinct subgroups.
    num_even_power_subgroups = n - 1
    
    # The total number of power subgroups is the sum.
    total_power_subgroups = num_odd_power_subgroups + num_even_power_subgroups
    
    print(f"The generalized quaternion group of size {group_order} is denoted as Q_2^n, where n = {n}.")
    print("The number of power subgroups is the sum of subgroups generated by odd and even powers.")
    print(f"Number of subgroups from odd powers: {num_odd_power_subgroups}")
    print(f"Number of subgroups from even powers: {num_even_power_subgroups}")
    print("\nFinal calculation:")
    print(f"{num_odd_power_subgroups} + {num_even_power_subgroups} = {total_power_subgroups}")

solve()