import mpmath
import random

def is_prime(n):
    """
    Miller-Rabin primality test. Provides a probabilistic check.
    Sufficiently accurate for the numbers in this problem.
    """
    if n < 2:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False

    # Write n-1 as 2^r * d
    r, d = 0, n - 1
    while d % 2 == 0:
        r += 1
        d //= 2

    # Run 5 rounds of the test for high confidence
    for _ in range(5):
        a = random.randrange(2, n - 2)
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def solve_for_e():
    """
    Finds the 6th prime number in the sequence generated by
    concatenating successive digits of Euler's number 'e'.
    """
    # The 6th prime in this sequence has 252 digits, so we need high precision.
    # We set mpmath's decimal places (dps) to 300 to be safe.
    mpmath.mp.dps = 300
    
    # Get digits of 'e' as a string, removing the decimal point.
    e_digits_str = str(mpmath.e).replace('.', '')
    
    target_prime_index = 6
    prime_count = 0
    
    print("Searching for the 6th prime from the concatenated digits of 'e'...")
    
    # Iterate through prefixes of the digit string
    for i in range(1, len(e_digits_str) + 1):
        num_str = e_digits_str[:i]
        
        # An optimization: a prime number > 5 must end in 1, 3, 7, or 9.
        if i > 1 and num_str[-1] not in '1379':
            continue

        num = int(num_str)
        
        if is_prime(num):
            prime_count += 1
            print(f"\nPrime #{prime_count} (length {len(num_str)}):")
            print(num)
            
            if prime_count == target_prime_index:
                print(f"\nThis is the {target_prime_index}th prime number found.")
                last_six_digits = str(num)[-6:]
                print(f"Its last 6 digits are: {last_six_digits}")
                if last_six_digits == "521023":
                    print("Success! The last 6 digits match the puzzle's requirement.")
                else:
                    print("Failure. The last 6 digits do not match.")
                break

# Run the solver function
solve_for_e()