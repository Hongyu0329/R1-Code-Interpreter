def generate_sequence(n_terms):
    """
    Generates terms of a sequence based on the rule
    s[n] = s[s[n-1]] + s[n - s[n-1]].
    The sequence is 1-indexed, so we use a dictionary for storage.
    """
    s = {1: 1, 2: 1}
    for n in range(3, n_terms + 1):
        # Previous term's value is s[n-1]
        s_n_minus_1 = s[n - 1]

        # Check if indices are valid before accessing
        if s_n_minus_1 in s and (n - s_n_minus_1) in s:
            s[n] = s[s_n_minus_1] + s[n - s_n_minus_1]
        else:
            # Cannot compute further if an index is out of bounds
            break
            
    return s

def main():
    """
    Main function to generate the sequence and print the rule.
    """
    # The provided S4 has 42 terms.
    num_terms = 42
    sequence = generate_sequence(num_terms)

    print("The likely intended rule for the sequence is R(s[n]) = s[s[n-1]] + s[n - s[n-1]]")
    print("This rule with s[1]=1, s[2]=1 generates a sequence that is very similar to S4.")
    print("The provided S4 may have a typo. Here are the first {} terms generated by this rule:".format(num_terms))

    # Print the generated sequence for comparison
    generated_list = [sequence.get(i, 'NA') for i in range(1, num_terms + 1)]
    print(", ".join(map(str, generated_list)))
    
    print("\nThe recurrence relation R for s[n] can be written as:")
    # Print the equation as requested
    print("s[n] = s[s[n - 1]] + s[n - s[n - 1]]")


if __name__ == "__main__":
    main()
