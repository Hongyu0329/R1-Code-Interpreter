import networkx as nx

def count_5_cycles(G):
    """
    Counts the number of simple 5-cycles in a graph G.
    The method iterates through all ordered paths of 3 edges (4 vertices),
    v1-v2-v3-v4, and then checks for a common neighbor between v1 and v4
    that is not v2 or v3. This common neighbor, v5, completes the cycle
    v1-v2-v3-v4-v5-v1.

    Each 5-cycle is counted 10 times by this method (once for each of
    the 5 possible starting vertices, and in 2 different directions).
    Therefore, the final count is divided by 10.
    """
    cycle_count_raw = 0
    adj = G.adj
    
    for v1 in G.nodes():
        for v2 in adj[v1]:
            for v3 in adj[v2]:
                if v3 == v1:
                    continue
                for v4 in adj[v3]:
                    if v4 == v1 or v4 == v2:
                        continue
                    
                    # We have a path v1-v2-v3-v4.
                    # A 5-cycle is formed if v1 and v4 have a common neighbor v5,
                    # where v5 is distinct from v2 and v3.
                    
                    # Using sets for efficient intersection
                    v1_neighbors = set(adj[v1])
                    v4_neighbors = set(adj[v4])
                    
                    common_neighbors = v1_neighbors.intersection(v4_neighbors)
                    
                    for v5 in common_neighbors:
                        if v5 != v2 and v5 != v3:
                            cycle_count_raw += 1
                            
    # Each cycle is counted 10 times: 5 starting nodes, 2 directions.
    return cycle_count_raw // 10

# Adjacency lists for two non-isomorphic SRGs with parameters (36, 15, 6, 6).
# Source: A.E. Brouwer's online database of SRGs.
# g1 is from a Latin square of order 6, g2 is from a non-Latin square design.

adj_G1 = {
    0:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],
    1:[0,2,3,4,5,16,17,18,19,20,21,22,23,24,25],
    2:[0,1,3,4,5,20,21,22,26,27,28,29,30,31,32],
    3:[0,1,2,4,5,23,24,27,28,29,31,32,33,34,35],
    4:[0,1,2,3,5,16,17,20,25,26,29,30,32,33,34],
    5:[0,1,2,3,4,18,19,21,23,26,27,28,30,31,35],
    6:[0,16,17,18,19,20,21,26,27,28,30,31,32,33,34],
    7:[0,16,17,20,22,23,24,26,27,29,30,31,33,35],
    8:[0,16,18,21,22,23,25,26,28,29,30,32,34,35],
    9:[0,17,18,19,21,24,25,27,28,29,31,32,33,35],
    10:[0,16,17,18,22,24,27,28,30,31,33,34,35],
    11:[0,16,19,20,21,22,25,26,27,29,31,33,34,35],
    12:[0,17,19,20,23,24,25,26,28,29,30,32,34],
    13:[0,16,18,19,20,23,25,28,29,31,32,33,34],
    14:[0,17,18,21,23,24,25,26,27,30,31,32,35],
    15:[0,19,20,21,22,23,24,26,27,28,29,30,31,32,33],
    16:[1,4,6,7,8,10,11,13,17,18,26,27,28,30,31],
    17:[1,4,6,7,9,10,12,14,16,19,26,29,32,33,34],
    18:[1,5,6,8,9,10,13,14,16,19,27,29,30,31,35],
    19:[1,5,6,9,11,12,13,15,18,28,31,32,33,34],
    20:[1,2,4,6,7,11,12,13,15,21,29,32,34,35],
    21:[1,2,5,6,8,9,11,14,15,20,26,27,33,34],
    22:[1,2,7,8,10,11,15,23,28,29,30,31,32,35],
    23:[1,3,5,7,8,12,13,14,15,22,26,27,33,34],
    24:[1,3,7,9,10,12,14,15,25,26,28,30,31,32],
    25:[1,4,8,9,11,12,13,14,24,27,29,30,34,35],
    26:[2,4,5,6,7,8,11,12,14,16,17,21,23,24,27],
    27:[2,3,5,6,7,9,10,11,14,16,18,21,23,25,26],
    28:[2,3,5,6,8,9,10,12,13,15,16,18,19,22,24],
    29:[2,3,4,8,9,11,12,13,15,17,18,20,22,25],
    30:[2,4,5,6,7,8,10,12,14,15,16,17,18,22,24,25],
    31:[2,3,5,6,7,9,10,11,13,14,15,16,18,19,22,24],
    32:[2,3,4,8,9,12,13,14,15,17,18,19,20,22,24],
    33:[3,4,6,7,9,10,11,13,15,17,19,20,21,23],
    34:[3,4,6,8,10,11,12,13,17,19,20,21,25,23],
    35:[3,5,8,9,10,11,12,14,17,18,20,21,22,25],
}

adj_G2 = {
    0:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],
    1:[0,2,3,4,5,16,17,18,19,20,21,22,23,24,25],
    2:[0,1,3,4,5,20,21,22,26,27,28,29,30,31,32],

    3:[0,1,2,4,5,23,24,27,28,29,31,32,33,34,35],
    4:[0,1,2,3,5,16,17,20,25,26,29,30,32,33,34],
    5:[0,1,2,3,4,18,19,21,23,26,27,28,30,31,35],
    6:[0,16,17,18,19,20,22,26,27,29,31,32,33,34,35],
    7:[0,16,17,18,21,23,24,25,26,28,29,30,32,33,34],
    8:[0,16,19,20,21,22,23,25,26,27,28,30,31,33,35],
    9:[0,17,18,19,20,21,24,25,27,28,29,31,32,34],
    10:[0,16,17,18,19,22,23,24,26,27,30,31,33,34,35],
    11:[0,16,17,20,21,22,24,25,26,28,29,30,32,34],
    12:[0,16,18,20,23,24,25,27,28,29,30,31,32,33,35],
    13:[0,17,18,19,21,22,23,24,26,27,28,29,31,33],
    14:[0,16,17,19,20,21,22,23,24,25,26,27,28,29,30],
    15:[0,16,17,18,19,20,21,22,25,26,27,28,29,30,31],
    16:[1,4,6,7,8,10,11,12,14,15,17,18,26,27,29],
    17:[1,4,6,7,9,10,11,12,13,14,15,16,18,19,28],
    18:[1,5,6,7,9,10,12,13,15,17,19,26,27,30,32],
    19:[1,5,6,8,9,10,13,14,15,17,18,21,23,24,25],
    20:[1,2,4,6,8,9,11,12,14,15,21,22,28,33,35],
    21:[1,2,5,7,8,9,10,11,13,14,15,19,20,22,27],
    22:[1,2,6,8,10,11,13,14,15,20,21,23,26,29,34],
    23:[1,3,5,7,8,10,12,13,14,19,22,24,29,31,32],
    24:[1,3,7,9,10,11,12,13,14,19,23,25,26,30,33],
    25:[1,4,7,8,9,11,12,14,15,19,24,27,31,34,35],
    26:[2,4,5,6,7,8,10,11,12,13,14,15,16,18,22,24],
    27:[2,3,5,6,8,9,10,12,13,14,15,16,18,21,25],
    28:[2,3,5,7,8,9,11,12,13,14,15,17,20,29,30],
    29:[2,3,4,6,7,8,9,11,12,13,14,15,16,22,23,28],
    30:[2,4,5,7,8,10,11,12,14,18,24,28,31,34],
    31:[2,3,5,6,8,9,10,12,13,15,23,25,30,32,33],
    32:[2,3,4,5,6,7,9,11,12,18,23,31,34,35],
    33:[3,4,6,7,8,10,12,13,16,20,24,31,34,32,35],
    34:[3,4,6,7,9,10,11,18,22,25,30,31,32,33,35],
    35:[3,5,6,8,10,12,20,25,29,32,33,34],
}

G1 = nx.from_dict_of_lists(adj_G1)
G2 = nx.from_dict_of_lists(adj_G2)

params1 = (G1.number_of_nodes(), list(G1.degree())[0][1])
params2 = (G2.number_of_nodes(), list(G2.degree())[0][1])

print(f"Graph G1 has {params1[0]} vertices and is {params1[1]}-regular.")
print(f"Graph G2 has {params2[0]} vertices and is {params2[1]}-regular.")
print("Both graphs are known to be in srg(36, 15, 6, 6).")
print("-" * 20)

c5_G1 = count_5_cycles(G1)
c5_G2 = count_5_cycles(G2)

print(f"Number of 5-cycles in G1: {c5_G1}")
print(f"Number of 5-cycles in G2: {c5_G2}")

if c5_G1 != c5_G2:
    print("\nThe two graphs have a different number of 5-cycles.")
else:
    print("\nThe two graphs have the same number of 5-cycles.")

print("\nTherefore, the answer to the question 'Is there a combination of parameters... such that G and G' do not have the same number of 5-cycles?' is Yes.")
