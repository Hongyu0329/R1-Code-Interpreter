import math

def solve():
    """
    Calculates the integer part of 10^4 * lim_{N->inf} F(N)/ln(N),
    where F(N) is the number of pairs of positive integers (a,b)
    with 1 <= a,b <= N such that b | a^2+5a+1 and a | b^2+5b+1.
    """

    # The recurrence relation for the sequence of solutions is s_{n+2} = 13*s_{n+1} - s_n - 5.
    # The growth rate of this sequence is determined by the largest root of the
    # characteristic equation r^2 - 13*r + 1 = 0.
    # The root is phi = (13 + sqrt(165))/2.
    phi = (13 + math.sqrt(165)) / 2

    # The number of solutions F(N) is asymptotically 2*k, where s_k is the largest
    # term in the sequence <= N.
    # s_k is approximately c * phi^k. So k is approx log(N)/log(phi).
    # F(N) / ln(N) approaches 2 / ln(phi) as N -> infinity.
    limit_value = 2 / math.log(phi)

    # The problem asks for the integer part of 10^4 * limit_value.
    result = math.floor(10000 * limit_value)

    print(f"The equation relating the solution pairs (a,b) is a^2 + b^2 + 5a + 5b + 1 = 13ab.")
    print(f"The solutions are generated by a sequence s_n where s_0=1, s_1=1 and s_{{n+2}} = 13*s_{{n+1}} - s_n - 5.")
    print(f"The limit F(N)/ln(N) as N->infinity is given by 2/ln(phi), where phi is the golden-ratio-like constant from the recurrence.")
    print(f"phi = (13 + sqrt(165))/2")
    print(f"The value is the integer part of 10000 * 2 / ln(phi).")
    print(result)

solve()