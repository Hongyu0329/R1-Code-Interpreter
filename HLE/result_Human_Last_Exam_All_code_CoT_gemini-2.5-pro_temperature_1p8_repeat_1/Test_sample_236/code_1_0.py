import collections

def solve_homology_cobordism_count():
    """
    Calculates the number of homology cobordism group elements representable
    by integral surgery on knots with at most four crossings.
    """
    print("This script determines how many unique elements of the homology cobordism group")
    print("can be formed by integral surgery on knots with at most four crossings.\n")

    # Step 1: Define knots with at most 4 crossings and their Arf invariants.
    # Note: A knot's mirror image has the same Arf invariant, so we don't need to list it separately.
    knots = {
        "Unknot (0_1)": {"arf_invariant": 0},
        "Trefoil (3_1)": {"arf_invariant": 1},
        "Figure-eight (4_1)": {"arf_invariant": 0}
    }

    print("Step 1: Identify knots and their Arf invariants.")
    for name, data in knots.items():
        print(f"- {name}: Arf invariant = {data['arf_invariant']}")
    print("\nAn Arf invariant of 0 yields the trivial element.")
    print("An Arf invariant of 1 yields the non-trivial element.\n")

    # Step 2: Determine the type of homology cobordism element each knot generates.
    element_map = {
        0: "Trivial Element",
        1: "Non-trivial Element"
    }

    # Use a dictionary to group knots by the element they generate.
    generated_elements = collections.defaultdict(list)
    for name, data in knots.items():
        element_type = element_map[data["arf_invariant"]]
        generated_elements[element_type].append(name)

    print("Step 2: Group knots by the homology element they generate.")
    for element, knames in generated_elements.items():
        print(f"- The {element} is generated by: {', '.join(knames)}.")

    # Step 3: Count the number of unique elements generated.
    num_trivial = 1 if "Trivial Element" in generated_elements else 0
    num_nontrivial = 1 if "Non-trivial Element" in generated_elements else 0
    total_elements = len(generated_elements)

    print("\nStep 3: Final Count.")
    print("The final count is the number of distinct groups from Step 2.")
    print(f"Number of groups generating the Trivial Element: {num_trivial}")
    print(f"Number of groups generating the Non-trivial Element: {num_nontrivial}")
    print("\nFinal Equation:")
    print(f"{num_trivial} (from Arf=0 knots) + {num_nontrivial} (from Arf=1 knots) = {total_elements} total elements")

solve_homology_cobordism_count()