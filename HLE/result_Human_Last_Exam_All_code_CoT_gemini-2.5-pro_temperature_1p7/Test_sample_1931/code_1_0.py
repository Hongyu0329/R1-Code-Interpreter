import mpmath
import random

def is_prime(n):
    """
    Check if a number is prime using the Miller-Rabin primality test.
    This test is probabilistic but highly reliable for large numbers.
    """
    if n < 2:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    if n < 25:
        return True
    
    # Write n as 2^r * d + 1
    d = n - 1
    r = 0
    while d % 2 == 0:
        d //= 2
        r += 1

    # Perform Miller-Rabin test k times for accuracy
    k = 5
    for _ in range(k):
        a = random.randrange(2, n - 2)
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True

def find_target_prime():
    """
    Finds the 6th prime in the sequence generated by concatenating digits of Pi
    and checks if it ends with '521023'.
    """
    # The 6th prime from Pi's digits is known to have 375 digits.
    # We need at least that many digits of precision for Pi.
    # Set mpmath precision. dps = decimal places.
    mpmath.mp.dps = 400

    # Get Pi as a string of digits, removing the decimal point.
    pi_digits = str(mpmath.pi).replace('.', '')

    primes_found = []
    current_number_str = ""

    print("Searching for the first 6 prime numbers formed from the digits of Pi (π)...")

    for digit in pi_digits:
        current_number_str += digit
        
        # Optimization: A prime number > 5 cannot end in an even digit or 5.
        if len(current_number_str) > 1:
            last_digit = int(digit)
            if last_digit % 2 == 0 or last_digit == 5:
                continue
        
        current_number = int(current_number_str)

        if is_prime(current_number):
            primes_found.append(current_number)
            # The "equation" instruction likely means to show the numbers involved.
            # Here are the primes found in the sequence:
            print(f"Prime #{len(primes_found)}: {current_number}")

        if len(primes_found) == 6:
            break

    print("-" * 30)
    if len(primes_found) == 6:
        sixth_prime = primes_found[-1]
        last_six = str(sixth_prime)[-6:]
        
        print(f"The 6th prime in the sequence is a {len(str(sixth_prime))}-digit number.")
        print("Checking if its last 6 digits match the target...")
        
        # The 'equation' can be represented as a check for equality
        print(f"last_6_digits({sixth_prime}) = {last_six}")
        print(f"Is {last_six} == 521023? {last_six == '521023'}")

        if last_six == '521023':
            print("\nSuccess! The target was found.")
            print("The irrational number is Pi (π), which is expressed with the single symbol 'π'.")
        else:
            print("\nThe 6th prime does not match the target.")
    else:
        print("\nCould not find 6 primes within the calculated precision.")

if __name__ == '__main__':
    find_target_prime()
