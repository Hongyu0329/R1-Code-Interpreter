import math

def solve_power_subgroups():
    """
    Calculates and explains the number of power subgroups in the
    generalized quaternion group of size 128.
    """
    group_order = 128

    # The generalized quaternion group of order 2^n is Q_{2^n}.
    # For a group of size 128, we have 2^n = 128.
    # We find n using logarithm base 2.
    n = int(math.log2(group_order))

    # The maximal cyclic subgroup <x> in Q_{2^n} has order 2^(n-1).
    cyclic_subgroup_order = 2**(n - 1)

    print(f"The group is the generalized quaternion group of size {group_order}, denoted Q_{group_order} or Q_2^{n}.")
    print(f"From the order, we can determine n: 2^{n} = {group_order}, so n = {n}.")
    print("\nTo find the number of power subgroups, we analyze the structure of G^k = {g^k | g in G} for integer k.")
    
    # Case 1: k is an odd number.
    num_subgroups_odd_k = 1
    print("\nCase 1: k is odd.")
    print("For any odd integer k, the set of k-th powers G^k is the group G itself.")
    print(f"This accounts for {num_subgroups_odd_k} power subgroup (the group G).")

    # Case 2: k is an even number.
    # The distinct power subgroups correspond to <x^d> where d is an even divisor of 2^(n-1).
    # The divisors of 2^(n-1) are 2^0, 2^1, ..., 2^(n-1).
    # The even divisors are 2^1, 2^2, ..., 2^(n-1).
    # The number of such divisors is (n-1).
    num_subgroups_even_k = n - 1
    
    print("\nCase 2: k is even.")
    print(f"For any even integer k, the set G^k is a cyclic subgroup of the maximal cyclic subgroup, which has order {cyclic_subgroup_order}.")
    print(f"These power subgroups correspond to the subgroups generated by x^d, where d is an even divisor of {cyclic_subgroup_order}.")
    
    even_divisors = [2**i for i in range(1, n)]
    print(f"The even divisors of {cyclic_subgroup_order} are: {', '.join(map(str, even_divisors))}.")
    print(f"This gives {num_subgroups_even_k} distinct cyclic subgroups.")

    # Total number of power subgroups is the sum from both cases.
    total_power_subgroups = num_subgroups_odd_k + num_subgroups_even_k

    print("\n--- Total Calculation ---")
    print("The total number of power subgroups is the sum of the counts from both cases:")
    print(f"Total = (Subgroups from odd k) + (Subgroups from even k)")
    print(f"Total = {num_subgroups_odd_k} + {num_subgroups_even_k} = {total_power_subgroups}")
    print("\n-------------------------")
    print(f"\nConclusion: There are {total_power_subgroups} power subgroups in the generalized quaternion group of size {group_order}.")

# Run the solver
solve_power_subgroups()