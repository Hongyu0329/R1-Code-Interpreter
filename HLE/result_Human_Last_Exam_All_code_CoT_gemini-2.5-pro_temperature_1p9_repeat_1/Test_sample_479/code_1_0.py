import math

def analyze_torus_mean_curvature():
    """
    This function demonstrates that a surface of genus 1 (a torus)
    can have a mean curvature that never vanishes.
    """
    print("--- Analysis of a Genus 1 Surface (Torus) ---")
    print("A torus is a surface of genus 1.")
    print("It can be generated by revolving a circle of minor radius r")
    print("around an axis at a distance of major radius R from its center.")
    print("\nThe mean curvature H at a point on the torus is given by the formula:")
    print("H = (R + 2*r*cos(theta)) / (2*r*(R + r*cos(theta)))")
    print("where theta is the angle describing the position on the revolving circle.")

    # We choose specific values for R and r such that R > 2r.
    # This construction is known as a "skinny" torus and ensures H is never zero.
    R = 3.0
    r = 1.0

    print(f"\nLet's choose specific parameters: R = {R}, r = {r}.")
    if R > 2*r:
        print(f"The condition R > 2*r is satisfied ({R} > {2*r}), which is key.")
    else:
        print(f"Warning: R > 2*r is not satisfied. Mean curvature might be zero for some points.")
        return

    # Analyze the numerator: N = R + 2*r*cos(theta)
    # Since cos(theta) varies between -1 and 1.
    min_cos = -1
    max_cos = 1

    # Calculation for the numerator
    min_numerator_val = R + 2 * r * min_cos
    max_numerator_val = R + 2 * r * max_cos

    print("\nStep 1: Analyze the numerator N = R + 2*r*cos(theta)")
    print("The term cos(theta) varies in the range [-1, 1].")
    print(f"So, the numerator N varies in the range [R + 2*r*(-1), R + 2*r*(1)].")
    print(f"The minimum value of the numerator is {R} + {2*r}*(-1) = {min_numerator_val}")
    print(f"The maximum value of the numerator is {R} + {2*r}*(1) = {max_numerator_val}")
    if min_numerator_val > 0:
        print("Result: The numerator is always positive and thus never zero.")
    else:
        print("Result: The numerator can be zero, which would make H zero.")

    # Analyze the denominator: D = 2*r*(R + r*cos(theta))
    # We must also ensure R > r for the torus to not self-intersect.
    # Calculation for the denominator
    min_denominator_val = 2 * r * (R + r * min_cos)
    max_denominator_val = 2 * r * (R + r * max_cos)

    print("\nStep 2: Analyze the denominator D = 2*r*(R + r*cos(theta))")
    print(f"The denominator D varies in the range [2*r*(R + r*(-1)), 2*r*(R + r*(1))].")
    print(f"The minimum value of the denominator is {2*r}*({R} + {r}*(-1)) = {min_denominator_val}")
    print(f"The maximum value of the denominator is {2*r}*({R} + {r}*(1)) = {max_denominator_val}")

    if min_denominator_val > 0:
        print("Result: The denominator is always positive and thus never zero.")
    else:
        print("Result: The denominator can be zero, which would make H undefined.")
        
    print("\n--- Conclusion ---")
    print("For a torus with R=3 and r=1, both the numerator and denominator of the mean curvature formula are always positive.")
    print("This means the mean curvature H is never zero for this torus.")
    print("This explicitly demonstrates that a surface of genus 1 can satisfy the given condition.")
    print("\nBased on the theoretical argument that rules out genus >= 2, and the demonstrations that genus 0 and 1 are possible,")
    print("the maximal possible genus is 1.")

analyze_torus_mean_curvature()