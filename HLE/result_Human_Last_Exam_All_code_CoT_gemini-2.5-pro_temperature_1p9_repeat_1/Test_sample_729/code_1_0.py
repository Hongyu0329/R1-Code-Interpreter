import math

def count_divisors(n):
    """
    Calculates the number of divisors of an integer n.
    For n = p^a, the number of divisors is a+1.
    """
    if n == 0:
        return 0
    p, a = 0, 0
    temp_n = n
    # Find the prime factorization for powers of 2
    if temp_n > 0 and (temp_n & (temp_n - 1)) == 0:
         p = 2
         a = int(math.log2(temp_n))
    # A simple general method if not a power of 2
    else:
        count = 0
        for i in range(1, int(math.sqrt(n)) + 1):
            if n % i == 0:
                if n / i == i:
                    count += 1
                else:
                    count += 2
        return count
    return a + 1

def solve_quaternion_subgroups():
    """
    Calculates the number of power subgroups in the generalized quaternion group of size 128.
    """
    group_order = 128
    
    # The group Q_128 has a cyclic subgroup <x> of order 64.
    cyclic_subgroup_order = group_order // 2
    
    # 1. Count the number of cyclic subgroups in <x>.
    # This is equal to the number of divisors of 64.
    num_subgroups_in_x = count_divisors(cyclic_subgroup_order)
    
    # 2. Count the number of cyclic subgroups generated by elements not in <x>.
    # There are 64 such elements, all of order 4.
    # Each cyclic subgroup of order 4 has phi(4) = 2 generators.
    # So these 64 elements form 64 / 2 = 32 distinct subgroups.
    num_elements_outside_x = group_order // 2
    generators_per_subgroup = 2
    num_subgroups_outside_x = num_elements_outside_x // generators_per_subgroup
    
    # 3. The total number of subgroups is the sum of the two counts.
    total_power_subgroups = num_subgroups_in_x + num_subgroups_outside_x
    
    print("The generalized quaternion group of size 128 has a cyclic subgroup of order 64.")
    print(f"The number of power (cyclic) subgroups within this cyclic subgroup is the number of divisors of 64, which is {num_subgroups_in_x}.")
    print(f"The remaining 64 elements are all of order 4 and form distinct cyclic subgroups.")
    print(f"The number of these subgroups is 64 / 2 = {num_subgroups_outside_x}.")
    print("The total number of power subgroups is the sum of these two counts.")
    print(f"{num_subgroups_in_x} + {num_subgroups_outside_x} = {total_power_subgroups}")

solve_quaternion_subgroups()