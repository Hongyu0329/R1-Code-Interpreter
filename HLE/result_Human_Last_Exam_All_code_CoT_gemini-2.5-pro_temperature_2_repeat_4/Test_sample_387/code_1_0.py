import numpy as np

def solve_log_blowup_dimension():
    """
    Calculates the dimension of a log blowup of a point with a given log structure.

    The problem specifies a point P with log structure N^3 and a log ideal I
    generated by (1,0,0) and (0,1,0). This corresponds to blowing up
    the affine space A^3 along the ideal <x, y>.

    In toric geometry, this operation is a subdivision of the fan.
    1. The original space is A^3, whose fan is the cone generated by the
       standard basis vectors in R^3.
    2. The log ideal generators are v1=(1,0,0) and v2=(0,1,0).
    3. The log blowup introduces a new ray w = v1 + v2.
    4. This splits the original 3D cone into two new 3D cones.
    5. The dimension of the blowup is the maximum dimension of the new cones.
    """
    # The original space corresponds to the cone generated by the standard basis in R^3.
    # The dimension of this space is 3.
    print(f"The log structure P is on a point in a space of dimension 3.\n")
    e1 = np.array([1, 0, 0])
    e2 = np.array([0, 1, 0])
    e3 = np.array([0, 0, 1])

    # The log ideal I is generated by two vectors.
    v1 = np.array([1, 0, 0])
    v2 = np.array([0, 1, 0])
    print(f"The log ideal I is generated by v1 = {v1} and v2 = {v2}.\n")

    # The log blowup construction introduces a new vector w = v1 + v2.
    w = v1 + v2
    print(f"The blowup introduces a new vector w = v1 + v2 = {w}.\n")

    # The new variety is covered by two affine charts, corresponding to two new cones.
    # We form matrices from the generators of these cones to find their dimension (rank).
    
    # Cone 1 generators: w, e2, e3
    M1 = np.array([w, e2, e3])
    print("The first new cone, sigma_1, is generated by the vectors:")
    print(M1)
    
    # Cone 2 generators: w, e1, e3
    M2 = np.array([w, e1, e3])
    print("\nThe second new cone, sigma_2, is generated by the vectors:")
    print(M2)

    # The dimension of each cone is the rank of its generator matrix.
    dim1 = np.linalg.matrix_rank(M1)
    dim2 = np.linalg.matrix_rank(M2)
    print(f"\nThe dimension of sigma_1 is rank(M1) = {dim1}.")
    print(f"The dimension of sigma_2 is rank(M2) = {dim2}.\n")

    # The dimension of the blowup is the maximum of these dimensions.
    dimension_of_blowup = max(dim1, dim2)
    
    print(f"The dimension of the log blowup is the maximum of the dimensions of the new cones.")
    print(f"Final Dimension = max({dim1}, {dim2}) = {dimension_of_blowup}")

solve_log_blowup_dimension()