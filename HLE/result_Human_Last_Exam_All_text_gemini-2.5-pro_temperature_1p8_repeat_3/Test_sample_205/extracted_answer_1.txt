172[
void main() {
    // Variable Declarations using the most memory-efficient types.
    // Total memory: 158(res) + 3(len) + 3(i) + 3(j) + 3(temp) + 2(carry) = 172D.

    digit res[158];      // Stores the 158 digits of the factorial.
    char  len;           // Stores the current number of digits in 'res'.
    char  i;             // Outer loop counter for numbers from 2 to 100.
    char  j;             // Inner loop counter for iterating through digits.
    char  temp;          // Temporary variable for the product in each step.
    short carry;         // Holds the carry-over value during multiplication.

    // Initialize the result to 1.
    res[0] = 1;
    len = 1;

    // Loop from i = 2 to 100 to calculate 100!
    for (i = 2; i <= 100; i++) {
        carry = 0;
        // Multiply the current number in 'res' by 'i'.
        for (j = 0; j < len; j++) {
            // This is the core long multiplication step.
            temp = res[j] * i + carry;
            res[j] = temp % 10;
            carry = temp / 10;
        }

        // If there's a leftover carry, append its digits to the number.
        while (carry > 0) {
            res[len] = carry % 10;
            len = len + 1;
            carry = carry / 10;
        }
    }

    // The calculation is complete. The result is now stored in the 'res' array,
    // with the least significant digit at res[0].
}
]