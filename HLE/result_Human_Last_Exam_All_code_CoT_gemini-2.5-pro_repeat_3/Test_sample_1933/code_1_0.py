import itertools

def solve_vc_dimension():
    """
    This script solves for the VC dimension of the logic fragment
    FO_{exists, and, T, bot}[S] where S has 4 unary predicates.
    """
    
    # Step 1: Characterize the Concept Class
    # The schema S has 4 unary predicates: P_1, P_2, P_3, P_4.
    # The logic allows existential quantifiers (exists), conjunction (and),
    # true (T), and false (bot).
    # A concept is a set of universe elements {x | phi(x) is true} for some formula phi(x).
    # Any formula phi(x) in this fragment is logically equivalent to a formula of the form:
    # C \land (P_{i_1}(x) \land P_{i_2}(x) \land ... \land P_{i_m}(x))
    # where C is a sentence (a formula with no free variables) that is either true or false
    # for the entire model.
    # This means any concept is definable by a formula of the form bigwedge_{i in I} P_i(x)
    # for some I subseteq {1, 2, 3, 4}, or it is the empty set (if C is false).
    # This is the concept class of "pure monomials" or "conjunctions of features".
    # The VC dimension of the class of monomials over k predicates is k. Here k=4.
    
    k = 4
    vc_dimension = k
    
    print("--- Analysis of the VC Dimension ---")
    print(f"The logic defines a concept class of conjunctions over {k} predicates.")
    print("We will prove that the VC dimension is equal to the number of predicates, which is 4.")
    print("\nPart 1: Show VC dimension >= 4")
    print("We need to show that there exists a set of 4 points that can be shattered.")
    
    # Let's demonstrate shattering a set X of size d=4.
    d = 4
    X = set(range(d))

    # We construct a model where P_i(x_j) is true if and only if i != j.
    # We use 0-based indexing for predicates and points.
    # model[i][j] represents P_i(x_j)
    model = [[(i != j) for j in range(d)] for i in range(k)]

    print(f"\nConstructing a model to shatter X = {{x_0, x_1, x_2, x_3}}:")
    print("Model definition: P_i(x_j) is true <=> i != j")
    print("Model matrix (rows=predicates, cols=points):")
    for i in range(k):
        print(f"P{i}: {[int(val) for val in model[i]]}")

    # To shatter X, for every subset Y of X, we must find a concept that selects exactly Y.
    # A concept is defined by a conjunction of predicates from a subset I of {P_0, P_1, P_2, P_3}.
    
    found_subsets = set()
    predicate_indices = range(k)
    
    # Iterate through all 2^k = 16 possible concepts (conjunctions)
    for r in range(k + 1):
        for I in itertools.combinations(predicate_indices, r):
            # The concept is the conjunction of predicates P_i for i in I.
            
            # Find the subset of X selected by this concept
            selected_by_concept = set()
            for j in X:  # For each point x_j
                # x_j is selected if P_i(x_j) is true for all i in I.
                if all(model[i][j] for i in I):
                    selected_by_concept.add(j)
            
            found_subsets.add(frozenset(selected_by_concept))

    # Check if all 2^d subsets of X were generated.
    num_possible_subsets = 2**d
    if len(found_subsets) == num_possible_subsets:
        print(f"\nSuccess! The set X of size {d} is shattered.")
        print(f"All {num_possible_subsets} subsets of X were generated by the {len(found_subsets)} concepts.")
        print("Therefore, VC dimension is at least 4.")
    else:
        print("\nFailure! The constructed model does not shatter the set.")

    print("\nPart 2: Show VC dimension < 5")
    print("We prove that no set of 5 points can be shattered.")
    
    num_points_to_shatter = 5
    num_subsets_to_generate = 2**num_points_to_shatter
    
    # The number of concepts is at most the number of ways to form a conjunction
    # of the 4 predicates.
    num_concepts = 2**k
    
    print(f"To shatter a set of {num_points_to_shatter} points, we need to generate {num_subsets_to_generate} distinct subsets.")
    print(f"However, with {k} predicates, we can only form {num_concepts} distinct conjunction formulas.")
    print(f"Since {num_concepts} < {num_subsets_to_generate}, there are not enough concepts to generate all required subsets.")
    print("Therefore, no set of 5 points can be shattered.")
    print("This means the VC dimension is at most 4.")

    print("\n--- Conclusion ---")
    print("From Part 1 and Part 2, we conclude that the VC dimension is exactly 4.")
    print("\nThe final equation is:")
    print("VC dimension = 4")
    
    print("\nOutputting each number in the final equation as requested:")
    # The only number in the final equation "VC dimension = 4" is 4.
    print(vc_dimension)


if __name__ == '__main__':
    solve_vc_dimension()