import sympy

def compute_abelianization_structure():
    """
    Computes the rank and torsion order of Ab(G) based on its generators.
    """
    # The abelianization of G is isomorphic to the subgroup of Z^2 generated
    # by the vectors psi(A) = (1, -1) and psi(B) = (0, -1).
    # We form a matrix with these vectors as columns.
    M = sympy.Matrix([[1, 0], [-1, -1]])

    # The structure of the abelian group generated by the columns of M
    # is given by the Smith Normal Form (SNF) of M.
    S = M.smith_normal_form()

    # The rank 'r' is the number of non-zero diagonal elements in the SNF.
    rank = 0
    for i in range(min(S.rows, S.cols)):
        if S[i, i] != 0:
            rank += 1

    # The order of the torsion subgroup 't' is the product of the
    # diagonal elements (invariant factors) that are greater than 1.
    torsion_order = 1
    for i in range(min(S.rows, S.cols)):
        if S[i, i] > 1:
            torsion_order *= S[i, i]
            
    # The final equation is the pair (r, t)
    print(f"The rank of Ab(G) is r = {rank}")
    print(f"The order of the torsion subgroup of Ab(G) is t = {torsion_order}")
    print(f"The computed pair is (r, t) = ({rank}, {torsion_order})")

compute_abelianization_structure()