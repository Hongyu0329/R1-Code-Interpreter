import numpy as np

# In toric geometry, the space P with log structure N^3 corresponds to the cone
# in R^3 generated by the standard basis vectors.
e1 = np.array([1, 0, 0])
e2 = np.array([0, 1, 0])
e3 = np.array([0, 0, 1])

# The dimension of the original space is the rank of the matrix whose columns are these vectors.
original_cone_generators = np.array([e1, e2, e3]).T
dim_P = np.linalg.matrix_rank(original_cone_generators)

# The log ideal I generated by (1,0,0) and (0,1,0) corresponds to blowing up
# along the directions of e1 and e2. This is done by introducing a new vector v,
# which is the sum of e1 and e2.
v = e1 + e2

# The blowup subdivides the original cone into two new cones.
# Cone 1 is generated by {e1, v, e3}.
cone1_generators = np.array([e1, v, e3]).T
# Cone 2 is generated by {e2, v, e3}.
cone2_generators = np.array([e2, v, e3]).T

# The dimension of the toric variety corresponding to a fan is the maximum dimension
# of any cone in the fan. We calculate the dimension of each new cone via matrix rank.
dim_cone1 = np.linalg.matrix_rank(cone1_generators)
dim_cone2 = np.linalg.matrix_rank(cone2_generators)

# The dimension of the blowup is the maximum of these dimensions.
dim_blowup = max(dim_cone1, dim_cone2)

# The final "equation" is that the dimension of the blowup is the maximum
# of the dimensions of the new cones, which is equal to the original dimension.
print(f"Dimension of original space P = {dim_P}")
print(f"Dimension of new cone 1 = {dim_cone1}")
print(f"Dimension of new cone 2 = {dim_cone2}")
print(f"Dimension of the log blowup = max({dim_cone1}, {dim_cone2}) = {dim_blowup}")