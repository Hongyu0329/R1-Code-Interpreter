{
  "question": "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>.",
  "response_list": [
    "Answering this competitive programming challenge requires prioritizing memory efficiency above all else. A standard approach might involve reading the entire input string into an array, extracting the numbers into another array, sorting that array, and then printing the result. However, this method uses memory proportional to the input size, specifically a character array for the string and an integer array for the numbers.\n\nTo achieve maximum memory efficiency, we should avoid storing the entire input string. The most memory-efficient C program will read the input character by character and use a constant amount of memory regardless of the input string's length. This can be accomplished by using the \"counting sort\" algorithm. Since the numbers in the sum are limited to only 1, 2, and 3, we can simply count the occurrences of each number in a single pass through the input stream. After counting, we can construct the output string by printing the required number of '1's, followed by '2's, and then '3's, each separated by a '+' sign.\n\nThis approach processes the input as a stream and only requires a few integer variables to store the counts, making it exceptionally memory-light.\n\n### Memory-Efficient C Program\n\n```c\n#include <stdio.h>\n\n/**\n * This program solves the \"Helpful Maths\" problem from Codeforces (339A).\n * It reads a string representing a sum of numbers (e.g., \"3+1+2+1\") from standard input.\n * The summands are guaranteed to be only the numbers 1, 2, and 3.\n * The program rearranges the numbers in non-decreasing order and prints the new sum\n * (e.g., \"1+1+2+3\").\n *\n * This implementation is optimized for memory efficiency. It reads the input\n * character by character using getchar() instead of storing the entire string\n * in an array. It uses three integer variables to count the occurrences of\n * each number and then prints the result based on these counts.\n */\nint main() {\n    // --- Variable Declaration and Memory Calculation ---\n    // Total memory (m) is the sum of the sizes of these variables.\n    // Assuming a standard 32-bit system where sizeof(int) is 4 bytes.\n\n    int count1 = 0;   // 4 bytes: Counts the number '1'\n    int count2 = 0;   // 4 bytes: Counts the number '2'\n    int count3 = 0;   // 4 bytes: Counts the number '3'\n\n    // Variable to store the current character from input.\n    // It is an int to accommodate the EOF (End-Of-File) value.\n    int c;            // 4 bytes\n\n    // --- Input Reading and Counting Phase ---\n    // Read from standard input until a newline or EOF is found.\n    while ((c = getchar()) != '\\n' && c != EOF) {\n        // Increment the appropriate counter for each number found.\n        // The '+' characters are ignored.\n        if (c == '1') {\n            count1++;\n        } else if (c == '2') {\n            count2++;\n        } else if (c == '3') {\n            count3++;\n        }\n    }\n\n    // --- Output Generation Phase ---\n    // A flag to correctly place the '+' signs between numbers.\n    int first_term = 1; // 4 bytes\n\n    // Print all '1's.\n    while (count1 > 0) {\n        if (!first_term) {\n            putchar('+');\n        }\n        putchar('1');\n        first_term = 0;\n        count1--;\n    }\n\n    // Print all '2's.\n    while (count2 > 0) {\n        if (!first_term) {\n            putchar('+');\n        }\n        putchar('2');\n        first_term = 0;\n        count2--;\n    }\n\n    // Print all '3's.\n    while (count3 > 0) {\n        if (!first_term) {\n            putchar('+');\n        }\n        putchar('3');\n        first_term = 0;\n        count3--;\n    }\n\n    // Print a final newline character for clean output.\n    putchar('\\n');\n\n    return 0;\n}\n```\n\n### Total Memory Calculation\n\nThe total memory (m) used by the variables in this program is calculated as follows, assuming a common architecture where an `int` occupies 4 bytes:\n\n*   `int count1;`: 4 bytes\n*   `int count2;`: 4 bytes\n*   `int count3;`: 4 bytes\n*   `int c;`: 4 bytes\n*   `int first_term;`: 4 bytes\n\nTotal memory m = 4 + 4 + 4 + 4 + 4 = 20 bytes.\n\n<<<20>>>"
  ],
  "user_prompt_list": [
    "This is a problem in a competitive programming contest.\n\nXenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2, 3 and 4. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+4.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\nThe first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2, 3, and 4. String s is at most 1000 characters long.\n\nOutput\nPrint the new sum that Xenia can count.\n\nTask:\n\nWrite the most memory-efficient C program to solve this problem. Answer m as the total memory in bytes used for variables of this problem. \nOnce you feel you are ready for the final answer, directly return the answer with the format <<<answer content>>> at the end of your response, e.g. <<<C>>>, <<<9.8>>>."
  ],
  "system_message": ""
}