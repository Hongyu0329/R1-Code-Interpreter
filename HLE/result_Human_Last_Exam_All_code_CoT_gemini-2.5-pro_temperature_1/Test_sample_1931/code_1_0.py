import sympy
from mpmath import mp

def find_special_prime():
    """
    Finds the 6th prime number generated by concatenating digits of Euler's number 'e'
    and verifies its last 6 digits.
    """
    # Set precision for mpmath to get enough digits of 'e'.
    # 500 digits should be sufficient to find the 6th prime.
    mp.dps = 500

    # Get the digits of e as a string, removing the integer part and decimal point.
    e_digits_str = str(mp.e).replace('.', '')

    prime_count = 0
    found_primes = []

    # Iterate through the digits to form concatenated numbers.
    # We test substrings of increasing length.
    for i in range(1, len(e_digits_str) + 1):
        num_str = e_digits_str[:i]
        num = int(num_str)

        # Use sympy's isprime for a fast and reliable primality test.
        if sympy.isprime(num):
            prime_count += 1
            if prime_count == 6:
                sixth_prime = num
                # Check if the last 6 digits match the target.
                if str(sixth_prime).endswith("521023"):
                    # The prompt requests printing the number.
                    print(sixth_prime)
                    return

# You may need to install the required libraries first:
# pip install sympy mpmath
find_special_prime()