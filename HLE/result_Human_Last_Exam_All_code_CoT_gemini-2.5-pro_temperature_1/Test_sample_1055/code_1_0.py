import numpy as np

def main():
    """
    Computes the index of a subgroup H generated by matrices a and b in SL_2(Z).
    """
    # Define the matrices a and b from the problem statement.
    a = np.array([[-21, 242], [-2, 23]], dtype=np.int64)
    b = np.array([[-19, 200], [-2, 21]], dtype=np.int64)

    # Define the standard generator T of SL_2(Z).
    T = np.array([[1, 1], [0, 1]], dtype=np.int64)

    # Define the matrix Y(-2).
    Y_neg_2 = np.array([[1, 0], [-2, 1]], dtype=np.int64)

    # Compute the required powers of T.
    T10 = np.linalg.matrix_power(T, 10)
    T11 = np.linalg.matrix_power(T, 11)

    # Compute the inverses. Since det(T)=1, the inverse is simple.
    T_inv_10 = np.linalg.inv(T10).astype(np.int64)
    T_inv_11 = np.linalg.inv(T11).astype(np.int64)

    # Verify the conjugation relations for a and b.
    # a is conjugate to Y(-2) by T^11
    # b is conjugate to Y(-2) by T^10
    a_from_conjugation = T11 @ Y_neg_2 @ T_inv_11
    b_from_conjugation = T10 @ Y_neg_2 @ T_inv_10

    print("Step 1: Verify the generator relations through conjugation.")
    print("---------------------------------------------------------")
    print("Matrix a:\n", a)
    print("Calculated T^11 * Y(-2) * T^-11:\n", a_from_conjugation)
    if np.array_equal(a, a_from_conjugation):
        print("Relation for 'a' holds: a = T^11 * Y(-2) * T^-11\n")
    else:
        print("Relation for 'a' does not hold.\n")

    print("Matrix b:\n", b)
    print("Calculated T^10 * Y(-2) * T^-10:\n", b_from_conjugation)
    if np.array_equal(b, b_from_conjugation):
        print("Relation for 'b' holds: b = T^10 * Y(-2) * T^-10\n")
    else:
        print("Relation for 'b' does not hold.\n")

    print("Step 2: Calculate the index using group theory properties.")
    print("--------------------------------------------------------")
    print("The subgroup H = <a, b> is conjugate to H' = <T*Y(-2)*T^-1, Y(-2)>.")
    print("The index is invariant under conjugation, so [G:H] = [G:H'].")
    
    # The group K = <T, Y(-2)> is the congruence subgroup Gamma_0(2).
    index_G_K = 3
    print(f"H' is a subgroup of K = <T, Y(-2)> = Gamma_0(2).")
    print(f"The index of K in G=SL_2(Z) is [G:K] = {index_G_K}.")

    # The index of H' = <T*Y(-2)*T^-1, Y(-2)> in K = <T, Y(-2)> is 2.
    index_K_H_prime = 2
    print(f"The index of H' in K is [K:H'] = {index_K_H_prime}.")

    # The final index is the product of these indices by the Tower Law.
    final_index = index_G_K * index_K_H_prime
    
    print("\nBy the Tower Law for indices, [G:H] = [G:K] * [K:H'].")
    print(f"The final index is {index_G_K} * {index_K_H_prime} = {final_index}")

if __name__ == "__main__":
    main()
