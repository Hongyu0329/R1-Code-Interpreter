import sys

def solve_max_queens():
    """
    Calculates the maximum number m for the two-colored queens problem on a 16x16 board.
    """
    N = 16

    # A helper function to check if a given configuration is a valid N-Queens solution.
    # A solution is represented by a list `p` of length N, where p[i] is the column of the queen in row i.
    def is_valid_solution(p, n):
        # Check if we have N queens in N different columns
        if len(p) != n or len(set(p)) != n:
            return False
        # Check for diagonal attacks
        for i in range(n):
            for j in range(i + 1, n):
                # If the distance between rows equals the distance between columns, they are on the same diagonal.
                if abs(i - j) == abs(p[i] - p[j]):
                    return False
        return True

    print(f"The board size is {N}x{N}.")
    print("The goal is to find the maximum number m of queens of each color (white and black).")
    print("This requires finding two non-overlapping solutions to the N-Queens problem.\n")

    # Step 1: Generate a solution for the White Queens using a known construction.
    p_white = [0] * N
    # For i from 0 to N/2 - 1
    for i in range(N // 2):
        p_white[i] = 2 * i + 1
    # For i from N/2 to N - 1
    for i in range(N // 2, N):
        p_white[i] = 2 * (i - N // 2)
    
    print("--- Solution for White Queens ---")
    print("A configuration for the white queens has been generated.")
    # The list p_white represents the column for the queen in each row (0 to 15)
    print(f"White Queen Columns: {p_white}")
    if not is_valid_solution(p_white, N):
        print("Error: The generated white queen configuration is not a valid solution.")
        sys.exit(1)
    print("Verification: This configuration is a valid 16-Queens solution.\n")


    # Step 2: Generate a solution for the Black Queens by reflecting the white queen solution.
    # q[i] = (N-1) - p[i]
    p_black = [(N - 1) - col for col in p_white]

    print("--- Solution for Black Queens ---")
    print("A configuration for the black queens has been generated by reflecting the white solution.")
    print(f"Black Queen Columns: {p_black}")
    if not is_valid_solution(p_black, N):
        print("Error: The generated black queen configuration is not a valid solution.")
        sys.exit(1)
    print("Verification: This configuration is also a valid 16-Queens solution.\n")

    # Step 3: Verify that the two solutions are disjoint (occupy different squares).
    are_disjoint = True
    for i in range(N):
        if p_white[i] == p_black[i]:
            are_disjoint = False
            break

    print("--- Disjoint Verification ---")
    print("Checking if any white queen shares a square with a black queen...")
    if not are_disjoint:
        print("Error: The two solutions are NOT disjoint and cannot coexist.")
        sys.exit(1)
    print("Verification: The two sets of queens are on different squares.\n")

    # Step 4: Conclude the maximum value of m.
    m = N
    print("--- Conclusion ---")
    print("We have successfully placed 16 white queens and 16 black queens on the board")
    print("in two valid, non-overlapping configurations.")
    print("Since the maximum number of non-attacking queens of a single color is 16, m cannot be larger.")
    
    print("\nThe final equation is:")
    print(f"Maximum number m = {m}")
    print(f"Number of white queens = {m}")
    print(f"Number of black queens = {m}")

solve_max_queens()