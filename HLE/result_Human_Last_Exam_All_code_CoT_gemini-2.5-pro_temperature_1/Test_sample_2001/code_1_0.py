import numpy as np

def simulate_spin_valve_sensor(bias_field_mT, particle_field_mT):
    """
    Simulates the output of a Spin Valve sensor.

    The sensor has a linear response between -5 mT and +5 mT.
    Outside this range, it is saturated.
    The output is a simulated voltage proportional to the field.
    """
    # Sensor characteristics
    linear_range_min = -5.0  # mT
    linear_range_max = 5.0  # mT
    sensitivity = 100.0     # mV/mT
    saturation_voltage_pos = sensitivity * linear_range_max
    saturation_voltage_neg = sensitivity * linear_range_min

    def get_voltage(total_field):
        """Calculates sensor output voltage based on total magnetic field."""
        if total_field < linear_range_min:
            return saturation_voltage_neg
        elif total_field > linear_range_max:
            return saturation_voltage_pos
        else:
            return total_field * sensitivity

    # 1. Calculate the baseline voltage from the bias field alone
    base_voltage = get_voltage(bias_field_mT)

    # 2. Calculate the voltage when a particle is present
    total_field_with_particle = bias_field_mT + particle_field_mT
    voltage_with_particle = get_voltage(total_field_with_particle)

    # 3. The detected signal is the change in voltage
    detected_signal = abs(voltage_with_particle - base_voltage)

    print(f"--- Simulation with Bias Field: {bias_field_mT} mT ---")
    print(f"Bias field alone results in a sensor output of {base_voltage:.1f} mV.")
    print(f"Field with particle is {total_field_with_particle:.1f} mT, resulting in {voltage_with_particle:.1f} mV output.")
    print(f"Resulting Detected Signal (Voltage Change): {detected_signal:.1f} mV\n")
    return detected_signal

def main():
    """Main function to run the simulations."""
    # The small magnetic field generated by a single passing particle
    particle_field_mT = 0.5

    print("This simulation demonstrates the effect of the bias magnet's position on particle detection.")
    print(f"A single paramagnetic particle creates a small magnetic field of {particle_field_mT} mT at the sensor.\n")

    # --- Scenario 1: Properly Positioned Magnet ---
    # The bias field is set to 0, placing the sensor in the middle of its linear range.
    proper_bias_field = 0.0
    signal_proper = simulate_spin_valve_sensor(proper_bias_field, particle_field_mT)

    # --- Scenario 2: Improperly Positioned Magnet (Too Close) ---
    # The magnet is too close, creating a strong bias field that saturates the sensor.
    improper_bias_field = 8.0
    signal_improper = simulate_spin_valve_sensor(improper_bias_field, particle_field_mT)

    # --- Conclusion ---
    print("--- Conclusion ---")
    if signal_proper > 0 and signal_improper == 0:
        print("The simulation shows that a proper bias field allows for particle detection,")
        print("but an improper, strong bias field saturates the Spin Valve sensor,")
        print("making the detected signal zero. The particle becomes invisible to the system.")
        print("\nTherefore, the potential negative effect is Spin Valve Saturation.")
    else:
        print("The simulation did not run as expected.")

if __name__ == "__main__":
    main()
<<<D>>>