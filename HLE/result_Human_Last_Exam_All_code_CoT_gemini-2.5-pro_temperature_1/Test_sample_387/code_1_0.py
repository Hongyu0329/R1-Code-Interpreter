import numpy as np

# Step 1: Define the ambient space and the log ideal from the problem statement.
# The point P with log structure N^3 corresponds to a 3-dimensional space.
# In toric geometry, this is represented by a single 3D cone, sigma,
# whose generators are the standard basis vectors.
e1 = np.array([1, 0, 0])
e2 = np.array([0, 1, 0])
e3 = np.array([0, 0, 1])

# The dimension of the space is the number of generators of its cone.
dim_P = len([e1, e2, e3])
print(f"The point P with log structure N^3 corresponds to a space of dimension {dim_P}.")
print("Its corresponding cone, sigma, is generated by:")
print(f"e1 = {e1}\ne2 = {e2}\ne3 = {e3}\n")

# The log ideal I is generated by (1,0,0) and (0,1,0), which are e1 and e2.
I_generators = [e1, e2]
print("The log ideal I is generated by the vectors e1 and e2.\n")

# Step 2: The log blowup corresponds to a subdivision of the cone sigma.
# A new ray 'w' is introduced, defined as the sum of the ideal's generators.
w = sum(I_generators)
print(f"The blowup procedure introduces a new ray w = e1 + e2 = {w}.")
print("This subdivides the original cone into two new cones, sigma1 and sigma2.\n")

# The new cones are formed by replacing one of the original ideal generators
# with the new ray 'w'.
cone1_generators = [e1, w, e3]
cone2_generators = [e2, w, e3]

print("Cone sigma1 is generated by: {e1, w, e3}")
print(f"Vectors are:\n{cone1_generators[0]}\n{cone1_generators[1]}\n{cone1_generators[2]}\n")

print("Cone sigma2 is generated by: {e2, w, e3}")
print(f"Vectors are:\n{cone2_generators[0]}\n{cone2_generators[1]}\n{cone2_generators[2]}\n")


# Step 3: Calculate the dimension of the new cones.
# The dimension of the resulting variety is the maximal dimension of the new cones.
# The dimension of a cone is the number of linearly independent generators,
# which can be found by calculating the rank of the matrix they form.
matrix1 = np.array(cone1_generators)
dim_cone1 = np.linalg.matrix_rank(matrix1)

matrix2 = np.array(cone2_generators)
dim_cone2 = np.linalg.matrix_rank(matrix2)

print(f"The dimension of cone sigma1 is the rank of the matrix of its generators: rank = {dim_cone1}.")
print(f"The dimension of cone sigma2 is the rank of the matrix of its generators: rank = {dim_cone2}.\n")

# Step 4: The final dimension is the maximum of the dimensions of the new cones.
dim_blowup = max(dim_cone1, dim_cone2)
print("The dimension of the log blowup is the maximum dimension found in the new fan.")
print(f"Dimension = max({dim_cone1}, {dim_cone2}) = {dim_blowup}")

<<<3>>>