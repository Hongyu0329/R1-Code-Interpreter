import numpy as np

def get_objectives(w, x1, x2):
    """Calculates the objective values for a given vector w."""
    # We use the linear objectives since we restrict w to be non-negative
    return np.array([np.dot(x1, w), np.dot(x2, w)])

def is_dominated(obj, other_obj):
    """Checks if obj is dominated by other_obj."""
    # Returns true if other_obj is better or equal in all objectives
    # and strictly better in at least one.
    return np.all(other_obj >= obj) and np.any(other_obj > obj)

def main():
    # Counterexample for d=3, n=2
    d = 3
    x1 = np.array([1., 1., 0.])
    x2 = np.array([0., 1., 1.])

    print(f"Data points: x1 = {x1}, x2 = {x2}\n")

    # The unsupported Pareto optimal point
    w_star = np.array([1., 0., 0.])
    obj_star = get_objectives(w_star, x1, x2)

    print(f"Testing the candidate solution w* = {w_star}")
    print(f"Objective vector for w* is y* = {obj_star}\n")

    # 1. Show that w* cannot be generated by scalarization
    print("Step 1: Verify that w* cannot be a scalarization solution.")
    # A scalarized solution w is proportional to v = lambda1*x1 + lambda2*x2
    # v = [lambda1, lambda1+lambda2, lambda2]
    # For w to be proportional to w* = [1,0,0], we need:
    # lambda1+lambda2 = 0 and lambda2 = 0, which implies lambda1 = 0.
    # This means lambda = [0,0], which is not allowed.
    print("A scalarized solution w is proportional to (lambda1, lambda1+lambda2, lambda2).")
    print("w* = (1,0,0) would require lambda1+lambda2=0 and lambda2=0, so lambda1=0.")
    print("This means lambda=(0,0), which is excluded. So w* is not a scalarized solution.\n")

    # 2. Numerically verify that w* is Pareto optimal.
    # We generate a large number of random points on the non-negative sphere S^2_+
    # and check that none of them dominate w*.
    print("Step 2: Numerically verify that w* is Pareto optimal.")
    print("Generating 1,000,000 random non-negative unit vectors w...")
    
    num_samples = 1_000_000
    is_w_star_po = True
    for _ in range(num_samples):
        # Generate a random point in the non-negative orthant of the sphere
        w_rand = np.random.rand(d)
        w_rand = w_rand / np.linalg.norm(w_rand)
        
        obj_rand = get_objectives(w_rand, x1, x2)

        if is_dominated(obj_star, obj_rand):
            print(f"Found a point w = {w_rand} with objective {obj_rand} that dominates w*.")
            is_w_star_po = False
            break

    if is_w_star_po:
        print("Verification successful: No dominating point found among the random samples.")
        print("This supports that w* is a Pareto optimal point that scalarization cannot find.\n")

    print("Conclusion: For d=3, non-negativity is not a sufficient condition.")
    print("Since the condition holds for d=2, the largest value for d is 2.")

if __name__ == '__main__':
    main()
