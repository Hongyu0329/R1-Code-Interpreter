import collections

def solve_mathematical_puzzle():
    """
    This function solves the given mathematical puzzle about prime tt-ideals.
    
    The logic is based on the classification of prime tt-ideals for the category K,
    which is equivalent to the derived category of coherent sheaves on P^1 over F_p.
    
    The prime ideals correspond to points on P^1(F_p) and a generic point.
    - Objects 4, 5, 6, 7 are identified as generators for primes at points 0, 1, p-1, and infinity.
    - Objects 8, 9, 10, 11 generate the same prime as object 7.
    - Objects 12, 13, 14 have empty support and generate the prime ideal (0).
    - Other objects are either too large, contain the unit, or are nilpotent, and thus do not generate prime ideals.
    
    The value of p is inferred to be 5, as it is the largest prime factor of 20 (the number of objects).
    """
    
    p = 5

    # Part 1: List of objects that generate a prime tt-ideal.
    # Based on the reasoning outlined above.
    generating_objects = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    generating_objects.sort()
    
    # Part 2: Number of prime tt-ideals not generated by these objects.
    # The prime ideals correspond to points in F_p union {infinity}, plus a generic point.
    # The generated primes correspond to points {0, 1, p-1, infinity} and the generic point.
    all_fp_points = set(range(p))
    generated_fp_points = {0, 1, p - 1}
    
    non_generated_primes_count = len(all_fp_points - generated_fp_points)

    # Format the output as specified: "list;count".
    # The instruction "output each number in the final equation!" is interpreted as a typo
    # for "final list/answer", as demonstrated by the example format.
    
    first_answer = ",".join(map(str, generating_objects))
    second_answer = non_generated_primes_count
    
    print(f"{first_answer};{second_answer}")

solve_mathematical_puzzle()