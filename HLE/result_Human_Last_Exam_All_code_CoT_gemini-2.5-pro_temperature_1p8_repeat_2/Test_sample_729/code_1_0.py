import math

# Step 1: Define the group and the problem
group_order = 128
n = int(math.log2(group_order))
x_order = 2**(n - 1)
y_square_x_power = 2**(n - 2)

print(f"The problem is to find the number of power subgroups in the generalized quaternion group of size {group_order}, denoted Q_{group_order}.")
print(f"The presentation for this group is: Q_{group_order} = <x, y | x^{x_order} = 1, y^2 = x^{y_square_x_power}, y^-1*x*y = x^-1>.")
print(f"For Q_128, this is: Q_128 = <x, y | x^64 = 1, y^2 = x^32, y^-1*x*y = x^-1>.")
print("-" * 30)

# Step 2 & 3: Define power subgroups and simplify the problem
print("A power subgroup is generated by the k-th powers of all elements of the group, for some integer k.")
print("We only need to consider k values that are divisors of the group's exponent.")

y_order = 4  # Since y^2 = x^32, y^4 = (x^32)^2 = x^64 = 1.
exponent = x_order # lcm(64, 4) = 64
print(f"The exponent of Q_{group_order} is {exponent}.")

divisors_of_exponent = [d for d in range(1, exponent + 1) if exponent % d == 0]
print(f"The divisors of {exponent} are: {divisors_of_exponent}.")
print("-" * 30)

# Step 4, 5, 6: Calculate for each type of divisor

# Case 1: k is odd. The only odd divisor is 1.
print("Analysis for odd divisors of the exponent (k=1):")
print("For any odd k, the mapping g -> g^k is a permutation of the elements of Q_128.")
print("This means the set of k-th powers {g^k | g in G} is identical to the set of elements in G.")
print("Therefore, for k=1 (and any odd k), the power subgroup is Q_128 itself.")
odd_k_subgroups_count = 1
print(f"This gives 1 unique power subgroup from odd powers: Q_128.")
print("-" * 30)

# Case 2: k is an even divisor.
print("Analysis for even divisors of the exponent (k = 2, 4, 8, 16, 32, 64):")
print("For an even divisor k, the power subgroup <g^k> is determined as follows:")
print(" - For elements g = x^i, g^k = x^(i*k). These generate the cyclic subgroup <x^k>.")
print(" - For elements g = x^i*y, g^k = ((x^i*y)^2)^(k/2) = (x^32)^(k/2) = x^(16*k).")
print("Since k is an even divisor of 64, 16*k is always a multiple of k. Thus, x^(16*k) is an element of <x^k>.")
print("So, for each even divisor k, the power subgroup is <x^k>.")

even_divisors = [d for d in divisors_of_exponent if d % 2 == 0]
even_k_subgroups_count = len(even_divisors)

print("\nThe distinct subgroups for each even k are:")
for k in even_divisors:
    print(f"  k = {k}: The subgroup is <x^{k}>, which has order {x_order // k}.")

print(f"\nThis gives {even_k_subgroups_count} distinct power subgroups from even powers.")
print("-" * 30)

# Step 7: Final calculation and conclusion
total_subgroups = odd_k_subgroups_count + even_k_subgroups_count

print("Final Calculation:")
print("Number of power subgroups from odd k values: 1")
print(f"Number of power subgroups from even k values: {even_k_subgroups_count}")
print(f"Total number of power subgroups = {odd_k_subgroups_count} + {even_k_subgroups_count} = {total_subgroups}")
print(f"\nThere are {total_subgroups} power subgroups in the generalized quaternion group of size 128.")
print(f"<<<{total_subgroups}>>>")