import math

def find_min_N():
    """
    This function finds the smallest positive integer N for which the set S(N) is non-empty.

    According to the problem definition, S(N) is the set of pairs of positive integers (n1, n2)
    such that n1 <= N, n2 <= N, and there exists some r > 0 for which the group GG_{n1,n2}(r) is infinite.

    A key result from the theory of groups generated by piecewise isometries states that
    GG_{n1,n2}(r) can be infinite if and only if n1 and n2 satisfy the inequality 1/n1 + 1/n2 < 1.

    This program searches for the smallest N by testing values of N starting from 1. For each N,
    it checks all pairs (n1, n2) to see if they satisfy the condition.
    """
    N = 1
    while True:
        found_pair = None
        # Iterate through n1 and n2 from 1 to N
        for n1 in range(1, N + 1):
            for n2 in range(1, N + 1):
                # Check the condition for the group to be infinite.
                if 1 / n1 + 1 / n2 < 1:
                    found_pair = (n1, n2)
                    break
            if found_pair:
                break
        
        if found_pair:
            # We have found the smallest N for which S(N) is not empty.
            n1, n2 = found_pair
            result = 1 / n1 + 1 / n2
            
            print(f"The smallest positive integer N for which S(N) is non-empty is {N}.")
            print(f"This is because for N={N}, at least one pair (n1, n2) with n1, n2 <= {N} satisfies the condition for the group to be infinite, which is 1/n1 + 1/n2 < 1.")
            print(f"The first such pair found is (n1, n2) = ({n1}, {n2}).")
            print("For this pair, the calculation is as follows:")
            print(f"1 / {n1} + 1 / {n2} = {1/n1} + {1/n2} = {result}, which is less than 1.")
            return N

        N += 1

if __name__ == '__main__':
    find_min_N()
