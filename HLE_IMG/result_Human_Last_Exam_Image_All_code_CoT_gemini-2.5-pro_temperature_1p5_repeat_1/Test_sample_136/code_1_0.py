import collections

def find_orbits(generators):
    """
    Calculates the number of equivalence classes (orbits) for colorings of a 6-bead necklace
    with one blue and one green bead, given a set of symmetry generators.
    """
    # Define all 30 possible colorings (positions 0 to 5)
    positions = range(6)
    all_colorings = set((b, g) for b in positions for g in positions if b != g)
    
    # Store the orbits
    orbits = []
    
    # Continue until all colorings have been classified into an orbit
    while all_colorings:
        # Start a new orbit with an unclassified coloring
        orbit = set()
        queue = collections.deque([all_colorings.pop()])
        orbit.add(queue[0])
        
        # Explore the orbit using a breadth-first search
        while queue:
            current_coloring = queue.popleft()
            # Apply each generator to find new colorings in the orbit
            for gen_func in generators:
                new_coloring = gen_func(current_coloring)
                if new_coloring not in orbit:
                    orbit.add(new_coloring)
                    queue.append(new_coloring)

        orbits.append(orbit)
        # Remove all elements of the discovered orbit from the initial set
        all_colorings.difference_update(orbit)
        
    return len(orbits)

# Define the generator functions for rotation and reflection
# A 60-degree clockwise rotation
def apply_rotation(coloring):
    return ((coloring[0] + 1) % 6, (coloring[1] + 1) % 6)

# A reflection across the vertical axis (passing through beads 0 and 3)
def apply_reflection(coloring):
    return ((6 - coloring[0]) % 6, (6 - coloring[1]) % 6)

# --- Analysis ---

# 1. Analyze for C_6 (rotations only)
c6_generators = [apply_rotation]
c6_class_count = find_orbits(c6_generators)

# 2. Analyze for D_6 (rotations and reflections)
d6_generators = [apply_rotation, apply_reflection]
d6_class_count = find_orbits(d6_generators)

# --- Conclusion ---
print("Analysis of Symmetry Groups:")
print(f"The Cyclic Group C_6 (rotations) results in {c6_class_count} equivalence classes.")
print(f"The Dihedral Group D_6 (rotations & reflections) results in {d6_class_count} equivalence classes.")
print("\nSince the image shows 5 distinct rows (classes), the group of symmetries is C_6.")
print("\nThe group C_6 is generated by a single element. Its minimal generator is a rotation that can form all other rotations.")
print("\nMinimal generator:")
print("rotation by 60 degrees")
