import numpy as np

def calculate_tsne_cost(P, Q):
    # Convert input lists to numpy arrays
    P_np = np.array(P)
    Q_np = np.array(Q)
    
    # Ensure no division by zero by setting minimum values
    P_np = np.maximum(P_np, 1e-12)
    Q_np = np.maximum(Q_np, 1e-12)
    
    # Calculate the cost
    C = np.sum(P_np * np.log(P_np / Q_np))
    
    # Return the cost as a float
    return float(C)

# Given input
P = [[0.43458775374134095, 0.2462497710209618, 0.44568579117984464, 0.25608781709102313, 0.8614862992115147, 0.5604352660118785], 
     [0.7442839657199807, 0.9265221867221619, 0.49491787839107704, 0.468537729401701, 0.12795722422850875, 0.7842725419704123], 
     [0.06949969168348513, 0.36338618940235357, 0.16722420906574653, 0.7281792514390089, 0.45794494925975726, 0.5049149694368028], 
     [0.528349966647472, 0.8428916214709331, 0.9798453013277657, 0.37038839626197617, 0.8804136068334686, 0.7099793643218981], 
     [0.6972498779596614, 0.9771839649615881, 0.20548516265048078, 0.31844034495896245, 0.48296853862597244, 0.30636295826214943], 
     [0.2911110749064263, 0.19937047926500173, 0.9212766835119168, 0.9703447346895948, 0.8764537152137262, 0.7936544638689997]]

Q = [[0.40618103800338745, 0.3104332915493412, 0.40354161168101343, 0.01723183401436279, 0.1178590085414708, 0.47374265346077027], 
     [0.4149957303451549, 0.6536521121718212, 0.5607397459703742, 0.09953810825784848, 0.8483486742101365, 0.42608993735803], 
     [0.47824155406978675, 0.37131159596953167, 0.3669342315482209, 0.9197666475103127, 0.9660831184572842, 0.1839294359425433], 
     [0.9177512102813375, 0.8106543817412807, 0.8235488460381175, 0.282797891445707, 0.8980106884372303, 0.5820362697793907], 
     [0.4583596910500196, 0.034788806804265326, 0.51667591655803, 0.17456488862295916, 0.28825488189045234, 0.8659439318233171], 
     [0.3433635537350168, 0.8145231513293697, 0.3666876539865006, 0.11464985472790234, 0.39792164432608335, 0.16714833513241723]]

# Calculate the cost
cost = calculate_tsne_cost(P, Q)
print(cost)