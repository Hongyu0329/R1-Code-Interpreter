def count_rectangles(grid):
    rows = len(grid)
    cols = len(grid[0]) if rows > 0 else 0
    visited = [[False] * cols for _ in range(rows)]
    rectangle_count = 0

    def is_new_rectangle(r, c):
        # Check if the current position is the top-left corner of a new rectangle
        if grid[r][c] in '#█' and not visited[r][c]:
            # Check if it's the top-left corner
            if (r == 0 or grid[r-1][c] not in '#█') and (c == 0 or grid[r][c-1] not in '#█'):
                return True
        return False

    def mark_rectangle(r, c):
        # Mark the entire rectangle as visited
        stack = [(r, c)]
        while stack:
            x, y = stack.pop()
            if 0 <= x < rows and 0 <= y < cols and grid[x][y] in '#█' and not visited[x][y]:
                visited[x][y] = True
                stack.extend([(x+1, y), (x, y+1), (x-1, y), (x, y-1)])

    for r in range(rows):
        for c in range(cols):
            if is_new_rectangle(r, c):
                rectangle_count += 1
                mark_rectangle(r, c)

    return rectangle_count

# Define the grid
grid = [
    "                                                               #########        ",
    "                                                               #       #        ",
    "                                                               #       #        ",
    "                                                               #       #        ",
    "                                                              #█#      #        ",
    "                                                              ###      #        ",
    "                                                              ###      #        ",
    "                                                              ###      #        ",
    "                                                              ###      #        ",
    "                                                              ###      #        ",
    "                                                              ###      #        ",
    "                                                              ###      #        ",
    "                                                              ###      #        ",
    "                                                              ###      #        ",
    "                    ##########################################███#     #        ",
    "                    #                                         ####     #        ",
    "                    #                                         ####     #        ",
    "                    #                                         ####     #        ",
    "                    #                                         ####     #        ",
    "                    #                                         ####     #        ",
    "                    #                                         ####     #        ",
    "                  ##█######################                   ####     #        ",
    "                  # #                     #                   ####     #        ",
    "                  # # ##################  #                   ####     #        ",
    "                  # # #                #  #                   ####     #        ",
    "                  # # #                #  #                   ####     #        ",
    "                  # # #                #  #                   ####     #        ",
    "       ###########█#█#█################█##█###################████##   #        ",
    "       #          # # #                #  #                   #### #   #        ",
    "       #          # # #                #  #                   #### #   #        ",
    "       #          # # #                #  #                   #### #   #        ",
    "       #          # # #                #  #         ##########████#█###█########",
    "       #          # # #                #  #         #         #### #   #       #",
    "       #          # # #                #  #         #         ████##   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         █#####   #       #",
    "       #          # # #                #  #         #         ██####   #       #",
    "       #          # # #                #  #         #         ## ###   #       #",
    "       #          # # #                #  #         #         ## ###   #       #",
    "       #          # # #                #  #         #         ## ###   #       #",
    "       #          # # #                #  #         #         ## ###   #       #",
    "       #          # # #                #  #         #         ## ###   #       #",
    "       #          # # ##################  #     ####█#####    ## ###   #       #",
    "       #          # #                     #     #   #    #    ## ###   #       #",
    "       #          # #                     #     #   #    #    ## ###   #       #",
    "       #          # #                     #     ####█#####    ## ###   #       #",
    "       #          # #                     #         #         ## ###   #       #",
    "       #          # #                     #         #         ###███####       #",
    "       #          # # ####################█#########█##       #  ###           #",
    "       #          # # #                   #         # #       #  ###           #",
    "       #          # # #                   #         # #       #  ###           #",
    "       #          # # #                   #         # #       #  ###           #",
    "       #          # # #                   #         # #       #  ###           #",
    "       #          # # #                   #         # #       #  ###           #",
    "       #          # # #                   #         # #       #  ###           #",
    "       #          # # #                   #         ##█#######█##███############",
    "       #          # # #                   #           #       #  ###            ",
    "       #          # # ####################█############       #  ###            ",
    "       #          # #                     #                   #  ###            ",
    "       #          # #                     #                   #  ###            ",
    "       #          # #                     #                   #  ###            ",
    "       #          # #                     #                   ###█##            ",
    "       ###########█#█#####################█######################█##            ",
    "                  ##█######################                      #              ",
    "                    #                                            #              ",
    "                    ##############################################              "
]

# Count the rectangles
rectangle_count = count_rectangles(grid)
print(rectangle_count)