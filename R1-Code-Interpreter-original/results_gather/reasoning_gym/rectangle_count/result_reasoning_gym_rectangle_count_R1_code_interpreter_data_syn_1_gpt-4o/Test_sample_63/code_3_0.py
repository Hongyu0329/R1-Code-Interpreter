def count_rectangles(grid):
    rows = len(grid)
    cols = len(grid[0]) if rows > 0 else 0
    visited = [[False] * cols for _ in range(rows)]
    
    def is_rectangle(r, c):
        if grid[r][c] not in ('#', '█') or visited[r][c]:
            return False
        # Mark the current position as visited
        visited[r][c] = True
        # Explore the rectangle
        stack = [(r, c)]
        while stack:
            x, y = stack.pop()
            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and grid[nx][ny] in ('#', '█'):
                    visited[nx][ny] = True
                    stack.append((nx, ny))
        return True

    rectangle_count = 0
    for r in range(rows):
        for c in range(cols):
            if is_rectangle(r, c):
                rectangle_count += 1

    return rectangle_count

# Define the grid
grid = [
    "                                                            ############        ",
    "                                                            #          #        ",
    "                                                            #          #        ",
    "                                                            #          #        ",
    "                                                            #          #        ",
    "                                                            ############        ",
    "                                                                                ",
    "                                                                                ",
    "                                                                                ",
    " ###############################################################################",
    " #                                                                             #",
    " #                  ##########                                                 #",
    " #                  #        #                                                 #",
    " #                  #        #                                                 #",
    " #                  #        #                                                 #",
    " #                  #        #                                                 #",
    " #                  #        #                                 ###             #",
    " #                  #        #                                 # #             #",
    " #                  #        #                                 # #             #",
    " #                  #        #                                 # #             #",
    " #                  #        #                                 # #             #",
    " #                  #        #                 #######         # #             #",
    " #                  #        #                 #     #         # #             #",
    " #                  #        #                 #     #         # # #############",
    " #                  #        #                 #     #         # # #          ##",
    " #                  #        #                 #     #         # # #          ##",
    " #                  #        #                 #     #         # # #          ##",
    " #                  #        #                 #     #         # # #          ##",
    " #                  #        #                 #     #         # # #          ##",
    " #                  #        #                 #     #         # # #          ##",
    " #                  #        #                 #     #         # # #          ##",
    " #                  #        #                 #     #         # # #          ##",
    " #                  #        #                 #     #         # # #          ##",
    " #                  #        #                 #     #         # # #          ##",
    " #           #######█########█#################███████######## # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " #           #      #        #                               # # # #          ##",
    " ############█######█########█###############################█#█#█#█##########█#",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      #        #                               # # # #          # ",
    "             #      ##########                               # # # #          # ",
    "             ################################################# # # #          # ",
    "                                                               # # #          # ",
    "                                                               # # #          # ",
    "                                                               # # #          # ",
    "                                                               # # #          # ",
    "                                                               # # ############ ",
    "                                                               # #              ",
    "                                                               # #              ",
    "                                                               # █############# ",
    "                                                               ##█            # ",
    "                                                                 #            # ",
    "                        #####                                    #            # ",
    "                        #   #                                    ############## ",
    "                        #   #                                                   ",
    "                        #   #                                                   ",
    "                        #   #                                                   ",
    "                        #   #                                                   ",
    "                        #   #                                                   ",
    "                        #####                                                   "
]

# Count the rectangles
rectangle_count = count_rectangles(grid)
print(rectangle_count)