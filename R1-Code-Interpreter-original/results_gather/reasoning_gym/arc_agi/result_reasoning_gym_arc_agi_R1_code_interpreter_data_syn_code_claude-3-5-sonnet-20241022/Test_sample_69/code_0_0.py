def find_blocks(grid):
    blocks = []
    # Find the dimensions
    rows = len(grid)
    cols = len(grid[0])
    
    # Parse the grid to find 2x2 number pairs
    for i in range(1, rows-2, 5):  # Skip separator rows
        for j in range(1, cols-2, 4):  # Skip separator columns
            # Get the 2x2 middle part of each block
            block = [
                grid[i][j], grid[i][j+1],
                grid[i+1][j], grid[i+1][j+1]
            ]
            # If all numbers in the 2x2 block are the same (except 3)
            if len(set(block)) == 1 and block[0] != 3:
                blocks.append(block[0])
    
    return blocks

# Test input
test_input = [
    [3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3],
    [3,2,2,3,5,3,2,2,3,5,3,5,5,3,5,3,5,5,3,5,3],
    [3,2,2,3,5,3,2,2,3,5,3,5,5,3,5,3,5,5,3,5,3],
    [3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3],
    [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
    [3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3],
    [3,5,5,3,5,3,0,0,3,5,3,2,2,3,5,3,5,5,3,5,3],
    [3,5,5,3,5,3,0,0,3,5,3,2,2,3,5,3,5,5,3,5,3],
    [3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3],
    [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
    [3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3],
    [3,0,0,3,5,3,5,5,3,5,3,5,5,3,5,3,1,1,3,5,3],
    [3,0,0,3,5,3,5,5,3,5,3,5,5,3,5,3,1,1,3,5,3],
    [3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3],
    [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
    [3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3],
    [3,4,4,3,5,3,0,0,3,5,3,1,1,3,5,3,2,2,3,5,3],
    [3,4,4,3,5,3,0,0,3,5,3,1,1,3,5,3,2,2,3,5,3],
    [3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3,3,3,3,5,3]
]

blocks = find_blocks(test_input)
print("Numbers in order of appearance:", blocks)