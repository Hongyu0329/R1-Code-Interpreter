from collections import deque, defaultdict

# First, let's create a set of common 4-letter words
words = set('''
ABLE ACHE ACID ACRE ACTS ADDS AGED AGES AIDE AIDS AIMS AIRS AIRY ALLY
ALSO ALTO AMID ARMY ARTS ASKS ATOM AUNT AUTO AWAY BACK BAGS BAIL BAKE
BALL BAND BANK BARE BARK BASE BATH BEAM BEAN BEAR BEAT BEDS BEEF BEEN
BEER BELL BELT BEND BENT BEST BETA BIAS BIKE BILL BIND BIRD BITE BITS
BLOW BLUE BLUR BOAT BODY BOLD BOLT BOMB BOND BONE BOOK BOOM BOOT BORE
BORN BOSS BOTH BOWL BULK BULL BURN BURY BUSY BUYS BYTE CAFE CAGE CAKE
CALL CALM CAME CAMP CARD CARE CARS CART CASE CASH CAST CATS CAVE CELL
CENT CHIP CITY CLAN CLAY CLIP CLUB CLUE COAL COAT CODE COLD COME CONE
COOK COOL COPE COPY CORD CORE CORN COST CREW CROP CUBE CURE CUTS DARE
DARK DATA DATE DAWN DAYS DEAD DEAL DEAN DEAR DEBT DECK DEEP DEER DENY
DESK DIAL DICE DIED DIES DIET DIGS DIME DIRE DIRT DISC DISH DISK DIVE
DOCK DOES DOGS DOME DONE DOOR DOSE DOVE DOWN DRAG DRAW DREW DROP DRUG
DRUM DUAL DUCK DULL DUMP DUST DUTY EACH EARN EARS EASE EAST EASY EDGE
EDIT EGGS ELSE ENDS EPIC EVER EVIL EXAM EYES FACE FACT FADE FAIL FAIR
FALL FAME FARE FARM FAST FATE FEAR FEED FEEL FEET FELL FELT FILE FILL
FILM FIND FINE FIRE FIRM FISH FITS FIVE FLAG FLAT FLEW FLEX FLIP FLOW
FOLK FOOD FOOL FOOT FORD FORE FORK FORM FORT FOUR FREE FROM FUEL FULL
FUND FURY FUSE GAIN GAME GANG GATE GAVE GEAR GENE GIFT GIRL GIVE GLAD
GLOW GOAL GOES GOLD GOLF GONE GOOD GORE GRAB GRAY GREW GREY GRID GRIM
GROW GULF HAIR HALF HALL HAND HANG HARD HARM HATE HAVE HEAD HEAL HEAR
HEAT HELD HELL HELP HERE HERO HIDE HIGH HILL HINT HIRE HOLD HOLE HOLY
HOME HOPE HOST HOUR HUGE HULL HUNG HUNT HURT IDEA IDLE INCH INTO IRON
ITEM JACK JAIL JAZZ JEAN JEEP JETS JOBS JOIN JOKE JUMP JUST KEEP KEPT
KEYS KICK KIND KING KISS KNEW KNOW LACK LADY LAID LAKE LAMP LAND LANE
LAST LATE LAWN LAWS LAZY LEAD LEAF LEAK LEAN LEAP LEGS LEND LENS LESS
LETS LIED LIES LIFE LIFT LIKE LINE LINK LION LIPS LIST LIVE LOAD LOAN
LOCK LOGS LONE LONG LOOK LOOP LORD LOSE LOSS LOST LOTS LOVE LUCK LUNG
MADE MAIL MAIN MAKE MALE MALL MANY MARK MASK MASS MATE MATH MAZE MEAL
MEAN MEAT MEET MENU MERE MESH MILE MILK MILL MIND MINE MINT MISS MODE
MOOD MOON MORE MOST MOVE MUCH MUST NAIL NAME NAVY NEAR NECK NEED NEWS
NEXT NICE NINE NODE NONE NOSE NOTE NULL NUTS ODDS OILS OKAY ONCE ONLY
ONTO OPEN ORAL OVER PACE PACK PAGE PAID PAIN PAIR PALM PARK PART PASS
PAST PATH PEAK PICK PIER PILE PINE PINK PIPE PLAN PLAY PLEA PLOT PLUG
PLUS POEM POET POLE POLL POOL POOR PORT POST PULL PURE PUSH PUTS QUAD
QUIT RACE RACK RAIL RAIN RANK RARE RATE READ REAL REAR RELY RENT REST
RICE RICH RIDE RING RISE RISK ROAD ROCK ROLE ROLL ROOF ROOM ROOT ROPE
ROSE RULE RUSH SAFE SAID SAIL SALE SALT SAME SAND SAVE SAYS SCAN SEAL
SEAT SEED SEEK SEEM SEEN SELF SELL SEND SENT SETS SHIP SHOP SHOT SHOW
SHUT SIDE SIGN SILK SING SINK SITE SIZE SKIN SKIP SLAM SLID SLIM SLIP
SLOW SNAP SNOW SOFT SOIL SOLD SOLE SOME SONG SOON SORT SOUL SOUP SPAN
SPIN SPOT STAR STAY STEM STEP STIR STOP SUCH SUIT SURE SWIM TAIL TAKE
TALE TALK TALL TANK TAPE TASK TEAM TEAR TELL TEND TERM TEST TEXT THAN
THAT THEM THEN THEY THIN THIS TIDE TIDY TIME TIRE TOLD TOLL TONE TOOK
TOOL TOUR TOWN TRAP TREE TREK TRIM TRIP TRUE TUBE TUNE TURN TWIN TYPE
UNIT UPON USED USER USES VARY VAST VERB VERY VIEW VISA VOID VOTE WAGE
WAIT WAKE WALK WALL WANT WARD WARM WARN WASH WAVE WAYS WEAK WEAR WEEK
WELL WENT WERE WEST WHAT WHEN WIDE WIFE WILD WILL WIND WINE WING WIRE
WISE WISH WITH WOOD WORD WORE WORK WORM YARD YEAR YOUR ZERO ZONE
'''.split())

def get_neighbors(word):
    neighbors = []
    for i in range(len(word)):
        for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
            new_word = word[:i] + c + word[i+1:]
            if new_word in words and new_word != word:
                neighbors.append(new_word)
    return neighbors

def find_path(start, end):
    if start not in words or end not in words:
        return None
    
    queue = deque([[start]])
    visited = {start}
    
    while queue:
        path = queue.popleft()
        word = path[-1]
        
        if word == end:
            return path
        
        for neighbor in get_neighbors(word):
            if neighbor not in visited:
                visited.add(neighbor)
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)
    
    return None

# Find the path from SLOG to TIDY
path = find_path('SLOG', 'TIDY')
if path:
    print(','.join(path))
else:
    print("No valid path found")